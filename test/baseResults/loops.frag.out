
Top IR:
; ModuleID = 'Glslang'

@BaseColor = global <4 x float> zeroinitializer
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@gl_FragColor = global <4 x float> zeroinitializer
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float
@d13 = external addrspace(2) constant float
@d19 = external addrspace(2) constant float
@d20 = external addrspace(2) constant float
@d21 = external addrspace(2) constant float
@d22 = external addrspace(2) constant float
@d23 = external addrspace(2) constant float
@d24 = external addrspace(2) constant float
@d25 = external addrspace(2) constant float
@d26 = external addrspace(2) constant float
@d27 = external addrspace(2) constant float
@d28 = external addrspace(2) constant float
@d29 = external addrspace(2) constant float
@d30 = external addrspace(2) constant float
@d31 = external addrspace(2) constant float
@d32 = external addrspace(2) constant float
@d33 = external addrspace(2) constant float
@d34 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %i121 = alloca i32
  %i107 = alloca i32
  %i94 = alloca i32
  %i78 = alloca i32
  %i69 = alloca i32
  %i = alloca i32
  %color = alloca <4 x float>
  br label %mainBody

mainBody:                                         ; preds = %entry
  %color1 = load <4 x float>* @BaseColor
  store <4 x float> %color1, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %mainBody
  br i1 false, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  unreachable

ifmerge:                                          ; preds = %loop-header
  %0 = load <4 x float>* %color
  %1 = extractelement <4 x float> %0, i32 0
  %2 = fcmp olt float %1, 0x3FD51EB860000000
  br i1 %2, label %then2, label %ifmerge5

then2:                                            ; preds = %ifmerge
  %3 = load <4 x float>* %color
  %color3 = fadd <4 x float> %3, <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  store <4 x float> %color3, <4 x float>* %color
  br label %loop-merge

post-loop-break4:                                 ; No predecessors!
  unreachable

ifmerge5:                                         ; preds = %ifmerge
  %4 = load <4 x float>* %color
  %5 = extractelement <4 x float> %4, i32 0
  %6 = fcmp olt float %5, 0x3FE51EB860000000
  br i1 %6, label %then6, label %ifmerge9

then6:                                            ; preds = %ifmerge5
  %7 = load <4 x float>* %color
  %color7 = fadd <4 x float> %7, <float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000>
  store <4 x float> %color7, <4 x float>* %color
  br label %loop-merge

post-loop-break8:                                 ; No predecessors!
  unreachable

ifmerge9:                                         ; preds = %ifmerge5
  %8 = load <4 x float>* %color
  %color10 = fadd <4 x float> %8, <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  store <4 x float> %color10, <4 x float>* %color
  br label %loop-merge

post-loop-break11:                                ; No predecessors!
  unreachable

loop-merge:                                       ; preds = %ifmerge9, %then6, %then2, %then
  br label %loop-header12

loop-header12:                                    ; preds = %ifmerge15, %loop-merge
  %9 = load <4 x float>* %color
  %10 = extractelement <4 x float> %9, i32 0
  %11 = load float addrspace(2)* @d, !gla.uniform !3
  %12 = fcmp olt float %10, %11
  %13 = xor i1 %12, true
  br i1 %13, label %then13, label %ifmerge15

then13:                                           ; preds = %loop-header12
  br label %loop-merge17

post-loop-break14:                                ; No predecessors!
  unreachable

ifmerge15:                                        ; preds = %loop-header12
  %14 = load <4 x float> addrspace(2)* @bigColor, !gla.uniform !5
  %15 = load <4 x float>* %color
  %color16 = fadd <4 x float> %15, %14
  store <4 x float> %color16, <4 x float>* %color
  br label %loop-header12

post-loop-continue:                               ; No predecessors!
  unreachable

loop-merge17:                                     ; preds = %then13
  br label %loop-header18

loop-header18:                                    ; preds = %ifmerge25, %then23, %loop-merge17
  %16 = load <4 x float>* %color
  %17 = extractelement <4 x float> %16, i32 2
  %18 = load float addrspace(2)* @d, !gla.uniform !3
  %19 = fcmp olt float %17, %18
  %20 = xor i1 %19, true
  br i1 %20, label %then19, label %ifmerge21

then19:                                           ; preds = %loop-header18
  br label %loop-merge28

post-loop-break20:                                ; No predecessors!
  unreachable

ifmerge21:                                        ; preds = %loop-header18
  %21 = load <4 x float> addrspace(2)* @bigColor1_1, !gla.uniform !6
  %22 = load <4 x float>* %color
  %color22 = fadd <4 x float> %22, %21
  store <4 x float> %color22, <4 x float>* %color
  %23 = load <4 x float>* %color
  %24 = extractelement <4 x float> %23, i32 3
  %25 = load float addrspace(2)* @d, !gla.uniform !3
  %26 = fcmp olt float %24, %25
  br i1 %26, label %then23, label %ifmerge25

then23:                                           ; preds = %ifmerge21
  br label %loop-header18

post-loop-continue24:                             ; No predecessors!
  unreachable

ifmerge25:                                        ; preds = %ifmerge21
  %27 = load <4 x float> addrspace(2)* @bigColor1_1, !gla.uniform !6
  %28 = load <4 x float>* %color
  %color26 = fadd <4 x float> %28, %27
  store <4 x float> %color26, <4 x float>* %color
  br label %loop-header18

post-loop-continue27:                             ; No predecessors!
  unreachable

loop-merge28:                                     ; preds = %then19
  br label %loop-header29

loop-header29:                                    ; preds = %ifmerge32, %loop-merge28
  %29 = load <4 x float>* %color
  %30 = extractelement <4 x float> %29, i32 0
  %31 = fcmp olt float %30, 4.200000e+01
  %32 = xor i1 %31, true
  br i1 %32, label %then30, label %ifmerge32

then30:                                           ; preds = %loop-header29
  br label %loop-merge35

post-loop-break31:                                ; No predecessors!
  unreachable

ifmerge32:                                        ; preds = %loop-header29
  %33 = load <4 x float>* %color
  %color33 = fadd <4 x float> %33, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color33, <4 x float>* %color
  br label %loop-header29

post-loop-continue34:                             ; No predecessors!
  unreachable

loop-merge35:                                     ; preds = %then30
  br label %loop-header36

loop-header36:                                    ; preds = %ifmerge39, %loop-merge35
  %34 = load <4 x float>* %color
  %35 = extractelement <4 x float> %34, i32 3
  %36 = load float addrspace(2)* @d2, !gla.uniform !7
  %37 = fcmp olt float %35, %36
  %38 = load <4 x float>* %color
  %39 = extractelement <4 x float> %38, i32 1
  %40 = load float addrspace(2)* @d3, !gla.uniform !8
  %41 = fcmp olt float %39, %40
  %42 = and i1 %37, %41
  %43 = xor i1 %42, true
  br i1 %43, label %then37, label %ifmerge39

then37:                                           ; preds = %loop-header36
  br label %loop-merge42

post-loop-break38:                                ; No predecessors!
  unreachable

ifmerge39:                                        ; preds = %loop-header36
  %44 = load <4 x float> addrspace(2)* @bigColor1_2, !gla.uniform !9
  %45 = load <4 x float>* %color
  %color40 = fadd <4 x float> %45, %44
  store <4 x float> %color40, <4 x float>* %color
  br label %loop-header36

post-loop-continue41:                             ; No predecessors!
  unreachable

loop-merge42:                                     ; preds = %then37
  br label %loop-header43

loop-header43:                                    ; preds = %ifmerge50, %loop-merge42
  %46 = load <4 x float>* %color
  %47 = extractelement <4 x float> %46, i32 2
  %48 = load float addrspace(2)* @d3, !gla.uniform !8
  %49 = fcmp olt float %47, %48
  %50 = xor i1 %49, true
  br i1 %50, label %then44, label %ifmerge46

then44:                                           ; preds = %loop-header43
  br label %loop-merge53

post-loop-break45:                                ; No predecessors!
  unreachable

ifmerge46:                                        ; preds = %loop-header43
  %51 = load <4 x float> addrspace(2)* @bigColor1_3, !gla.uniform !10
  %52 = load <4 x float>* %color
  %color47 = fadd <4 x float> %52, %51
  store <4 x float> %color47, <4 x float>* %color
  %53 = load <4 x float>* %color
  %54 = extractelement <4 x float> %53, i32 1
  %55 = load float addrspace(2)* @d4, !gla.uniform !11
  %56 = fcmp olt float %54, %55
  br i1 %56, label %then48, label %ifmerge50

then48:                                           ; preds = %ifmerge46
  br label %loop-merge53

post-loop-break49:                                ; No predecessors!
  unreachable

ifmerge50:                                        ; preds = %ifmerge46
  %57 = load <4 x float> addrspace(2)* @bigColor1_3, !gla.uniform !10
  %58 = load <4 x float>* %color
  %color51 = fadd <4 x float> %58, %57
  store <4 x float> %color51, <4 x float>* %color
  br label %loop-header43

post-loop-continue52:                             ; No predecessors!
  unreachable

loop-merge53:                                     ; preds = %then48, %then44
  store i32 0, i32* %i
  br label %loop-header54

loop-header54:                                    ; preds = %ifmerge57, %loop-merge53
  %59 = load i32* %i
  %60 = load i32 addrspace(2)* @Count, !gla.uniform !12
  %61 = icmp slt i32 %59, %60
  %62 = xor i1 %61, true
  br i1 %62, label %then55, label %ifmerge57

then55:                                           ; preds = %loop-header54
  br label %loop-merge61

post-loop-break56:                                ; No predecessors!
  unreachable

ifmerge57:                                        ; preds = %loop-header54
  %63 = load <4 x float> addrspace(2)* @bigColor2, !gla.uniform !13
  %64 = load <4 x float>* %color
  %color58 = fadd <4 x float> %64, %63
  store <4 x float> %color58, <4 x float>* %color
  %65 = load i32* %i
  %i59 = add i32 %65, 1
  store i32 %i59, i32* %i
  br label %loop-header54

post-loop-continue60:                             ; No predecessors!
  unreachable

loop-merge61:                                     ; preds = %then55
  br label %loop-header62

loop-header62:                                    ; preds = %ifmerge66, %loop-merge61
  %66 = load <4 x float> addrspace(2)* @bigColor3, !gla.uniform !14
  %67 = load <4 x float>* %color
  %color63 = fadd <4 x float> %67, %66
  store <4 x float> %color63, <4 x float>* %color
  %68 = load <4 x float>* %color
  %69 = extractelement <4 x float> %68, i32 0
  %70 = load float addrspace(2)* @d2, !gla.uniform !7
  %71 = fcmp olt float %69, %70
  %72 = xor i1 %71, true
  br i1 %72, label %then64, label %ifmerge66

then64:                                           ; preds = %loop-header62
  br label %loop-merge68

post-loop-break65:                                ; No predecessors!
  unreachable

ifmerge66:                                        ; preds = %loop-header62
  br label %loop-header62

post-loop-continue67:                             ; No predecessors!
  unreachable

loop-merge68:                                     ; preds = %then64
  store i32 0, i32* %i69
  br label %loop-header70

loop-header70:                                    ; preds = %ifmerge73, %loop-merge68
  %73 = load i32* %i69
  %74 = icmp slt i32 %73, 42
  %75 = xor i1 %74, true
  br i1 %75, label %then71, label %ifmerge73

then71:                                           ; preds = %loop-header70
  br label %loop-merge77

post-loop-break72:                                ; No predecessors!
  unreachable

ifmerge73:                                        ; preds = %loop-header70
  %76 = load float addrspace(2)* @d3, !gla.uniform !8
  %77 = load <4 x float>* %color
  %78 = extractelement <4 x float> %77, i32 2
  %79 = fadd float %78, %76
  %80 = load <4 x float>* %color
  %color74 = insertelement <4 x float> %80, float %79, i32 2
  store <4 x float> %color74, <4 x float>* %color
  %81 = load i32* %i69
  %i6975 = add i32 %81, 1
  store i32 %i6975, i32* %i69
  br label %loop-header70

post-loop-continue76:                             ; No predecessors!
  unreachable

loop-merge77:                                     ; preds = %then71
  store i32 0, i32* %i78
  br label %loop-header79

loop-header79:                                    ; preds = %ifmerge90, %loop-merge77
  %82 = load i32* %i78
  %83 = icmp slt i32 %82, 100
  %84 = xor i1 %83, true
  br i1 %84, label %then80, label %ifmerge82

then80:                                           ; preds = %loop-header79
  br label %loop-merge93

post-loop-break81:                                ; No predecessors!
  unreachable

ifmerge82:                                        ; preds = %loop-header79
  %85 = load <4 x float>* %color
  %86 = extractelement <4 x float> %85, i32 2
  %87 = fcmp olt float %86, 2.000000e+01
  br i1 %87, label %then83, label %else

then83:                                           ; preds = %ifmerge82
  %88 = load <4 x float>* %color
  %89 = extractelement <4 x float> %88, i32 0
  %90 = fadd float %89, 1.000000e+00
  %91 = load <4 x float>* %color
  %color84 = insertelement <4 x float> %91, float %90, i32 0
  store <4 x float> %color84, <4 x float>* %color
  br label %ifmerge86

else:                                             ; preds = %ifmerge82
  %92 = load <4 x float>* %color
  %93 = extractelement <4 x float> %92, i32 1
  %94 = fadd float %93, 1.000000e+00
  %95 = load <4 x float>* %color
  %color85 = insertelement <4 x float> %95, float %94, i32 1
  store <4 x float> %color85, <4 x float>* %color
  br label %ifmerge86

ifmerge86:                                        ; preds = %else, %then83
  %96 = load <4 x float>* %color
  %97 = extractelement <4 x float> %96, i32 3
  %98 = fcmp olt float %97, 2.000000e+01
  br i1 %98, label %then87, label %ifmerge90

then87:                                           ; preds = %ifmerge86
  %99 = load <4 x float>* %color
  %100 = extractelement <4 x float> %99, i32 2
  %101 = load <4 x float>* %color
  %102 = extractelement <4 x float> %101, i32 1
  %103 = fcmp ogt float %100, %102
  br i1 %103, label %then88, label %ifmerge89

then88:                                           ; preds = %then87
  br label %ifmerge89

ifmerge89:                                        ; preds = %then87, %then88
  br label %ifmerge90

ifmerge90:                                        ; preds = %ifmerge86, %ifmerge89
  %104 = load i32* %i78
  %i7891 = add i32 %104, 1
  store i32 %i7891, i32* %i78
  br label %loop-header79

post-loop-continue92:                             ; No predecessors!
  unreachable

loop-merge93:                                     ; preds = %then80
  store i32 0, i32* %i94
  br label %loop-header95

loop-header95:                                    ; preds = %ifmerge103, %loop-merge93
  %105 = load i32* %i94
  %106 = icmp slt i32 %105, 120
  %107 = xor i1 %106, true
  br i1 %107, label %then96, label %ifmerge98

then96:                                           ; preds = %loop-header95
  br label %loop-merge106

post-loop-break97:                                ; No predecessors!
  unreachable

ifmerge98:                                        ; preds = %loop-header95
  %108 = load <4 x float>* %color
  %109 = extractelement <4 x float> %108, i32 2
  %110 = fcmp olt float %109, 2.000000e+01
  br i1 %110, label %then99, label %else101

then99:                                           ; preds = %ifmerge98
  %111 = load <4 x float>* %color
  %112 = extractelement <4 x float> %111, i32 0
  %113 = fadd float %112, 1.000000e+00
  %114 = load <4 x float>* %color
  %color100 = insertelement <4 x float> %114, float %113, i32 0
  store <4 x float> %color100, <4 x float>* %color
  br label %ifmerge103

else101:                                          ; preds = %ifmerge98
  %115 = load <4 x float>* %color
  %116 = extractelement <4 x float> %115, i32 1
  %117 = fadd float %116, 1.000000e+00
  %118 = load <4 x float>* %color
  %color102 = insertelement <4 x float> %118, float %117, i32 1
  store <4 x float> %color102, <4 x float>* %color
  br label %ifmerge103

ifmerge103:                                       ; preds = %else101, %then99
  %119 = load i32* %i94
  %i94104 = add i32 %119, 1
  store i32 %i94104, i32* %i94
  br label %loop-header95

post-loop-continue105:                            ; No predecessors!
  unreachable

loop-merge106:                                    ; preds = %then96
  store i32 0, i32* %i107
  br label %loop-header108

loop-header108:                                   ; preds = %ifmerge116, %then113, %loop-merge106
  %120 = load i32* %i107
  %121 = icmp slt i32 %120, 42
  %122 = xor i1 %121, true
  br i1 %122, label %then109, label %ifmerge111

then109:                                          ; preds = %loop-header108
  br label %loop-merge120

post-loop-break110:                               ; No predecessors!
  unreachable

ifmerge111:                                       ; preds = %loop-header108
  %123 = load float addrspace(2)* @d3, !gla.uniform !8
  %124 = load <4 x float>* %color
  %125 = extractelement <4 x float> %124, i32 2
  %126 = fadd float %125, %123
  %127 = load <4 x float>* %color
  %color112 = insertelement <4 x float> %127, float %126, i32 2
  store <4 x float> %color112, <4 x float>* %color
  %128 = load <4 x float>* %color
  %129 = extractelement <4 x float> %128, i32 0
  %130 = load float addrspace(2)* @d4, !gla.uniform !11
  %131 = fcmp olt float %129, %130
  br i1 %131, label %then113, label %ifmerge116

then113:                                          ; preds = %ifmerge111
  %132 = load i32* %i107
  %i107114 = add i32 %132, 1
  store i32 %i107114, i32* %i107
  br label %loop-header108

post-loop-continue115:                            ; No predecessors!
  unreachable

ifmerge116:                                       ; preds = %ifmerge111
  %133 = load <4 x float>* %color
  %134 = extractelement <4 x float> %133, i32 3
  %135 = fadd float %134, 1.000000e+00
  %136 = load <4 x float>* %color
  %color117 = insertelement <4 x float> %136, float %135, i32 3
  store <4 x float> %color117, <4 x float>* %color
  %137 = load i32* %i107
  %i107118 = add i32 %137, 1
  store i32 %i107118, i32* %i107
  br label %loop-header108

post-loop-continue119:                            ; No predecessors!
  unreachable

loop-merge120:                                    ; preds = %then109
  store i32 0, i32* %i121
  br label %loop-header122

loop-header122:                                   ; preds = %ifmerge129, %loop-merge120
  %138 = load i32* %i121
  %139 = icmp slt i32 %138, 42
  %140 = xor i1 %139, true
  br i1 %140, label %then123, label %ifmerge125

then123:                                          ; preds = %loop-header122
  br label %loop-merge133

post-loop-break124:                               ; No predecessors!
  unreachable

ifmerge125:                                       ; preds = %loop-header122
  %141 = load float addrspace(2)* @d3, !gla.uniform !8
  %142 = load <4 x float>* %color
  %143 = extractelement <4 x float> %142, i32 2
  %144 = fadd float %143, %141
  %145 = load <4 x float>* %color
  %color126 = insertelement <4 x float> %145, float %144, i32 2
  store <4 x float> %color126, <4 x float>* %color
  %146 = load <4 x float>* %color
  %147 = extractelement <4 x float> %146, i32 0
  %148 = load float addrspace(2)* @d4, !gla.uniform !11
  %149 = fcmp olt float %147, %148
  br i1 %149, label %then127, label %ifmerge129

then127:                                          ; preds = %ifmerge125
  br label %loop-merge133

post-loop-break128:                               ; No predecessors!
  unreachable

ifmerge129:                                       ; preds = %ifmerge125
  %150 = load <4 x float>* %color
  %151 = extractelement <4 x float> %150, i32 3
  %152 = fadd float %151, 1.000000e+00
  %153 = load <4 x float>* %color
  %color130 = insertelement <4 x float> %153, float %152, i32 3
  store <4 x float> %color130, <4 x float>* %color
  %154 = load i32* %i121
  %i121131 = add i32 %154, 1
  store i32 %i121131, i32* %i121
  br label %loop-header122

post-loop-continue132:                            ; No predecessors!
  unreachable

loop-merge133:                                    ; preds = %then127, %then123
  br label %loop-header134

loop-header134:                                   ; preds = %ifmerge146, %then136, %loop-merge133
  %155 = load <4 x float> addrspace(2)* @bigColor4, !gla.uniform !15
  %156 = load <4 x float>* %color
  %color135 = fadd <4 x float> %156, %155
  store <4 x float> %color135, <4 x float>* %color
  %157 = load <4 x float>* %color
  %158 = extractelement <4 x float> %157, i32 0
  %159 = load float addrspace(2)* @d4, !gla.uniform !11
  %160 = fcmp olt float %158, %159
  br i1 %160, label %then136, label %ifmerge138

then136:                                          ; preds = %loop-header134
  br label %loop-header134

post-loop-continue137:                            ; No predecessors!
  unreachable

ifmerge138:                                       ; preds = %loop-header134
  %161 = load <4 x float>* %color
  %162 = extractelement <4 x float> %161, i32 1
  %163 = load float addrspace(2)* @d4, !gla.uniform !11
  %164 = fcmp olt float %162, %163
  br i1 %164, label %then139, label %else141

then139:                                          ; preds = %ifmerge138
  %165 = load float addrspace(2)* @d4, !gla.uniform !11
  %166 = load <4 x float>* %color
  %167 = extractelement <4 x float> %166, i32 1
  %168 = fadd float %167, %165
  %169 = load <4 x float>* %color
  %color140 = insertelement <4 x float> %169, float %168, i32 1
  store <4 x float> %color140, <4 x float>* %color
  br label %ifmerge143

else141:                                          ; preds = %ifmerge138
  %170 = load float addrspace(2)* @d4, !gla.uniform !11
  %171 = load <4 x float>* %color
  %172 = extractelement <4 x float> %171, i32 0
  %173 = fadd float %172, %170
  %174 = load <4 x float>* %color
  %color142 = insertelement <4 x float> %174, float %173, i32 0
  store <4 x float> %color142, <4 x float>* %color
  br label %ifmerge143

ifmerge143:                                       ; preds = %else141, %then139
  %175 = load <4 x float>* %color
  %176 = extractelement <4 x float> %175, i32 2
  %177 = load float addrspace(2)* @d4, !gla.uniform !11
  %178 = fcmp olt float %176, %177
  %179 = xor i1 %178, true
  br i1 %179, label %then144, label %ifmerge146

then144:                                          ; preds = %ifmerge143
  br label %loop-merge148

post-loop-break145:                               ; No predecessors!
  unreachable

ifmerge146:                                       ; preds = %ifmerge143
  br label %loop-header134

post-loop-continue147:                            ; No predecessors!
  unreachable

loop-merge148:                                    ; preds = %then144
  br label %loop-header149

loop-header149:                                   ; preds = %ifmerge156, %loop-merge148
  %180 = load <4 x float> addrspace(2)* @bigColor5, !gla.uniform !16
  %181 = load <4 x float>* %color
  %color150 = fadd <4 x float> %181, %180
  store <4 x float> %color150, <4 x float>* %color
  %182 = load <4 x float>* %color
  %183 = extractelement <4 x float> %182, i32 1
  %184 = load float addrspace(2)* @d5, !gla.uniform !17
  %185 = fcmp olt float %183, %184
  br i1 %185, label %then151, label %ifmerge153

then151:                                          ; preds = %loop-header149
  %186 = load float addrspace(2)* @d5, !gla.uniform !17
  %187 = load <4 x float>* %color
  %188 = extractelement <4 x float> %187, i32 1
  %189 = fadd float %188, %186
  %190 = load <4 x float>* %color
  %color152 = insertelement <4 x float> %190, float %189, i32 1
  store <4 x float> %color152, <4 x float>* %color
  br label %ifmerge153

ifmerge153:                                       ; preds = %loop-header149, %then151
  %191 = load <4 x float>* %color
  %192 = extractelement <4 x float> %191, i32 0
  %193 = load float addrspace(2)* @d5, !gla.uniform !17
  %194 = fcmp olt float %192, %193
  %195 = xor i1 %194, true
  br i1 %195, label %then154, label %ifmerge156

then154:                                          ; preds = %ifmerge153
  br label %loop-merge158

post-loop-break155:                               ; No predecessors!
  unreachable

ifmerge156:                                       ; preds = %ifmerge153
  br label %loop-header149

post-loop-continue157:                            ; No predecessors!
  unreachable

loop-merge158:                                    ; preds = %then154
  %196 = load <4 x float>* %color
  %197 = extractelement <4 x float> %196, i32 0
  %198 = load float addrspace(2)* @d6, !gla.uniform !18
  %199 = fcmp olt float %197, %198
  br i1 %199, label %then159, label %else167

then159:                                          ; preds = %loop-merge158
  br label %loop-header160

loop-header160:                                   ; preds = %ifmerge163, %then159
  %200 = load <4 x float>* %color
  %201 = extractelement <4 x float> %200, i32 1
  %202 = load float addrspace(2)* @d6, !gla.uniform !18
  %203 = fcmp olt float %201, %202
  %204 = xor i1 %203, true
  br i1 %204, label %then161, label %ifmerge163

then161:                                          ; preds = %loop-header160
  br label %loop-merge166

post-loop-break162:                               ; No predecessors!
  unreachable

ifmerge163:                                       ; preds = %loop-header160
  %205 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %206 = load <4 x float>* %color
  %color164 = fadd <4 x float> %206, %205
  store <4 x float> %color164, <4 x float>* %color
  br label %loop-header160

post-loop-continue165:                            ; No predecessors!
  unreachable

loop-merge166:                                    ; preds = %then161
  br label %ifmerge175

else167:                                          ; preds = %loop-merge158
  br label %loop-header168

loop-header168:                                   ; preds = %ifmerge171, %else167
  %207 = load <4 x float>* %color
  %208 = extractelement <4 x float> %207, i32 2
  %209 = load float addrspace(2)* @d6, !gla.uniform !18
  %210 = fcmp olt float %208, %209
  %211 = xor i1 %210, true
  br i1 %211, label %then169, label %ifmerge171

then169:                                          ; preds = %loop-header168
  br label %loop-merge174

post-loop-break170:                               ; No predecessors!
  unreachable

ifmerge171:                                       ; preds = %loop-header168
  %212 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %213 = extractelement <4 x float> %212, i32 2
  %214 = load <4 x float>* %color
  %215 = extractelement <4 x float> %214, i32 2
  %216 = fadd float %215, %213
  %217 = load <4 x float>* %color
  %color172 = insertelement <4 x float> %217, float %216, i32 2
  store <4 x float> %color172, <4 x float>* %color
  br label %loop-header168

post-loop-continue173:                            ; No predecessors!
  unreachable

loop-merge174:                                    ; preds = %then169
  br label %ifmerge175

ifmerge175:                                       ; preds = %loop-merge174, %loop-merge166
  %218 = load <4 x float>* %color
  %219 = extractelement <4 x float> %218, i32 0
  %220 = load float addrspace(2)* @d6, !gla.uniform !18
  %221 = fcmp olt float %219, %220
  br i1 %221, label %then176, label %else187

then176:                                          ; preds = %ifmerge175
  br label %loop-header177

loop-header177:                                   ; preds = %ifmerge184, %then176
  %222 = load <4 x float>* %color
  %223 = extractelement <4 x float> %222, i32 1
  %224 = load float addrspace(2)* @d6, !gla.uniform !18
  %225 = fcmp olt float %223, %224
  %226 = xor i1 %225, true
  br i1 %226, label %then178, label %ifmerge180

then178:                                          ; preds = %loop-header177
  br label %loop-merge186

post-loop-break179:                               ; No predecessors!
  unreachable

ifmerge180:                                       ; preds = %loop-header177
  %227 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %228 = load <4 x float>* %color
  %color181 = fadd <4 x float> %228, %227
  store <4 x float> %color181, <4 x float>* %color
  %229 = load float addrspace(2)* @d7, !gla.uniform !20
  %230 = fcmp olt float %229, 1.000000e+00
  br i1 %230, label %then182, label %ifmerge184

then182:                                          ; preds = %ifmerge180
  br label %loop-merge186

post-loop-break183:                               ; No predecessors!
  unreachable

ifmerge184:                                       ; preds = %ifmerge180
  br label %loop-header177

post-loop-continue185:                            ; No predecessors!
  unreachable

loop-merge186:                                    ; preds = %then182, %then178
  br label %ifmerge195

else187:                                          ; preds = %ifmerge175
  br label %loop-header188

loop-header188:                                   ; preds = %ifmerge191, %else187
  %231 = load <4 x float>* %color
  %232 = extractelement <4 x float> %231, i32 2
  %233 = load float addrspace(2)* @d6, !gla.uniform !18
  %234 = fcmp olt float %232, %233
  %235 = xor i1 %234, true
  br i1 %235, label %then189, label %ifmerge191

then189:                                          ; preds = %loop-header188
  br label %loop-merge194

post-loop-break190:                               ; No predecessors!
  unreachable

ifmerge191:                                       ; preds = %loop-header188
  %236 = load <4 x float> addrspace(2)* @bigColor6, !gla.uniform !19
  %237 = extractelement <4 x float> %236, i32 2
  %238 = load <4 x float>* %color
  %239 = extractelement <4 x float> %238, i32 2
  %240 = fadd float %239, %237
  %241 = load <4 x float>* %color
  %color192 = insertelement <4 x float> %241, float %240, i32 2
  store <4 x float> %color192, <4 x float>* %color
  br label %loop-header188

post-loop-continue193:                            ; No predecessors!
  unreachable

loop-merge194:                                    ; preds = %then189
  br label %ifmerge195

ifmerge195:                                       ; preds = %loop-merge194, %loop-merge186
  br label %loop-header196

loop-header196:                                   ; preds = %ifmerge208, %ifmerge195
  %242 = load float addrspace(2)* @d7, !gla.uniform !20
  %243 = fcmp olt float %242, 0.000000e+00
  br i1 %243, label %then197, label %ifmerge199

then197:                                          ; preds = %loop-header196
  br label %loop-merge210

post-loop-break198:                               ; No predecessors!
  unreachable

ifmerge199:                                       ; preds = %loop-header196
  %244 = load <4 x float> addrspace(2)* @bigColor7, !gla.uniform !21
  %245 = load <4 x float>* %color
  %color200 = fadd <4 x float> %245, %244
  store <4 x float> %color200, <4 x float>* %color
  %246 = load float addrspace(2)* @d7, !gla.uniform !20
  %247 = fcmp olt float %246, 1.000000e+00
  br i1 %247, label %then201, label %ifmerge204

then201:                                          ; preds = %ifmerge199
  %248 = load <4 x float>* %color
  %249 = extractelement <4 x float> %248, i32 2
  %250 = fadd float %249, 1.000000e+00
  %251 = load <4 x float>* %color
  %color202 = insertelement <4 x float> %251, float %250, i32 2
  store <4 x float> %color202, <4 x float>* %color
  br label %loop-merge210

post-loop-break203:                               ; No predecessors!
  unreachable

ifmerge204:                                       ; preds = %ifmerge199
  %252 = load <4 x float>* @BaseColor
  %253 = load <4 x float>* %color
  %color205 = fadd <4 x float> %253, %252
  store <4 x float> %color205, <4 x float>* %color
  br i1 false, label %then206, label %ifmerge208

then206:                                          ; preds = %ifmerge204
  br label %loop-merge210

post-loop-break207:                               ; No predecessors!
  unreachable

ifmerge208:                                       ; preds = %ifmerge204
  br label %loop-header196

post-loop-continue209:                            ; No predecessors!
  unreachable

loop-merge210:                                    ; preds = %then206, %then201, %then197
  br label %loop-header211

loop-header211:                                   ; preds = %ifmerge228, %loop-merge210
  %254 = load float addrspace(2)* @d8, !gla.uniform !22
  %255 = fcmp olt float %254, 0.000000e+00
  br i1 %255, label %then212, label %ifmerge214

then212:                                          ; preds = %loop-header211
  br label %loop-merge230

post-loop-break213:                               ; No predecessors!
  unreachable

ifmerge214:                                       ; preds = %loop-header211
  %256 = load <4 x float> addrspace(2)* @bigColor7, !gla.uniform !21
  %257 = load <4 x float>* %color
  %color215 = fadd <4 x float> %257, %256
  store <4 x float> %color215, <4 x float>* %color
  %258 = load float addrspace(2)* @d8, !gla.uniform !22
  %259 = fcmp olt float %258, 1.000000e+00
  br i1 %259, label %then216, label %ifmerge224

then216:                                          ; preds = %ifmerge214
  %260 = load <4 x float>* %color
  %261 = extractelement <4 x float> %260, i32 2
  %262 = fadd float %261, 1.000000e+00
  %263 = load <4 x float>* %color
  %color217 = insertelement <4 x float> %263, float %262, i32 2
  store <4 x float> %color217, <4 x float>* %color
  %264 = load float addrspace(2)* @d8, !gla.uniform !22
  %265 = fcmp olt float %264, 2.000000e+00
  br i1 %265, label %then218, label %else220

then218:                                          ; preds = %then216
  %266 = load <4 x float>* %color
  %267 = extractelement <4 x float> %266, i32 1
  %268 = fadd float %267, 1.000000e+00
  %269 = load <4 x float>* %color
  %color219 = insertelement <4 x float> %269, float %268, i32 1
  store <4 x float> %color219, <4 x float>* %color
  br label %ifmerge222

else220:                                          ; preds = %then216
  %270 = load <4 x float>* %color
  %271 = extractelement <4 x float> %270, i32 0
  %272 = fadd float %271, 1.000000e+00
  %273 = load <4 x float>* %color
  %color221 = insertelement <4 x float> %273, float %272, i32 0
  store <4 x float> %color221, <4 x float>* %color
  br label %ifmerge222

ifmerge222:                                       ; preds = %else220, %then218
  br label %loop-merge230

post-loop-break223:                               ; No predecessors!
  unreachable

ifmerge224:                                       ; preds = %ifmerge214
  %274 = load <4 x float>* @BaseColor
  %275 = load <4 x float>* %color
  %color225 = fadd <4 x float> %275, %274
  store <4 x float> %color225, <4 x float>* %color
  %276 = load <4 x float>* %color
  %277 = extractelement <4 x float> %276, i32 2
  %278 = load float addrspace(2)* @d8, !gla.uniform !22
  %279 = fcmp olt float %277, %278
  %280 = xor i1 %279, true
  br i1 %280, label %then226, label %ifmerge228

then226:                                          ; preds = %ifmerge224
  br label %loop-merge230

post-loop-break227:                               ; No predecessors!
  unreachable

ifmerge228:                                       ; preds = %ifmerge224
  br label %loop-header211

post-loop-continue229:                            ; No predecessors!
  unreachable

loop-merge230:                                    ; preds = %then226, %ifmerge222, %then212
  br label %loop-header231

loop-header231:                                   ; preds = %ifmerge243, %loop-merge230
  %281 = load <4 x float>* %color
  %282 = extractelement <4 x float> %281, i32 3
  %283 = load float addrspace(2)* @d9, !gla.uniform !23
  %284 = fcmp olt float %282, %283
  %285 = xor i1 %284, true
  br i1 %285, label %then232, label %ifmerge234

then232:                                          ; preds = %loop-header231
  br label %loop-merge245

post-loop-break233:                               ; No predecessors!
  unreachable

ifmerge234:                                       ; preds = %loop-header231
  %286 = load float addrspace(2)* @d9, !gla.uniform !23
  %287 = load float addrspace(2)* @d8, !gla.uniform !22
  %288 = fcmp ogt float %286, %287
  br i1 %288, label %then235, label %ifmerge243

then235:                                          ; preds = %ifmerge234
  %289 = load <4 x float>* %color
  %290 = extractelement <4 x float> %289, i32 0
  %291 = load float addrspace(2)* @d7, !gla.uniform !20
  %292 = fcmp ole float %290, %291
  br i1 %292, label %then236, label %ifmerge242

then236:                                          ; preds = %then235
  %293 = load <4 x float>* %color
  %294 = extractelement <4 x float> %293, i32 2
  %295 = fcmp oeq float %294, 5.000000e+00
  br i1 %295, label %then237, label %else239

then237:                                          ; preds = %then236
  %296 = load <4 x float>* %color
  %297 = extractelement <4 x float> %296, i32 3
  %298 = fadd float %297, 1.000000e+00
  %299 = load <4 x float>* %color
  %color238 = insertelement <4 x float> %299, float %298, i32 3
  store <4 x float> %color238, <4 x float>* %color
  br label %ifmerge241

else239:                                          ; preds = %then236
  br label %loop-merge245

post-loop-break240:                               ; No predecessors!
  unreachable

ifmerge241:                                       ; preds = %then237
  br label %ifmerge242

ifmerge242:                                       ; preds = %then235, %ifmerge241
  br label %ifmerge243

ifmerge243:                                       ; preds = %ifmerge234, %ifmerge242
  br label %loop-header231

post-loop-continue244:                            ; No predecessors!
  unreachable

loop-merge245:                                    ; preds = %else239, %then232
  br label %loop-header246

loop-header246:                                   ; preds = %ifmerge257, %loop-merge245
  %300 = load <4 x float>* %color
  %301 = extractelement <4 x float> %300, i32 2
  %302 = load float addrspace(2)* @d10, !gla.uniform !24
  %303 = fcmp olt float %301, %302
  %304 = xor i1 %303, true
  br i1 %304, label %then247, label %ifmerge249

then247:                                          ; preds = %loop-header246
  br label %loop-merge262

post-loop-break248:                               ; No predecessors!
  unreachable

ifmerge249:                                       ; preds = %loop-header246
  %305 = load <4 x float>* %color
  %306 = extractelement <4 x float> %305, i32 1
  %307 = fadd float %306, 1.000000e+00
  %308 = load <4 x float>* %color
  %color250 = insertelement <4 x float> %308, float %307, i32 1
  store <4 x float> %color250, <4 x float>* %color
  %309 = load <4 x float>* %color
  %310 = extractelement <4 x float> %309, i32 1
  %311 = load float addrspace(2)* @d11, !gla.uniform !25
  %312 = fcmp olt float %310, %311
  br i1 %312, label %then251, label %ifmerge259

then251:                                          ; preds = %ifmerge249
  %313 = load <4 x float>* %color
  %314 = extractelement <4 x float> %313, i32 2
  %315 = fadd float %314, 1.000000e+00
  %316 = load <4 x float>* %color
  %color252 = insertelement <4 x float> %316, float %315, i32 2
  store <4 x float> %color252, <4 x float>* %color
  %317 = load <4 x float>* %color
  %318 = extractelement <4 x float> %317, i32 3
  %319 = load float addrspace(2)* @d12, !gla.uniform !26
  %320 = fcmp olt float %318, %319
  br i1 %320, label %then253, label %else255

then253:                                          ; preds = %then251
  %321 = load <4 x float>* %color
  %322 = extractelement <4 x float> %321, i32 3
  %323 = fadd float %322, 1.000000e+00
  %324 = load <4 x float>* %color
  %color254 = insertelement <4 x float> %324, float %323, i32 3
  store <4 x float> %color254, <4 x float>* %color
  br label %ifmerge257

else255:                                          ; preds = %then251
  %325 = load <4 x float>* %color
  %326 = extractelement <4 x float> %325, i32 0
  %327 = fadd float %326, 1.000000e+00
  %328 = load <4 x float>* %color
  %color256 = insertelement <4 x float> %328, float %327, i32 0
  store <4 x float> %color256, <4 x float>* %color
  br label %ifmerge257

ifmerge257:                                       ; preds = %else255, %then253
  br label %loop-header246

post-loop-continue258:                            ; No predecessors!
  unreachable

ifmerge259:                                       ; preds = %ifmerge249
  %329 = load <4 x float>* %color
  %color260 = fadd <4 x float> %329, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color260, <4 x float>* %color
  br label %loop-merge262

post-loop-break261:                               ; No predecessors!
  unreachable

loop-merge262:                                    ; preds = %ifmerge259, %then247
  br label %loop-header263

loop-header263:                                   ; preds = %ifmerge272, %then269, %loop-merge262
  %330 = load <4 x float>* %color
  %331 = extractelement <4 x float> %330, i32 0
  %332 = fcmp olt float %331, 1.000000e+01
  %333 = xor i1 %332, true
  br i1 %333, label %then264, label %ifmerge266

then264:                                          ; preds = %loop-header263
  br label %loop-merge275

post-loop-break265:                               ; No predecessors!
  unreachable

ifmerge266:                                       ; preds = %loop-header263
  %334 = load <4 x float> addrspace(2)* @bigColor8, !gla.uniform !27
  %335 = load <4 x float>* %color
  %color267 = fadd <4 x float> %335, %334
  store <4 x float> %color267, <4 x float>* %color
  %336 = load <4 x float>* %color
  %337 = extractelement <4 x float> %336, i32 2
  %338 = load float addrspace(2)* @d8, !gla.uniform !22
  %339 = fcmp olt float %337, %338
  br i1 %339, label %then268, label %ifmerge272

then268:                                          ; preds = %ifmerge266
  %340 = load <4 x float>* %color
  %341 = extractelement <4 x float> %340, i32 3
  %342 = load float addrspace(2)* @d6, !gla.uniform !18
  %343 = fcmp olt float %341, %342
  br i1 %343, label %then269, label %ifmerge271

then269:                                          ; preds = %then268
  br label %loop-header263

post-loop-continue270:                            ; No predecessors!
  unreachable

ifmerge271:                                       ; preds = %then268
  br label %ifmerge272

ifmerge272:                                       ; preds = %ifmerge266, %ifmerge271
  %344 = load <4 x float> addrspace(2)* @bigColor8, !gla.uniform !27
  %345 = extractelement <4 x float> %344, i32 0
  %346 = load <4 x float>* %color
  %347 = extractelement <4 x float> %346, i32 1
  %348 = fadd float %347, %345
  %349 = load <4 x float>* %color
  %color273 = insertelement <4 x float> %349, float %348, i32 1
  store <4 x float> %color273, <4 x float>* %color
  br label %loop-header263

post-loop-continue274:                            ; No predecessors!
  unreachable

loop-merge275:                                    ; preds = %then264
  %350 = load <4 x float>* %color
  %color276 = fadd <4 x float> %350, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color276, <4 x float>* %color
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %loop-header277

loop-header277:                                   ; preds = %ifmerge284, %loop-merge275
  %351 = load <4 x float>* %color
  %352 = extractelement <4 x float> %351, i32 0
  %353 = load float addrspace(2)* @d14, !gla.uniform !28
  %354 = fcmp olt float %352, %353
  %355 = xor i1 %354, true
  br i1 %355, label %then278, label %ifmerge280

then278:                                          ; preds = %loop-header277
  br label %loop-merge286

post-loop-break279:                               ; No predecessors!
  unreachable

ifmerge280:                                       ; preds = %loop-header277
  %356 = load <4 x float>* %color
  %357 = extractelement <4 x float> %356, i32 1
  %358 = load float addrspace(2)* @d15, !gla.uniform !29
  %359 = fcmp olt float %357, %358
  br i1 %359, label %then281, label %else282

then281:                                          ; preds = %ifmerge280
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  unreachable

else282:                                          ; preds = %ifmerge280
  %360 = load <4 x float>* %color
  %color283 = fadd <4 x float> %360, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color283, <4 x float>* %color
  br label %ifmerge284

ifmerge284:                                       ; preds = %else282
  br label %loop-header277

post-loop-continue285:                            ; No predecessors!
  unreachable

loop-merge286:                                    ; preds = %then278
  %361 = load <4 x float>* %color
  %color287 = fadd <4 x float> %361, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color287, <4 x float>* %color
  br label %loop-header288

loop-header288:                                   ; preds = %ifmerge291, %loop-merge286
  %362 = load <4 x float>* %color
  %363 = extractelement <4 x float> %362, i32 3
  %364 = load float addrspace(2)* @d16, !gla.uniform !30
  %365 = fcmp olt float %363, %364
  %366 = xor i1 %365, true
  br i1 %366, label %then289, label %ifmerge291

then289:                                          ; preds = %loop-header288
  br label %loop-merge294

post-loop-break290:                               ; No predecessors!
  unreachable

ifmerge291:                                       ; preds = %loop-header288
  %367 = load <4 x float>* %color
  %368 = extractelement <4 x float> %367, i32 3
  %369 = fadd float %368, 1.000000e+00
  %370 = load <4 x float>* %color
  %color292 = insertelement <4 x float> %370, float %369, i32 3
  store <4 x float> %color292, <4 x float>* %color
  br label %loop-header288

post-loop-continue293:                            ; No predecessors!
  unreachable

loop-merge294:                                    ; preds = %then289
  br label %loop-header295

loop-header295:                                   ; preds = %ifmerge302, %loop-merge294
  %371 = load <4 x float>* %color
  %372 = extractelement <4 x float> %371, i32 3
  %373 = load float addrspace(2)* @d2, !gla.uniform !7
  %374 = fcmp olt float %372, %373
  %375 = load <4 x float>* %color
  %376 = extractelement <4 x float> %375, i32 1
  %377 = load float addrspace(2)* @d3, !gla.uniform !8
  %378 = fcmp olt float %376, %377
  %379 = and i1 %374, %378
  %380 = xor i1 %379, true
  br i1 %380, label %then296, label %ifmerge298

then296:                                          ; preds = %loop-header295
  br label %loop-merge304

post-loop-break297:                               ; No predecessors!
  unreachable

ifmerge298:                                       ; preds = %loop-header295
  %381 = load <4 x float> addrspace(2)* @bigColor1_2, !gla.uniform !9
  %382 = load <4 x float>* %color
  %color299 = fadd <4 x float> %382, %381
  store <4 x float> %color299, <4 x float>* %color
  %383 = load <4 x float>* %color
  %384 = extractelement <4 x float> %383, i32 2
  %385 = load float addrspace(2)* @d3, !gla.uniform !8
  %386 = fcmp olt float %384, %385
  br i1 %386, label %then300, label %ifmerge302

then300:                                          ; preds = %ifmerge298
  br label %stage-epilogue

post-return301:                                   ; No predecessors!
  unreachable

ifmerge302:                                       ; preds = %ifmerge298
  br label %loop-header295

post-loop-continue303:                            ; No predecessors!
  unreachable

loop-merge304:                                    ; preds = %then296
  br label %loop-header305

loop-header305:                                   ; preds = %ifmerge312, %loop-merge304
  %387 = load <4 x float>* %color
  %388 = extractelement <4 x float> %387, i32 1
  %389 = load float addrspace(2)* @d18, !gla.uniform !31
  %390 = fcmp olt float %388, %389
  br i1 %390, label %then306, label %ifmerge308

then306:                                          ; preds = %loop-header305
  br label %stage-epilogue

post-return307:                                   ; No predecessors!
  unreachable

ifmerge308:                                       ; preds = %loop-header305
  %391 = load <4 x float>* %color
  %color309 = fadd <4 x float> %391, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color309, <4 x float>* %color
  %392 = load <4 x float>* %color
  %393 = extractelement <4 x float> %392, i32 0
  %394 = load float addrspace(2)* @d17, !gla.uniform !32
  %395 = fcmp olt float %393, %394
  %396 = xor i1 %395, true
  br i1 %396, label %then310, label %ifmerge312

then310:                                          ; preds = %ifmerge308
  br label %loop-merge314

post-loop-break311:                               ; No predecessors!
  unreachable

ifmerge312:                                       ; preds = %ifmerge308
  br label %loop-header305

post-loop-continue313:                            ; No predecessors!
  unreachable

loop-merge314:                                    ; preds = %then310
  br label %loop-header315

loop-header315:                                   ; preds = %ifmerge322, %loop-merge314
  %397 = load <4 x float>* %color
  %398 = extractelement <4 x float> %397, i32 1
  %399 = load float addrspace(2)* @d16, !gla.uniform !30
  %400 = fcmp olt float %398, %399
  %401 = xor i1 %400, true
  br i1 %401, label %then316, label %ifmerge318

then316:                                          ; preds = %loop-header315
  br label %loop-merge324

post-loop-break317:                               ; No predecessors!
  unreachable

ifmerge318:                                       ; preds = %loop-header315
  %402 = load <4 x float>* %color
  %403 = extractelement <4 x float> %402, i32 3
  %404 = load float addrspace(2)* @d16, !gla.uniform !30
  %405 = fcmp olt float %403, %404
  br i1 %405, label %then319, label %else320

then319:                                          ; preds = %ifmerge318
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  unreachable

else320:                                          ; preds = %ifmerge318
  %406 = load <4 x float>* %color
  %color321 = fadd <4 x float> %406, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color321, <4 x float>* %color
  br label %ifmerge322

ifmerge322:                                       ; preds = %else320
  br label %loop-header315

post-loop-continue323:                            ; No predecessors!
  unreachable

loop-merge324:                                    ; preds = %then316
  %407 = load <4 x float>* %color
  %color325 = fadd <4 x float> %407, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color325, <4 x float>* %color
  %gl_FragColor326 = load <4 x float>* %color
  store <4 x float> %gl_FragColor326, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge324, %then306, %then300, %then281
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then319
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.discard() #0

attributes #0 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}
!gla.outputs = !{!50}
!gla.noStaticUse = !{!33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!6 = metadata !{metadata !"bigColor1_1", i32 12, <4 x float>* @bigColor1_1_typeProxy, metadata !4}
!7 = metadata !{metadata !"d2", i32 12, float* @d2_typeProxy, metadata !4}
!8 = metadata !{metadata !"d3", i32 12, float* @d3_typeProxy, metadata !4}
!9 = metadata !{metadata !"bigColor1_2", i32 12, <4 x float>* @bigColor1_2_typeProxy, metadata !4}
!10 = metadata !{metadata !"bigColor1_3", i32 12, <4 x float>* @bigColor1_3_typeProxy, metadata !4}
!11 = metadata !{metadata !"d4", i32 12, float* @d4_typeProxy, metadata !4}
!12 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !4}
!13 = metadata !{metadata !"bigColor2", i32 12, <4 x float>* @bigColor2_typeProxy, metadata !4}
!14 = metadata !{metadata !"bigColor3", i32 12, <4 x float>* @bigColor3_typeProxy, metadata !4}
!15 = metadata !{metadata !"bigColor4", i32 12, <4 x float>* @bigColor4_typeProxy, metadata !4}
!16 = metadata !{metadata !"bigColor5", i32 12, <4 x float>* @bigColor5_typeProxy, metadata !4}
!17 = metadata !{metadata !"d5", i32 12, float* @d5_typeProxy, metadata !4}
!18 = metadata !{metadata !"d6", i32 12, float* @d6_typeProxy, metadata !4}
!19 = metadata !{metadata !"bigColor6", i32 12, <4 x float>* @bigColor6_typeProxy, metadata !4}
!20 = metadata !{metadata !"d7", i32 12, float* @d7_typeProxy, metadata !4}
!21 = metadata !{metadata !"bigColor7", i32 12, <4 x float>* @bigColor7_typeProxy, metadata !4}
!22 = metadata !{metadata !"d8", i32 12, float* @d8_typeProxy, metadata !4}
!23 = metadata !{metadata !"d9", i32 12, float* @d9_typeProxy, metadata !4}
!24 = metadata !{metadata !"d10", i32 12, float* @d10_typeProxy, metadata !4}
!25 = metadata !{metadata !"d11", i32 12, float* @d11_typeProxy, metadata !4}
!26 = metadata !{metadata !"d12", i32 12, float* @d12_typeProxy, metadata !4}
!27 = metadata !{metadata !"bigColor8", i32 12, <4 x float>* @bigColor8_typeProxy, metadata !4}
!28 = metadata !{metadata !"d14", i32 12, float* @d14_typeProxy, metadata !4}
!29 = metadata !{metadata !"d15", i32 12, float* @d15_typeProxy, metadata !4}
!30 = metadata !{metadata !"d16", i32 12, float* @d16_typeProxy, metadata !4}
!31 = metadata !{metadata !"d18", i32 12, float* @d18_typeProxy, metadata !4}
!32 = metadata !{metadata !"d17", i32 12, float* @d17_typeProxy, metadata !4}
!33 = metadata !{metadata !"d13", i32 12, float* @d13_typeProxy, metadata !4}
!34 = metadata !{metadata !"d19", i32 12, float* @d19_typeProxy, metadata !4}
!35 = metadata !{metadata !"d20", i32 12, float* @d20_typeProxy, metadata !4}
!36 = metadata !{metadata !"d21", i32 12, float* @d21_typeProxy, metadata !4}
!37 = metadata !{metadata !"d22", i32 12, float* @d22_typeProxy, metadata !4}
!38 = metadata !{metadata !"d23", i32 12, float* @d23_typeProxy, metadata !4}
!39 = metadata !{metadata !"d24", i32 12, float* @d24_typeProxy, metadata !4}
!40 = metadata !{metadata !"d25", i32 12, float* @d25_typeProxy, metadata !4}
!41 = metadata !{metadata !"d26", i32 12, float* @d26_typeProxy, metadata !4}
!42 = metadata !{metadata !"d27", i32 12, float* @d27_typeProxy, metadata !4}
!43 = metadata !{metadata !"d28", i32 12, float* @d28_typeProxy, metadata !4}
!44 = metadata !{metadata !"d29", i32 12, float* @d29_typeProxy, metadata !4}
!45 = metadata !{metadata !"d30", i32 12, float* @d30_typeProxy, metadata !4}
!46 = metadata !{metadata !"d31", i32 12, float* @d31_typeProxy, metadata !4}
!47 = metadata !{metadata !"d32", i32 12, float* @d32_typeProxy, metadata !4}
!48 = metadata !{metadata !"d33", i32 12, float* @d33_typeProxy, metadata !4}
!49 = metadata !{metadata !"d34", i32 12, float* @d34_typeProxy, metadata !4}
!50 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !51}
!51 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}


Bottom IR:
; ModuleID = 'Glslang'

@BaseColor = global <4 x float> zeroinitializer
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@bigColor1_1 = external addrspace(2) constant <4 x float>
@d2 = external addrspace(2) constant float
@d3 = external addrspace(2) constant float
@bigColor1_2 = external addrspace(2) constant <4 x float>
@bigColor1_3 = external addrspace(2) constant <4 x float>
@d4 = external addrspace(2) constant float
@Count = external addrspace(2) constant i32
@bigColor2 = external addrspace(2) constant <4 x float>
@bigColor3 = external addrspace(2) constant <4 x float>
@bigColor4 = external addrspace(2) constant <4 x float>
@bigColor5 = external addrspace(2) constant <4 x float>
@d5 = external addrspace(2) constant float
@d6 = external addrspace(2) constant float
@bigColor6 = external addrspace(2) constant <4 x float>
@d7 = external addrspace(2) constant float
@bigColor7 = external addrspace(2) constant <4 x float>
@d8 = external addrspace(2) constant float
@d9 = external addrspace(2) constant float
@d10 = external addrspace(2) constant float
@d11 = external addrspace(2) constant float
@d12 = external addrspace(2) constant float
@bigColor8 = external addrspace(2) constant <4 x float>
@gl_FragColor = global <4 x float> zeroinitializer
@d14 = external addrspace(2) constant float
@d15 = external addrspace(2) constant float
@d16 = external addrspace(2) constant float
@d18 = external addrspace(2) constant float
@d17 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %color1 = load <4 x float>* @BaseColor, align 16
  %0 = extractelement <4 x float> %color1, i32 0
  %1 = fcmp olt float %0, 0x3FD51EB860000000
  %2 = fcmp olt float %0, 0x3FE51EB860000000
  %select332.v = select i1 %2, <4 x float> <float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000, float 0x3FE51EB860000000>, <4 x float> <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>
  %select339.v = select i1 %1, <4 x float> <float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000, float 0x3FD51EB860000000>, <4 x float> %select332.v
  %select339 = fadd <4 x float> %color1, %select339.v
  %.pre = load float addrspace(2)* @d, align 4, !gla.uniform !3
  %3 = load <4 x float> addrspace(2)* @bigColor, align 16, !gla.uniform !5
  br label %loop-header12

loop-header12:                                    ; preds = %ifmerge15, %entry
  %color.1 = phi <4 x float> [ %select339, %entry ], [ %color16, %ifmerge15 ]
  %4 = extractelement <4 x float> %color.1, i32 0
  %5 = fcmp uge float %4, %.pre
  br i1 %5, label %then13, label %ifmerge15

then13:                                           ; preds = %loop-header12
  %6 = load <4 x float> addrspace(2)* @bigColor1_1, align 16, !gla.uniform !6
  br label %loop-header18

ifmerge15:                                        ; preds = %loop-header12
  %color16 = fadd <4 x float> %color.1, %3
  br label %loop-header12

loop-header18:                                    ; preds = %ifmerge21, %then13
  %color.2 = phi <4 x float> [ %color.1, %then13 ], [ %select331, %ifmerge21 ]
  %7 = extractelement <4 x float> %color.2, i32 2
  %8 = fcmp uge float %7, %.pre
  br i1 %8, label %then19, label %ifmerge21

then19:                                           ; preds = %loop-header18
  br label %loop-header29

ifmerge21:                                        ; preds = %loop-header18
  %color22 = fadd <4 x float> %color.2, %6
  %9 = extractelement <4 x float> %color22, i32 3
  %10 = fcmp olt float %9, %.pre
  %color26 = fadd <4 x float> %6, %color22
  %select331 = select i1 %10, <4 x float> %color22, <4 x float> %color26
  br label %loop-header18

loop-header29:                                    ; preds = %ifmerge32, %then19
  %color.3 = phi <4 x float> [ %color.2, %then19 ], [ %color33, %ifmerge32 ]
  %11 = extractelement <4 x float> %color.3, i32 0
  %12 = fcmp uge float %11, 4.200000e+01
  br i1 %12, label %then30, label %ifmerge32

then30:                                           ; preds = %loop-header29
  %.pre341 = load float addrspace(2)* @d2, align 4, !gla.uniform !7
  %.pre342 = load float addrspace(2)* @d3, align 4, !gla.uniform !8
  %13 = load <4 x float> addrspace(2)* @bigColor1_2, align 16, !gla.uniform !9
  br label %loop-header36

ifmerge32:                                        ; preds = %loop-header29
  %color33 = fadd <4 x float> %color.3, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header29

loop-header36:                                    ; preds = %ifmerge39, %then30
  %color.4 = phi <4 x float> [ %color.3, %then30 ], [ %color40, %ifmerge39 ]
  %14 = extractelement <4 x float> %color.4, i32 3
  %15 = extractelement <4 x float> %color.4, i32 1
  %notlhs = fcmp uge float %14, %.pre341
  %notrhs = fcmp uge float %15, %.pre342
  %16 = or i1 %notrhs, %notlhs
  br i1 %16, label %then37, label %ifmerge39

then37:                                           ; preds = %loop-header36
  %17 = load <4 x float> addrspace(2)* @bigColor1_3, align 16, !gla.uniform !10
  %18 = load float addrspace(2)* @d4, align 4, !gla.uniform !11
  br label %loop-header43

ifmerge39:                                        ; preds = %loop-header36
  %color40 = fadd <4 x float> %color.4, %13
  br label %loop-header36

loop-header43:                                    ; preds = %ifmerge50, %then37
  %color.5 = phi <4 x float> [ %color.4, %then37 ], [ %color51, %ifmerge50 ]
  %19 = extractelement <4 x float> %color.5, i32 2
  %20 = fcmp uge float %19, %.pre342
  br i1 %20, label %then44, label %ifmerge46

then44:                                           ; preds = %loop-header43
  br label %loop-merge53

ifmerge46:                                        ; preds = %loop-header43
  %color47 = fadd <4 x float> %color.5, %17
  %21 = extractelement <4 x float> %color47, i32 1
  %22 = fcmp olt float %21, %18
  br i1 %22, label %then48, label %ifmerge50

then48:                                           ; preds = %ifmerge46
  br label %loop-merge53

ifmerge50:                                        ; preds = %ifmerge46
  %color51 = fadd <4 x float> %17, %color47
  br label %loop-header43

loop-merge53:                                     ; preds = %then48, %then44
  %color.6 = phi <4 x float> [ %color.5, %then44 ], [ %color47, %then48 ]
  %.pre343 = load i32 addrspace(2)* @Count, align 4, !gla.uniform !12
  %23 = load <4 x float> addrspace(2)* @bigColor2, align 16, !gla.uniform !13
  br label %loop-header54

loop-header54:                                    ; preds = %ifmerge57, %loop-merge53
  %color.7 = phi <4 x float> [ %color.6, %loop-merge53 ], [ %color58, %ifmerge57 ]
  %i.0 = phi i32 [ 0, %loop-merge53 ], [ %i59, %ifmerge57 ]
  %24 = icmp slt i32 %i.0, %.pre343
  br i1 %24, label %ifmerge57, label %then55

then55:                                           ; preds = %loop-header54
  %.pre344 = load <4 x float> addrspace(2)* @bigColor3, align 16, !gla.uniform !14
  br label %loop-header62

ifmerge57:                                        ; preds = %loop-header54
  %color58 = fadd <4 x float> %color.7, %23
  %i59 = add i32 %i.0, 1
  br label %loop-header54

loop-header62:                                    ; preds = %loop-header62, %then55
  %color.8 = phi <4 x float> [ %color.7, %then55 ], [ %color63, %loop-header62 ]
  %color63 = fadd <4 x float> %color.8, %.pre344
  %25 = extractelement <4 x float> %color63, i32 0
  %26 = fcmp uge float %25, %.pre341
  br i1 %26, label %then64, label %loop-header62

then64:                                           ; preds = %loop-header62
  %27 = extractelement <4 x float> %color63, i32 2
  %28 = fadd float %27, %.pre342
  %29 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color63, i32 4, float undef, i32 undef, float undef, i32 undef, float %28, i32 0, float undef, i32 undef)
  %30 = extractelement <4 x float> %29, i32 2
  %31 = fadd float %30, %.pre342
  %32 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %29, i32 4, float undef, i32 undef, float undef, i32 undef, float %31, i32 0, float undef, i32 undef)
  %33 = extractelement <4 x float> %32, i32 2
  %34 = fadd float %33, %.pre342
  %35 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %32, i32 4, float undef, i32 undef, float undef, i32 undef, float %34, i32 0, float undef, i32 undef)
  %36 = extractelement <4 x float> %35, i32 2
  %37 = fadd float %36, %.pre342
  %38 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %35, i32 4, float undef, i32 undef, float undef, i32 undef, float %37, i32 0, float undef, i32 undef)
  %39 = extractelement <4 x float> %38, i32 2
  %40 = fadd float %39, %.pre342
  %41 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %38, i32 4, float undef, i32 undef, float undef, i32 undef, float %40, i32 0, float undef, i32 undef)
  %42 = extractelement <4 x float> %41, i32 2
  %43 = fadd float %42, %.pre342
  %44 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %41, i32 4, float undef, i32 undef, float undef, i32 undef, float %43, i32 0, float undef, i32 undef)
  %45 = extractelement <4 x float> %44, i32 2
  %46 = fadd float %45, %.pre342
  %47 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %44, i32 4, float undef, i32 undef, float undef, i32 undef, float %46, i32 0, float undef, i32 undef)
  %48 = extractelement <4 x float> %47, i32 2
  %49 = fadd float %48, %.pre342
  %50 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %47, i32 4, float undef, i32 undef, float undef, i32 undef, float %49, i32 0, float undef, i32 undef)
  %51 = extractelement <4 x float> %50, i32 2
  %52 = fadd float %51, %.pre342
  %53 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %50, i32 4, float undef, i32 undef, float undef, i32 undef, float %52, i32 0, float undef, i32 undef)
  %54 = extractelement <4 x float> %53, i32 2
  %55 = fadd float %54, %.pre342
  %56 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %53, i32 4, float undef, i32 undef, float undef, i32 undef, float %55, i32 0, float undef, i32 undef)
  %57 = extractelement <4 x float> %56, i32 2
  %58 = fadd float %57, %.pre342
  %59 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %56, i32 4, float undef, i32 undef, float undef, i32 undef, float %58, i32 0, float undef, i32 undef)
  %60 = extractelement <4 x float> %59, i32 2
  %61 = fadd float %60, %.pre342
  %62 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %59, i32 4, float undef, i32 undef, float undef, i32 undef, float %61, i32 0, float undef, i32 undef)
  %63 = extractelement <4 x float> %62, i32 2
  %64 = fadd float %63, %.pre342
  %65 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %62, i32 4, float undef, i32 undef, float undef, i32 undef, float %64, i32 0, float undef, i32 undef)
  %66 = extractelement <4 x float> %65, i32 2
  %67 = fadd float %66, %.pre342
  %68 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %65, i32 4, float undef, i32 undef, float undef, i32 undef, float %67, i32 0, float undef, i32 undef)
  %69 = extractelement <4 x float> %68, i32 2
  %70 = fadd float %69, %.pre342
  %71 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %68, i32 4, float undef, i32 undef, float undef, i32 undef, float %70, i32 0, float undef, i32 undef)
  %72 = extractelement <4 x float> %71, i32 2
  %73 = fadd float %72, %.pre342
  %74 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %71, i32 4, float undef, i32 undef, float undef, i32 undef, float %73, i32 0, float undef, i32 undef)
  %75 = extractelement <4 x float> %74, i32 2
  %76 = fadd float %75, %.pre342
  %77 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %74, i32 4, float undef, i32 undef, float undef, i32 undef, float %76, i32 0, float undef, i32 undef)
  %78 = extractelement <4 x float> %77, i32 2
  %79 = fadd float %78, %.pre342
  %80 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %77, i32 4, float undef, i32 undef, float undef, i32 undef, float %79, i32 0, float undef, i32 undef)
  %81 = extractelement <4 x float> %80, i32 2
  %82 = fadd float %81, %.pre342
  %83 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %80, i32 4, float undef, i32 undef, float undef, i32 undef, float %82, i32 0, float undef, i32 undef)
  %84 = extractelement <4 x float> %83, i32 2
  %85 = fadd float %84, %.pre342
  %86 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %83, i32 4, float undef, i32 undef, float undef, i32 undef, float %85, i32 0, float undef, i32 undef)
  %87 = extractelement <4 x float> %86, i32 2
  %88 = fadd float %87, %.pre342
  %89 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %86, i32 4, float undef, i32 undef, float undef, i32 undef, float %88, i32 0, float undef, i32 undef)
  %90 = extractelement <4 x float> %89, i32 2
  %91 = fadd float %90, %.pre342
  %92 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %89, i32 4, float undef, i32 undef, float undef, i32 undef, float %91, i32 0, float undef, i32 undef)
  %93 = extractelement <4 x float> %92, i32 2
  %94 = fadd float %93, %.pre342
  %95 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %92, i32 4, float undef, i32 undef, float undef, i32 undef, float %94, i32 0, float undef, i32 undef)
  %96 = extractelement <4 x float> %95, i32 2
  %97 = fadd float %96, %.pre342
  %98 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %95, i32 4, float undef, i32 undef, float undef, i32 undef, float %97, i32 0, float undef, i32 undef)
  %99 = extractelement <4 x float> %98, i32 2
  %100 = fadd float %99, %.pre342
  %101 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %98, i32 4, float undef, i32 undef, float undef, i32 undef, float %100, i32 0, float undef, i32 undef)
  %102 = extractelement <4 x float> %101, i32 2
  %103 = fadd float %102, %.pre342
  %104 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %101, i32 4, float undef, i32 undef, float undef, i32 undef, float %103, i32 0, float undef, i32 undef)
  %105 = extractelement <4 x float> %104, i32 2
  %106 = fadd float %105, %.pre342
  %107 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %104, i32 4, float undef, i32 undef, float undef, i32 undef, float %106, i32 0, float undef, i32 undef)
  %108 = extractelement <4 x float> %107, i32 2
  %109 = fadd float %108, %.pre342
  %110 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %107, i32 4, float undef, i32 undef, float undef, i32 undef, float %109, i32 0, float undef, i32 undef)
  %111 = extractelement <4 x float> %110, i32 2
  %112 = fadd float %111, %.pre342
  %113 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %110, i32 4, float undef, i32 undef, float undef, i32 undef, float %112, i32 0, float undef, i32 undef)
  %114 = extractelement <4 x float> %113, i32 2
  %115 = fadd float %114, %.pre342
  %116 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %113, i32 4, float undef, i32 undef, float undef, i32 undef, float %115, i32 0, float undef, i32 undef)
  %117 = extractelement <4 x float> %116, i32 2
  %118 = fadd float %117, %.pre342
  %119 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %116, i32 4, float undef, i32 undef, float undef, i32 undef, float %118, i32 0, float undef, i32 undef)
  %120 = extractelement <4 x float> %119, i32 2
  %121 = fadd float %120, %.pre342
  %122 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %119, i32 4, float undef, i32 undef, float undef, i32 undef, float %121, i32 0, float undef, i32 undef)
  %123 = extractelement <4 x float> %122, i32 2
  %124 = fadd float %123, %.pre342
  %125 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %122, i32 4, float undef, i32 undef, float undef, i32 undef, float %124, i32 0, float undef, i32 undef)
  %126 = extractelement <4 x float> %125, i32 2
  %127 = fadd float %126, %.pre342
  %128 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %125, i32 4, float undef, i32 undef, float undef, i32 undef, float %127, i32 0, float undef, i32 undef)
  %129 = extractelement <4 x float> %128, i32 2
  %130 = fadd float %129, %.pre342
  %131 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %128, i32 4, float undef, i32 undef, float undef, i32 undef, float %130, i32 0, float undef, i32 undef)
  %132 = extractelement <4 x float> %131, i32 2
  %133 = fadd float %132, %.pre342
  %134 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %131, i32 4, float undef, i32 undef, float undef, i32 undef, float %133, i32 0, float undef, i32 undef)
  %135 = extractelement <4 x float> %134, i32 2
  %136 = fadd float %135, %.pre342
  %137 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %134, i32 4, float undef, i32 undef, float undef, i32 undef, float %136, i32 0, float undef, i32 undef)
  %138 = extractelement <4 x float> %137, i32 2
  %139 = fadd float %138, %.pre342
  %140 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %137, i32 4, float undef, i32 undef, float undef, i32 undef, float %139, i32 0, float undef, i32 undef)
  %141 = extractelement <4 x float> %140, i32 2
  %142 = fadd float %141, %.pre342
  %143 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %140, i32 4, float undef, i32 undef, float undef, i32 undef, float %142, i32 0, float undef, i32 undef)
  %144 = extractelement <4 x float> %143, i32 2
  %145 = fadd float %144, %.pre342
  %146 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %143, i32 4, float undef, i32 undef, float undef, i32 undef, float %145, i32 0, float undef, i32 undef)
  %147 = extractelement <4 x float> %146, i32 2
  %148 = fadd float %147, %.pre342
  %149 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %146, i32 4, float undef, i32 undef, float undef, i32 undef, float %148, i32 0, float undef, i32 undef)
  %150 = extractelement <4 x float> %149, i32 2
  %151 = fadd float %150, %.pre342
  %152 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %149, i32 4, float undef, i32 undef, float undef, i32 undef, float %151, i32 0, float undef, i32 undef)
  br label %loop-header79

loop-header79:                                    ; preds = %ifmerge82, %then64
  %color.10 = phi <4 x float> [ %152, %then64 ], [ %select333, %ifmerge82 ]
  %i78.0 = phi i32 [ 0, %then64 ], [ %i7891, %ifmerge82 ]
  %exitcond389 = icmp eq i32 %i78.0, 100
  br i1 %exitcond389, label %then80, label %ifmerge82

then80:                                           ; preds = %loop-header79
  br label %loop-header95

ifmerge82:                                        ; preds = %loop-header79
  %153 = extractelement <4 x float> %color.10, i32 2
  %154 = fcmp olt float %153, 2.000000e+01
  %155 = extractelement <4 x float> %color.10, i32 0
  %156 = fadd float %155, 1.000000e+00
  %157 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 1, float %156, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %158 = extractelement <4 x float> %color.10, i32 1
  %159 = fadd float %158, 1.000000e+00
  %160 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.10, i32 2, float undef, i32 undef, float %159, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select333 = select i1 %154, <4 x float> %157, <4 x float> %160
  %i7891 = add i32 %i78.0, 1
  br label %loop-header79

loop-header95:                                    ; preds = %ifmerge98, %then80
  %color.12 = phi <4 x float> [ %color.10, %then80 ], [ %select334, %ifmerge98 ]
  %i94.0 = phi i32 [ 0, %then80 ], [ %i94104, %ifmerge98 ]
  %exitcond388 = icmp eq i32 %i94.0, 120
  br i1 %exitcond388, label %then96, label %ifmerge98

then96:                                           ; preds = %loop-header95
  %161 = load float addrspace(2)* @d4, align 4, !gla.uniform !11
  br label %loop-header108

ifmerge98:                                        ; preds = %loop-header95
  %162 = extractelement <4 x float> %color.12, i32 2
  %163 = fcmp olt float %162, 2.000000e+01
  %164 = extractelement <4 x float> %color.12, i32 0
  %165 = fadd float %164, 1.000000e+00
  %166 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 1, float %165, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %167 = extractelement <4 x float> %color.12, i32 1
  %168 = fadd float %167, 1.000000e+00
  %169 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.12, i32 2, float undef, i32 undef, float %168, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select334 = select i1 %163, <4 x float> %166, <4 x float> %169
  %i94104 = add i32 %i94.0, 1
  br label %loop-header95

loop-header108:                                   ; preds = %ifmerge111, %then96
  %color.14 = phi <4 x float> [ %color.12, %then96 ], [ %select, %ifmerge111 ]
  %i107.0 = phi i32 [ 0, %then96 ], [ %select329, %ifmerge111 ]
  %exitcond = icmp eq i32 %i107.0, 42
  br i1 %exitcond, label %then109, label %ifmerge111

then109:                                          ; preds = %loop-header108
  br label %loop-header122

ifmerge111:                                       ; preds = %loop-header108
  %170 = extractelement <4 x float> %color.14, i32 2
  %171 = fadd float %170, %.pre342
  %172 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.14, i32 4, float undef, i32 undef, float undef, i32 undef, float %171, i32 0, float undef, i32 undef)
  %173 = extractelement <4 x float> %color.14, i32 0
  %174 = fcmp olt float %173, %161
  %175 = extractelement <4 x float> %color.14, i32 3
  %176 = fadd float %175, 1.000000e+00
  %177 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.14, i32 12, float undef, i32 undef, float undef, i32 undef, float %171, i32 0, float %176, i32 0)
  %select = select i1 %174, <4 x float> %172, <4 x float> %177
  %select329 = add i32 %i107.0, 1
  br label %loop-header108

loop-header122:                                   ; preds = %ifmerge129, %then109
  %color.15 = phi <4 x float> [ %color.14, %then109 ], [ %186, %ifmerge129 ]
  %i121.0 = phi i32 [ 0, %then109 ], [ %i121131, %ifmerge129 ]
  %178 = icmp sgt i32 %i121.0, 41
  br i1 %178, label %then123, label %ifmerge125

then123:                                          ; preds = %loop-header122
  br label %loop-merge133

ifmerge125:                                       ; preds = %loop-header122
  %179 = extractelement <4 x float> %color.15, i32 2
  %180 = fadd float %179, %.pre342
  %181 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.15, i32 4, float undef, i32 undef, float undef, i32 undef, float %180, i32 0, float undef, i32 undef)
  %182 = extractelement <4 x float> %color.15, i32 0
  %183 = fcmp olt float %182, %161
  br i1 %183, label %then127, label %ifmerge129

then127:                                          ; preds = %ifmerge125
  br label %loop-merge133

ifmerge129:                                       ; preds = %ifmerge125
  %184 = extractelement <4 x float> %color.15, i32 3
  %185 = fadd float %184, 1.000000e+00
  %186 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %181, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %185, i32 0)
  %i121131 = add i32 %i121.0, 1
  br label %loop-header122

loop-merge133:                                    ; preds = %then127, %then123
  %color.16 = phi <4 x float> [ %color.15, %then123 ], [ %181, %then127 ]
  %.pre345 = load <4 x float> addrspace(2)* @bigColor4, align 16, !gla.uniform !15
  br label %loop-header134

loop-header134:                                   ; preds = %loop-header134.backedge, %loop-merge133
  %color.17 = phi <4 x float> [ %color.16, %loop-merge133 ], [ %color.17.be, %loop-header134.backedge ]
  %color135 = fadd <4 x float> %color.17, %.pre345
  %187 = extractelement <4 x float> %color135, i32 0
  %188 = fcmp olt float %187, %161
  br i1 %188, label %then136, label %ifmerge138

then136:                                          ; preds = %loop-header134
  br label %loop-header134.backedge

loop-header134.backedge:                          ; preds = %then136, %ifmerge146
  %color.17.be = phi <4 x float> [ %color135, %then136 ], [ %select330, %ifmerge146 ]
  br label %loop-header134

ifmerge138:                                       ; preds = %loop-header134
  %189 = extractelement <4 x float> %color135, i32 1
  %190 = fcmp olt float %189, %161
  %191 = fadd float %161, %189
  %192 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color135, i32 2, float undef, i32 undef, float %191, i32 0, float undef, i32 undef, float undef, i32 undef)
  %193 = fadd float %161, %187
  %194 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color135, i32 1, float %193, i32 0, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef)
  %select330 = select i1 %190, <4 x float> %192, <4 x float> %194
  %195 = extractelement <4 x float> %select330, i32 2
  %196 = fcmp uge float %195, %161
  br i1 %196, label %then144, label %ifmerge146

then144:                                          ; preds = %ifmerge138
  %.pre347 = load <4 x float> addrspace(2)* @bigColor5, align 16, !gla.uniform !16
  %.pre348 = load float addrspace(2)* @d5, align 4, !gla.uniform !17
  br label %loop-header149

ifmerge146:                                       ; preds = %ifmerge138
  br label %loop-header134.backedge

loop-header149:                                   ; preds = %loop-header149, %then144
  %color.19 = phi <4 x float> [ %select330, %then144 ], [ %select335, %loop-header149 ]
  %color150 = fadd <4 x float> %color.19, %.pre347
  %197 = extractelement <4 x float> %color150, i32 1
  %198 = fcmp olt float %197, %.pre348
  %199 = fadd float %.pre348, %197
  %200 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color150, i32 2, float undef, i32 undef, float %199, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select335 = select i1 %198, <4 x float> %200, <4 x float> %color150
  %201 = extractelement <4 x float> %select335, i32 0
  %202 = fcmp uge float %201, %.pre348
  br i1 %202, label %then154, label %loop-header149

then154:                                          ; preds = %loop-header149
  %203 = load float addrspace(2)* @d6, align 4, !gla.uniform !18
  %204 = fcmp olt float %201, %203
  br i1 %204, label %then159, label %else167

then159:                                          ; preds = %then154
  %205 = load <4 x float> addrspace(2)* @bigColor6, align 16, !gla.uniform !19
  br label %loop-header160

loop-header160:                                   ; preds = %ifmerge163, %then159
  %color.21 = phi <4 x float> [ %select335, %then159 ], [ %color164, %ifmerge163 ]
  %206 = extractelement <4 x float> %color.21, i32 1
  %207 = fcmp uge float %206, %203
  br i1 %207, label %then161, label %ifmerge163

then161:                                          ; preds = %loop-header160
  br label %ifmerge175

ifmerge163:                                       ; preds = %loop-header160
  %color164 = fadd <4 x float> %color.21, %205
  br label %loop-header160

else167:                                          ; preds = %then154
  %208 = load <4 x float> addrspace(2)* @bigColor6, align 16, !gla.uniform !19
  %209 = extractelement <4 x float> %208, i32 2
  br label %loop-header168

loop-header168:                                   ; preds = %ifmerge171, %else167
  %color.22 = phi <4 x float> [ %select335, %else167 ], [ %213, %ifmerge171 ]
  %210 = extractelement <4 x float> %color.22, i32 2
  %211 = fcmp uge float %210, %203
  br i1 %211, label %then169, label %ifmerge171

then169:                                          ; preds = %loop-header168
  br label %ifmerge175

ifmerge171:                                       ; preds = %loop-header168
  %212 = fadd float %210, %209
  %213 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.22, i32 4, float undef, i32 undef, float undef, i32 undef, float %212, i32 0, float undef, i32 undef)
  br label %loop-header168

ifmerge175:                                       ; preds = %then169, %then161
  %214 = phi <4 x float> [ %205, %then161 ], [ %208, %then169 ]
  %color.23 = phi <4 x float> [ %color.21, %then161 ], [ %color.22, %then169 ]
  %215 = extractelement <4 x float> %color.23, i32 0
  %216 = fcmp olt float %215, %203
  br i1 %216, label %then176, label %else187

then176:                                          ; preds = %ifmerge175
  %217 = load float addrspace(2)* @d7, align 4, !gla.uniform !20
  %218 = fcmp olt float %217, 1.000000e+00
  br label %loop-header177

loop-header177:                                   ; preds = %ifmerge180, %then176
  %color.24 = phi <4 x float> [ %color.23, %then176 ], [ %color181, %ifmerge180 ]
  %219 = extractelement <4 x float> %color.24, i32 1
  %220 = fcmp uge float %219, %203
  br i1 %220, label %then178, label %ifmerge180

then178:                                          ; preds = %loop-header177
  br label %loop-merge186

ifmerge180:                                       ; preds = %loop-header177
  %color181 = fadd <4 x float> %color.24, %214
  br i1 %218, label %then182, label %loop-header177

then182:                                          ; preds = %ifmerge180
  br label %loop-merge186

loop-merge186:                                    ; preds = %then182, %then178
  %color.25 = phi <4 x float> [ %color.24, %then178 ], [ %color181, %then182 ]
  br label %ifmerge195

else187:                                          ; preds = %ifmerge175
  %221 = extractelement <4 x float> %214, i32 2
  br label %loop-header188

loop-header188:                                   ; preds = %ifmerge191, %else187
  %color.26 = phi <4 x float> [ %color.23, %else187 ], [ %225, %ifmerge191 ]
  %222 = extractelement <4 x float> %color.26, i32 2
  %223 = fcmp uge float %222, %203
  br i1 %223, label %then189, label %ifmerge191

then189:                                          ; preds = %loop-header188
  br label %ifmerge195

ifmerge191:                                       ; preds = %loop-header188
  %224 = fadd float %222, %221
  %225 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.26, i32 4, float undef, i32 undef, float undef, i32 undef, float %224, i32 0, float undef, i32 undef)
  br label %loop-header188

ifmerge195:                                       ; preds = %then189, %loop-merge186
  %color.27 = phi <4 x float> [ %color.25, %loop-merge186 ], [ %color.26, %then189 ]
  %.pre349 = load float addrspace(2)* @d7, align 4, !gla.uniform !20
  %226 = fcmp olt float %.pre349, 0.000000e+00
  %227 = load <4 x float> addrspace(2)* @bigColor7, align 16, !gla.uniform !21
  %228 = fcmp olt float %.pre349, 1.000000e+00
  br label %loop-header196

loop-header196:                                   ; preds = %ifmerge204, %ifmerge195
  %color.28 = phi <4 x float> [ %color.27, %ifmerge195 ], [ %color205, %ifmerge204 ]
  br i1 %226, label %then197, label %ifmerge199

then197:                                          ; preds = %loop-header196
  br label %loop-merge210

ifmerge199:                                       ; preds = %loop-header196
  %color200 = fadd <4 x float> %color.28, %227
  br i1 %228, label %then201, label %ifmerge204

then201:                                          ; preds = %ifmerge199
  %229 = extractelement <4 x float> %color200, i32 2
  %230 = fadd float %229, 1.000000e+00
  %231 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color200, i32 4, float undef, i32 undef, float undef, i32 undef, float %230, i32 0, float undef, i32 undef)
  br label %loop-merge210

ifmerge204:                                       ; preds = %ifmerge199
  %color205 = fadd <4 x float> %color200, %color1
  br label %loop-header196

loop-merge210:                                    ; preds = %then201, %then197
  %color.29 = phi <4 x float> [ %color.28, %then197 ], [ %231, %then201 ]
  %.pre350 = load float addrspace(2)* @d8, align 4, !gla.uniform !22
  %232 = fcmp olt float %.pre350, 0.000000e+00
  %233 = fcmp olt float %.pre350, 1.000000e+00
  br label %loop-header211

loop-header211:                                   ; preds = %ifmerge224, %loop-merge210
  %color.30 = phi <4 x float> [ %color.29, %loop-merge210 ], [ %color225, %ifmerge224 ]
  br i1 %232, label %then212, label %ifmerge214

then212:                                          ; preds = %loop-header211
  br label %loop-merge230

ifmerge214:                                       ; preds = %loop-header211
  %color215 = fadd <4 x float> %color.30, %227
  br i1 %233, label %then216, label %ifmerge224

then216:                                          ; preds = %ifmerge214
  %234 = extractelement <4 x float> %color215, i32 2
  %235 = fadd float %234, 1.000000e+00
  %236 = fcmp olt float %.pre350, 2.000000e+00
  %237 = extractelement <4 x float> %color215, i32 1
  %238 = fadd float %237, 1.000000e+00
  %239 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color215, i32 6, float undef, i32 undef, float %238, i32 0, float %235, i32 0, float undef, i32 undef)
  %240 = extractelement <4 x float> %color215, i32 0
  %241 = fadd float %240, 1.000000e+00
  %242 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color215, i32 5, float %241, i32 0, float undef, i32 undef, float %235, i32 0, float undef, i32 undef)
  %select336 = select i1 %236, <4 x float> %239, <4 x float> %242
  br label %loop-merge230

ifmerge224:                                       ; preds = %ifmerge214
  %color225 = fadd <4 x float> %color215, %color1
  %243 = extractelement <4 x float> %color225, i32 2
  %244 = fcmp uge float %243, %.pre350
  br i1 %244, label %then226, label %loop-header211

then226:                                          ; preds = %ifmerge224
  br label %loop-merge230

loop-merge230:                                    ; preds = %then226, %then216, %then212
  %color.32 = phi <4 x float> [ %color.30, %then212 ], [ %select336, %then216 ], [ %color225, %then226 ]
  %.pre351 = load float addrspace(2)* @d9, align 4, !gla.uniform !23
  %245 = fcmp ogt float %.pre351, %.pre350
  br label %loop-header231

loop-header231:                                   ; preds = %ifmerge243, %loop-merge230
  %color.33 = phi <4 x float> [ %color.32, %loop-merge230 ], [ %color.35, %ifmerge243 ]
  %246 = extractelement <4 x float> %color.33, i32 3
  %247 = fcmp uge float %246, %.pre351
  br i1 %247, label %then232, label %ifmerge234

then232:                                          ; preds = %loop-header231
  br label %loop-merge245

ifmerge234:                                       ; preds = %loop-header231
  br i1 %245, label %then235, label %ifmerge243

then235:                                          ; preds = %ifmerge234
  %248 = extractelement <4 x float> %color.33, i32 0
  %249 = fcmp ugt float %248, %.pre349
  br i1 %249, label %ifmerge242, label %then236

then236:                                          ; preds = %then235
  %250 = extractelement <4 x float> %color.33, i32 2
  %251 = fcmp oeq float %250, 5.000000e+00
  br i1 %251, label %then237, label %else239

then237:                                          ; preds = %then236
  %252 = fadd float %246, 1.000000e+00
  %253 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.33, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %252, i32 0)
  br label %ifmerge242

else239:                                          ; preds = %then236
  br label %loop-merge245

ifmerge242:                                       ; preds = %then235, %then237
  %color.34 = phi <4 x float> [ %253, %then237 ], [ %color.33, %then235 ]
  br label %ifmerge243

ifmerge243:                                       ; preds = %ifmerge234, %ifmerge242
  %color.35 = phi <4 x float> [ %color.34, %ifmerge242 ], [ %color.33, %ifmerge234 ]
  br label %loop-header231

loop-merge245:                                    ; preds = %else239, %then232
  %.pre352 = load float addrspace(2)* @d10, align 4, !gla.uniform !24
  %254 = load float addrspace(2)* @d11, align 4, !gla.uniform !25
  %255 = load float addrspace(2)* @d12, align 4, !gla.uniform !26
  br label %loop-header246

loop-header246:                                   ; preds = %then251, %loop-merge245
  %color.36 = phi <4 x float> [ %color.33, %loop-merge245 ], [ %select337, %then251 ]
  %256 = extractelement <4 x float> %color.36, i32 2
  %257 = fcmp uge float %256, %.pre352
  br i1 %257, label %then247, label %ifmerge249

then247:                                          ; preds = %loop-header246
  br label %loop-merge262

ifmerge249:                                       ; preds = %loop-header246
  %258 = extractelement <4 x float> %color.36, i32 1
  %259 = fadd float %258, 1.000000e+00
  %260 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.36, i32 2, float undef, i32 undef, float %259, i32 0, float undef, i32 undef, float undef, i32 undef)
  %261 = fcmp olt float %259, %254
  br i1 %261, label %then251, label %ifmerge259

then251:                                          ; preds = %ifmerge249
  %262 = fadd float %256, 1.000000e+00
  %263 = extractelement <4 x float> %color.36, i32 3
  %264 = fcmp olt float %263, %255
  %265 = fadd float %263, 1.000000e+00
  %266 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %260, i32 12, float undef, i32 undef, float undef, i32 undef, float %262, i32 0, float %265, i32 0)
  %267 = extractelement <4 x float> %color.36, i32 0
  %268 = fadd float %267, 1.000000e+00
  %269 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %260, i32 5, float %268, i32 0, float undef, i32 undef, float %262, i32 0, float undef, i32 undef)
  %select337 = select i1 %264, <4 x float> %266, <4 x float> %269
  br label %loop-header246

ifmerge259:                                       ; preds = %ifmerge249
  %color260 = fadd <4 x float> %260, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-merge262

loop-merge262:                                    ; preds = %ifmerge259, %then247
  %color.38 = phi <4 x float> [ %color.36, %then247 ], [ %color260, %ifmerge259 ]
  %270 = load <4 x float> addrspace(2)* @bigColor8, align 16, !gla.uniform !27
  %271 = extractelement <4 x float> %270, i32 0
  br label %loop-header263

loop-header263:                                   ; preds = %ifmerge266, %loop-merge262
  %color.39 = phi <4 x float> [ %color.38, %loop-merge262 ], [ %select340, %ifmerge266 ]
  %272 = extractelement <4 x float> %color.39, i32 0
  %273 = fcmp uge float %272, 1.000000e+01
  br i1 %273, label %then264, label %ifmerge266

then264:                                          ; preds = %loop-header263
  %color276 = fadd <4 x float> %color.39, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color276, <4 x float>* @gl_FragColor, align 16
  %.pre353 = load float addrspace(2)* @d14, align 4, !gla.uniform !28
  %274 = load float addrspace(2)* @d15, align 4, !gla.uniform !29
  br label %loop-header277

ifmerge266:                                       ; preds = %loop-header263
  %color267 = fadd <4 x float> %color.39, %270
  %275 = extractelement <4 x float> %color267, i32 2
  %276 = fcmp olt float %275, %.pre350
  %277 = extractelement <4 x float> %color267, i32 3
  %278 = fcmp olt float %277, %203
  %279 = extractelement <4 x float> %color267, i32 1
  %280 = fadd float %279, %271
  %281 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color267, i32 2, float undef, i32 undef, float %280, i32 0, float undef, i32 undef, float undef, i32 undef)
  %select338 = select i1 %278, <4 x float> %color267, <4 x float> %281
  %select340 = select i1 %276, <4 x float> %select338, <4 x float> %281
  br label %loop-header263

loop-header277:                                   ; preds = %else282, %then264
  %color.40 = phi <4 x float> [ %color276, %then264 ], [ %color283, %else282 ]
  %282 = extractelement <4 x float> %color.40, i32 0
  %283 = fcmp uge float %282, %.pre353
  br i1 %283, label %then278, label %ifmerge280

then278:                                          ; preds = %loop-header277
  %color287 = fadd <4 x float> %color.40, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %.pre354 = load float addrspace(2)* @d16, align 4, !gla.uniform !30
  br label %loop-header288

ifmerge280:                                       ; preds = %loop-header277
  %284 = extractelement <4 x float> %color.40, i32 1
  %285 = fcmp olt float %284, %274
  br i1 %285, label %then281, label %else282

then281:                                          ; preds = %ifmerge280
  br label %stage-epilogue

else282:                                          ; preds = %ifmerge280
  %color283 = fadd <4 x float> %color.40, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header277

loop-header288:                                   ; preds = %ifmerge291, %then278
  %color.41 = phi <4 x float> [ %color287, %then278 ], [ %290, %ifmerge291 ]
  %286 = extractelement <4 x float> %color.41, i32 3
  %287 = fcmp uge float %286, %.pre354
  br i1 %287, label %then289, label %ifmerge291

then289:                                          ; preds = %loop-header288
  %288 = load <4 x float> addrspace(2)* @bigColor1_2, align 16, !gla.uniform !9
  br label %loop-header295

ifmerge291:                                       ; preds = %loop-header288
  %289 = fadd float %286, 1.000000e+00
  %290 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.41, i32 8, float undef, i32 undef, float undef, i32 undef, float undef, i32 undef, float %289, i32 0)
  br label %loop-header288

loop-header295:                                   ; preds = %ifmerge298, %then289
  %color.42 = phi <4 x float> [ %color.41, %then289 ], [ %color299, %ifmerge298 ]
  %291 = extractelement <4 x float> %color.42, i32 3
  %292 = extractelement <4 x float> %color.42, i32 1
  %notlhs327 = fcmp uge float %291, %.pre341
  %notrhs328 = fcmp uge float %292, %.pre342
  %293 = or i1 %notrhs328, %notlhs327
  br i1 %293, label %then296, label %ifmerge298

then296:                                          ; preds = %loop-header295
  %.pre355 = load float addrspace(2)* @d18, align 4, !gla.uniform !31
  %294 = load float addrspace(2)* @d17, align 4, !gla.uniform !32
  br label %loop-header305

ifmerge298:                                       ; preds = %loop-header295
  %color299 = fadd <4 x float> %color.42, %288
  %295 = extractelement <4 x float> %color299, i32 2
  %296 = fcmp olt float %295, %.pre342
  br i1 %296, label %then300, label %loop-header295

then300:                                          ; preds = %ifmerge298
  br label %stage-epilogue

loop-header305:                                   ; preds = %ifmerge308, %then296
  %color.43 = phi <4 x float> [ %color.42, %then296 ], [ %color309, %ifmerge308 ]
  %297 = extractelement <4 x float> %color.43, i32 1
  %298 = fcmp olt float %297, %.pre355
  br i1 %298, label %then306, label %ifmerge308

then306:                                          ; preds = %loop-header305
  br label %stage-epilogue

ifmerge308:                                       ; preds = %loop-header305
  %color309 = fadd <4 x float> %color.43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %299 = extractelement <4 x float> %color309, i32 0
  %300 = fcmp uge float %299, %294
  br i1 %300, label %then310, label %loop-header305

then310:                                          ; preds = %ifmerge308
  br label %loop-header315

loop-header315:                                   ; preds = %else320, %then310
  %color.44 = phi <4 x float> [ %color309, %then310 ], [ %color321, %else320 ]
  %301 = extractelement <4 x float> %color.44, i32 1
  %302 = fcmp uge float %301, %.pre354
  br i1 %302, label %then316, label %ifmerge318

then316:                                          ; preds = %loop-header315
  %color325 = fadd <4 x float> %color.44, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color325, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

ifmerge318:                                       ; preds = %loop-header315
  %303 = extractelement <4 x float> %color.44, i32 3
  %304 = fcmp olt float %303, %.pre354
  br i1 %304, label %then319, label %else320

then319:                                          ; preds = %ifmerge318
  call void @llvm.gla.discard()
  br label %stage-exit

else320:                                          ; preds = %ifmerge318
  %color321 = fadd <4 x float> %color.44, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  br label %loop-header315

stage-epilogue:                                   ; preds = %then316, %then306, %then300, %then281
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then319
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.discard() #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) #1

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5, !6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}
!gla.outputs = !{!50}
!gla.noStaticUse = !{!33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 0, i32 1024, null, i32 1}
!3 = metadata !{metadata !"d", i32 12, float* @d_typeProxy, metadata !4}
!4 = metadata !{i32 0, i32 0, i32 1024, null}
!5 = metadata !{metadata !"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, metadata !4}
!6 = metadata !{metadata !"bigColor1_1", i32 12, <4 x float>* @bigColor1_1_typeProxy, metadata !4}
!7 = metadata !{metadata !"d2", i32 12, float* @d2_typeProxy, metadata !4}
!8 = metadata !{metadata !"d3", i32 12, float* @d3_typeProxy, metadata !4}
!9 = metadata !{metadata !"bigColor1_2", i32 12, <4 x float>* @bigColor1_2_typeProxy, metadata !4}
!10 = metadata !{metadata !"bigColor1_3", i32 12, <4 x float>* @bigColor1_3_typeProxy, metadata !4}
!11 = metadata !{metadata !"d4", i32 12, float* @d4_typeProxy, metadata !4}
!12 = metadata !{metadata !"Count", i32 12, i32* @Count_typeProxy, metadata !4}
!13 = metadata !{metadata !"bigColor2", i32 12, <4 x float>* @bigColor2_typeProxy, metadata !4}
!14 = metadata !{metadata !"bigColor3", i32 12, <4 x float>* @bigColor3_typeProxy, metadata !4}
!15 = metadata !{metadata !"bigColor4", i32 12, <4 x float>* @bigColor4_typeProxy, metadata !4}
!16 = metadata !{metadata !"bigColor5", i32 12, <4 x float>* @bigColor5_typeProxy, metadata !4}
!17 = metadata !{metadata !"d5", i32 12, float* @d5_typeProxy, metadata !4}
!18 = metadata !{metadata !"d6", i32 12, float* @d6_typeProxy, metadata !4}
!19 = metadata !{metadata !"bigColor6", i32 12, <4 x float>* @bigColor6_typeProxy, metadata !4}
!20 = metadata !{metadata !"d7", i32 12, float* @d7_typeProxy, metadata !4}
!21 = metadata !{metadata !"bigColor7", i32 12, <4 x float>* @bigColor7_typeProxy, metadata !4}
!22 = metadata !{metadata !"d8", i32 12, float* @d8_typeProxy, metadata !4}
!23 = metadata !{metadata !"d9", i32 12, float* @d9_typeProxy, metadata !4}
!24 = metadata !{metadata !"d10", i32 12, float* @d10_typeProxy, metadata !4}
!25 = metadata !{metadata !"d11", i32 12, float* @d11_typeProxy, metadata !4}
!26 = metadata !{metadata !"d12", i32 12, float* @d12_typeProxy, metadata !4}
!27 = metadata !{metadata !"bigColor8", i32 12, <4 x float>* @bigColor8_typeProxy, metadata !4}
!28 = metadata !{metadata !"d14", i32 12, float* @d14_typeProxy, metadata !4}
!29 = metadata !{metadata !"d15", i32 12, float* @d15_typeProxy, metadata !4}
!30 = metadata !{metadata !"d16", i32 12, float* @d16_typeProxy, metadata !4}
!31 = metadata !{metadata !"d18", i32 12, float* @d18_typeProxy, metadata !4}
!32 = metadata !{metadata !"d17", i32 12, float* @d17_typeProxy, metadata !4}
!33 = metadata !{metadata !"d13", i32 12, float* @d13_typeProxy, metadata !4}
!34 = metadata !{metadata !"d19", i32 12, float* @d19_typeProxy, metadata !4}
!35 = metadata !{metadata !"d20", i32 12, float* @d20_typeProxy, metadata !4}
!36 = metadata !{metadata !"d21", i32 12, float* @d21_typeProxy, metadata !4}
!37 = metadata !{metadata !"d22", i32 12, float* @d22_typeProxy, metadata !4}
!38 = metadata !{metadata !"d23", i32 12, float* @d23_typeProxy, metadata !4}
!39 = metadata !{metadata !"d24", i32 12, float* @d24_typeProxy, metadata !4}
!40 = metadata !{metadata !"d25", i32 12, float* @d25_typeProxy, metadata !4}
!41 = metadata !{metadata !"d26", i32 12, float* @d26_typeProxy, metadata !4}
!42 = metadata !{metadata !"d27", i32 12, float* @d27_typeProxy, metadata !4}
!43 = metadata !{metadata !"d28", i32 12, float* @d28_typeProxy, metadata !4}
!44 = metadata !{metadata !"d29", i32 12, float* @d29_typeProxy, metadata !4}
!45 = metadata !{metadata !"d30", i32 12, float* @d30_typeProxy, metadata !4}
!46 = metadata !{metadata !"d31", i32 12, float* @d31_typeProxy, metadata !4}
!47 = metadata !{metadata !"d32", i32 12, float* @d32_typeProxy, metadata !4}
!48 = metadata !{metadata !"d33", i32 12, float* @d33_typeProxy, metadata !4}
!49 = metadata !{metadata !"d34", i32 12, float* @d34_typeProxy, metadata !4}
!50 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !51}
!51 = metadata !{i32 0, i32 0, i32 1025, null, i32 0}
#version 130
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
uniform float d13;
uniform float d19;
uniform float d20;
uniform float d21;
uniform float d22;
uniform float d23;
uniform float d24;
uniform float d25;
uniform float d26;
uniform float d27;
uniform float d28;
uniform float d29;
uniform float d30;
uniform float d31;
uniform float d32;
uniform float d33;
uniform float d34;
in vec4 BaseColor;
const float C_0d33 = 0.33;
const float C_0d66 = 0.66;
const vec4 C_vec4p0d66p = vec4(0.66);
const vec4 C_vec4p0d33p = vec4(0.33);
const float C_42d0 = 42.0;
const vec4 C_vec4p1d0p = vec4(1.0);
vec4 color71;
const int C_0 = 0;
vec4 colora1;
const float C_20d0 = 20.0;
const float C_1d0 = 1.0;
const int C_41 = 41;
vec4 Lg_5;
const int C_1 = 1;
vec4 select7;
vec4 select8;
float Lg_6;
vec4 colore1;
const float C_0d0 = 0.0;
vec4 colorf1;
vec4 colorh1;
const float C_2d0 = 2.0;
vec4 colori1;
const float C_5d0 = 5.0;
vec4 Lg_7;
const float C_10d0 = 10.0;
vec4 coloro1;

void main()
{
	vec4 color;
	vec4 color1;
	vec4 color2;
	vec4 color3;
	vec4 color4;
	vec4 color5;
	vec4 color6;
	int i;
	vec4 color7;
	vec4 color8;
	int Lg_1;
	vec4 color9;
	int Lg_2;
	vec4 colora;
	int Lg_3;
	vec4 colorb;
	int Lg_4;
	vec4 colorc;
	vec4 colord;
	vec4 colore;
	vec4 colorf;
	vec4 colorg;
	vec4 colorh;
	vec4 colori;
	vec4 colorj;
	vec4 colork;
	vec4 colorl;
	vec4 colorm;
	vec4 colorn;
	vec4 coloro;
	vec4 colorp;
	vec4 colorq;
	vec4 colorr;
	vec4 colors;
	vec4 colort;
	vec4 coloru;
	vec4 colorv;
	vec4 colorw;
	vec4 colorx;
	vec4 colory;
	vec4 colorz;
	vec4 color01;
	vec4 color11;
	bool H_bghf2q1 = BaseColor.x < C_0d33;
	bool H_9j9phn = BaseColor.x < C_0d66;
	vec4 select = H_9j9phn ? C_vec4p0d66p : C_vec4p0d33p;
	vec4 select1 = H_bghf2q1 ? C_vec4p0d33p : select;
	vec4 select2 = BaseColor + select1;
	color = select2;
	while (color.x < d) {
		vec4 color21 = bigColor + color;
		color = color21;
	}
	
	color1 = color;
	while (color1.z < d) {
		vec4 color31 = bigColor1_1 + color1;
		bool H_b19a7k = color31.w < d;
		vec4 color41 = bigColor1_1 + color31;
		vec4 select3 = H_b19a7k ? color31 : color41;
		color1 = select3;
	}
	
	color2 = color1;
	while (color2.x < C_42d0) {
		vec4 color51 = color2 + C_vec4p1d0p;
		color2 = color51;
	}
	
	color3 = color2;
	while (true) {
		bool notlhs = color3.w >= d2;
		bool notrhs = color3.y >= d3;
		bool H_nbn92x = notrhs || notlhs;
		if (H_nbn92x) {
			break;
		}
		
		vec4 color61 = bigColor1_2 + color3;
		color3 = color61;
	}
	
	color4 = color3;
	while (color4.z < d3) {
		color71 = bigColor1_3 + color4;
		bool H_r8iyb71 = color71.y < d4;
		if (H_r8iyb71) {
			color5 = color71;
			break;
		}
		
		vec4 color81 = bigColor1_3 + color71;
		color4 = color81;
	}
	
	color5 = color4;
	color6 = color5;
	i = C_0;
	for (i = 0; i < Count; ++i) {
		vec4 color91 = bigColor2 + color6;
		color6 = color91;
	}
	
	color7 = color6;
	while (true) {
		colora1 = bigColor3 + color7;
		bool H_xompge = colora1.x >= d2;
		if (H_xompge) {
			break;
		}
		
		color7 = colora1;
	}
	
	float H_ku5agd1 = colora1.z + d3;
	vec4 H_egrhpy = colora1;
	H_egrhpy.z = H_ku5agd1;
	float H_158lq3 = H_egrhpy.z + d3;
	vec4 H_1l5cz5 = H_egrhpy;
	H_1l5cz5.z = H_158lq3;
	float H_eogxfs1 = H_1l5cz5.z + d3;
	vec4 H_0dagbn1 = H_1l5cz5;
	H_0dagbn1.z = H_eogxfs1;
	float H_f2ygx2 = H_0dagbn1.z + d3;
	vec4 H_bab1ga = H_0dagbn1;
	H_bab1ga.z = H_f2ygx2;
	float H_2qwz431 = H_bab1ga.z + d3;
	vec4 H_84e2r91 = H_bab1ga;
	H_84e2r91.z = H_2qwz431;
	float H_xdf9hr = H_84e2r91.z + d3;
	vec4 H_l0gjm51 = H_84e2r91;
	H_l0gjm51.z = H_xdf9hr;
	float H_sw01mp1 = H_l0gjm51.z + d3;
	vec4 H_a1xhef = H_l0gjm51;
	H_a1xhef.z = H_sw01mp1;
	float H_tezmy7 = H_a1xhef.z + d3;
	vec4 H_115sg3 = H_a1xhef;
	H_115sg3.z = H_tezmy7;
	float H_ele3ta = H_115sg3.z + d3;
	vec4 H_0gt5j = H_115sg3;
	H_0gt5j.z = H_ele3ta;
	float H_ysilgy1 = H_0gt5j.z + d3;
	vec4 H_8ijty6 = H_0gt5j;
	H_8ijty6.z = H_ysilgy1;
	float H_0lrzed1 = H_8ijty6.z + d3;
	vec4 H_2hkpxk1 = H_8ijty6;
	H_2hkpxk1.z = H_0lrzed1;
	float H_j5olaj = H_2hkpxk1.z + d3;
	vec4 H_fxypnr1 = H_2hkpxk1;
	H_fxypnr1.z = H_j5olaj;
	float H_0bhu0r = H_fxypnr1.z + d3;
	vec4 H_6mqmnj1 = H_fxypnr1;
	H_6mqmnj1.z = H_0bhu0r;
	float H_ktsosb = H_6mqmnj1.z + d3;
	vec4 H_6rfvia1 = H_6mqmnj1;
	H_6rfvia1.z = H_ktsosb;
	float H_xobpo8 = H_6rfvia1.z + d3;
	vec4 H_d7jguz = H_6rfvia1;
	H_d7jguz.z = H_xobpo8;
	float H_lk8re4 = H_d7jguz.z + d3;
	vec4 H_lgs30j1 = H_d7jguz;
	H_lgs30j1.z = H_lk8re4;
	float H_ypc4bi1 = H_lgs30j1.z + d3;
	vec4 H_oxtxx4 = H_lgs30j1;
	H_oxtxx4.z = H_ypc4bi1;
	float H_f76nni1 = H_oxtxx4.z + d3;
	vec4 H_r51p0f = H_oxtxx4;
	H_r51p0f.z = H_f76nni1;
	float H_wi7r2e1 = H_r51p0f.z + d3;
	vec4 H_y8t9fk1 = H_r51p0f;
	H_y8t9fk1.z = H_wi7r2e1;
	float H_ylzk3t = H_y8t9fk1.z + d3;
	vec4 H_4mdbjt1 = H_y8t9fk1;
	H_4mdbjt1.z = H_ylzk3t;
	float H_ceb2j8 = H_4mdbjt1.z + d3;
	vec4 H_ixq99q = H_4mdbjt1;
	H_ixq99q.z = H_ceb2j8;
	float H_9ff4vw1 = H_ixq99q.z + d3;
	vec4 H_dyp07w = H_ixq99q;
	H_dyp07w.z = H_9ff4vw1;
	float H_toyl46 = H_dyp07w.z + d3;
	vec4 H_5ay2yn = H_dyp07w;
	H_5ay2yn.z = H_toyl46;
	float H_w4hbmc1 = H_5ay2yn.z + d3;
	vec4 H_awx7zw1 = H_5ay2yn;
	H_awx7zw1.z = H_w4hbmc1;
	float H_94aq2c = H_awx7zw1.z + d3;
	vec4 H_1s3eud1 = H_awx7zw1;
	H_1s3eud1.z = H_94aq2c;
	float H_ahsf821 = H_1s3eud1.z + d3;
	vec4 H_8389b71 = H_1s3eud1;
	H_8389b71.z = H_ahsf821;
	float H_u3tk5t1 = H_8389b71.z + d3;
	vec4 H_geopa4 = H_8389b71;
	H_geopa4.z = H_u3tk5t1;
	float H_ww53jp = H_geopa4.z + d3;
	vec4 H_mli21n1 = H_geopa4;
	H_mli21n1.z = H_ww53jp;
	float H_ex1j8n = H_mli21n1.z + d3;
	vec4 H_gguypc1 = H_mli21n1;
	H_gguypc1.z = H_ex1j8n;
	float H_iobo58 = H_gguypc1.z + d3;
	vec4 H_ggsvbs = H_gguypc1;
	H_ggsvbs.z = H_iobo58;
	float H_qu9zfv = H_ggsvbs.z + d3;
	vec4 H_wscuxv = H_ggsvbs;
	H_wscuxv.z = H_qu9zfv;
	float H_2c5yby = H_wscuxv.z + d3;
	vec4 H_8ufyp11 = H_wscuxv;
	H_8ufyp11.z = H_2c5yby;
	float H_aos158 = H_8ufyp11.z + d3;
	vec4 H_cvp4nd1 = H_8ufyp11;
	H_cvp4nd1.z = H_aos158;
	float H_8py0cj1 = H_cvp4nd1.z + d3;
	vec4 H_egq3o8 = H_cvp4nd1;
	H_egq3o8.z = H_8py0cj1;
	float H_zybgke1 = H_egq3o8.z + d3;
	vec4 H_3vtj7 = H_egq3o8;
	H_3vtj7.z = H_zybgke1;
	float H_ahww6q = H_3vtj7.z + d3;
	vec4 H_cufuu71 = H_3vtj7;
	H_cufuu71.z = H_ahww6q;
	float H_mbf21d1 = H_cufuu71.z + d3;
	vec4 H_clao1u = H_cufuu71;
	H_clao1u.z = H_mbf21d1;
	float H_1xbyox1 = H_clao1u.z + d3;
	vec4 H_1l3atm = H_clao1u;
	H_1l3atm.z = H_1xbyox1;
	float H_kus1yu = H_1l3atm.z + d3;
	vec4 H_qdqtd91 = H_1l3atm;
	H_qdqtd91.z = H_kus1yu;
	float H_c94ic01 = H_qdqtd91.z + d3;
	vec4 H_mt272t = H_qdqtd91;
	H_mt272t.z = H_c94ic01;
	float H_2zz212 = H_mt272t.z + d3;
	vec4 H_gpzsp41 = H_mt272t;
	H_gpzsp41.z = H_2zz212;
	float H_bbt9se1 = H_gpzsp41.z + d3;
	vec4 H_773c8a = H_gpzsp41;
	H_773c8a.z = H_bbt9se1;
	color8 = H_773c8a;
	Lg_1 = C_0;
	for ( ; Lg_1 != 100; ++Lg_1) {
		bool H_ouigu9 = color8.z < C_20d0;
		float H_i27ik71 = color8.x + C_1d0;
		vec4 H_wgo1rc = color8;
		H_wgo1rc.x = H_i27ik71;
		float H_tyie6w1 = C_1d0 + color8.y;
		vec4 H_wgo1rcr = color8;
		H_wgo1rcr.y = H_tyie6w1;
		vec4 select4 = H_ouigu9 ? H_wgo1rc : H_wgo1rcr;
		color8 = select4;
	}
	
	color9 = color8;
	Lg_2 = C_0;
	for ( ; Lg_2 != 120; ++Lg_2) {
		bool H_dkcc0l1 = color9.z < C_20d0;
		float H_5t8tep = C_1d0 + color9.x;
		vec4 H_v5a11d = color9;
		H_v5a11d.x = H_5t8tep;
		float H_64nt4p = C_1d0 + color9.y;
		vec4 H_v5a11dr = color9;
		H_v5a11dr.y = H_64nt4p;
		vec4 select5 = H_dkcc0l1 ? H_v5a11d : H_v5a11dr;
		color9 = select5;
	}
	
	colora = color9;
	Lg_3 = C_0;
	for ( ; Lg_3 != 42; ++Lg_3) {
		float H_bthy3g = colora.z + d3;
		vec4 H_ze6hx1 = colora;
		H_ze6hx1.z = H_bthy3g;
		bool H_nda4t5 = colora.x < d4;
		float H_0bsj8w1 = C_1d0 + colora.w;
		vec4 H_ze6hx1r = colora;
		H_ze6hx1r.zw = vec2(H_bthy3g, H_0bsj8w1);
		vec4 select6 = H_nda4t5 ? H_ze6hx1 : H_ze6hx1r;
		colora = select6;
	}
	
	colorb = colora;
	Lg_4 = C_0;
	while (Lg_4 <= C_41) {
		float H_0f3y181 = colorb.z + d3;
		Lg_5 = colorb;
		Lg_5.z = H_0f3y181;
		bool H_0rnct = colorb.x < d4;
		if (H_0rnct) {
			colorc = Lg_5;
			break;
		}
		
		float H_heycbr = C_1d0 + colorb.w;
		vec4 H_0vqk2y = Lg_5;
		H_0vqk2y.w = H_heycbr;
		int H_zk97sd1 = Lg_4 + C_1;
		colorb = H_0vqk2y;
		Lg_4 = H_zk97sd1;
	}
	
	colorc = colorb;
	colord = colorc;
	while (true) {
		vec4 colorb1 = bigColor4 + colord;
		bool H_d8n1rz = colorb1.x < d4;
		if (H_d8n1rz) {
			colore = colorb1;
		} else {
			bool H_0hvytn = colorb1.y < d4;
			float H_ft4i1t1 = colorb1.y + d4;
			vec4 H_hbtye1 = colorb1;
			H_hbtye1.y = H_ft4i1t1;
			float H_qi2sqn1 = colorb1.x + d4;
			vec4 H_hbtye1r = colorb1;
			H_hbtye1r.x = H_qi2sqn1;
			select7 = H_0hvytn ? H_hbtye1 : H_hbtye1r;
			bool H_l1em9x = select7.z >= d4;
			if (H_l1em9x) {
				break;
			}
			
			colore = select7;
		}
		
		colord = colore;
	}
	
	colorf = select7;
	while (true) {
		vec4 colorc1 = bigColor5 + colorf;
		bool H_ky29nq1 = colorc1.y < d5;
		float H_vnjtse1 = colorc1.y + d5;
		vec4 H_cd5hos1 = colorc1;
		H_cd5hos1.y = H_vnjtse1;
		select8 = H_ky29nq1 ? H_cd5hos1 : colorc1;
		bool H_1bgbo9 = select8.x >= d5;
		if (H_1bgbo9) {
			break;
		}
		
		colorf = select8;
	}
	
	bool H_tg986f = select8.x < d6;
	if (H_tg986f) {
		colorg = select8;
		while (colorg.y < d6) {
			vec4 colord1 = bigColor6 + colorg;
			colorg = colord1;
		}
		
		colori = colorg;
	} else {
		colorh = select8;
		while (colorh.z < d6) {
			float H_k81hde1 = bigColor6.z + colorh.z;
			vec4 H_c5togy1 = colorh;
			H_c5togy1.z = H_k81hde1;
			colorh = H_c5togy1;
		}
		
		colori = colorh;
	}
	
	bool H_p4jfbx1 = colori.x < d6;
	if (H_p4jfbx1) {
		bool H_lmykhx1 = d7 < C_1d0;
		colorj = colori;
		while (colorj.y < d6) {
			colore1 = bigColor6 + colorj;
			if (H_lmykhx1) {
				colork = colore1;
				break;
			}
			
			colorj = colore1;
		}
		
		colork = colorj;
		colorm = colork;
	} else {
		colorl = colori;
		while (colorl.z < d6) {
			float H_wcfyex1 = bigColor6.z + colorl.z;
			vec4 H_4y5jj = colorl;
			H_4y5jj.z = H_wcfyex1;
			colorl = H_4y5jj;
		}
		
		colorm = colorl;
	}
	
	bool H_2ecxn2 = d7 < C_0d0;
	bool H_lmykhx1r = d7 < C_1d0;
	colorn = colorm;
	while (true) {
		if (H_2ecxn2) {
			coloro = colorn;
			break;
		}
		
		colorf1 = bigColor7 + colorn;
		if (H_lmykhx1r) {
			float H_5nb6mx1 = C_1d0 + colorf1.z;
			vec4 H_1kqzpy = colorf1;
			H_1kqzpy.z = H_5nb6mx1;
			coloro = H_1kqzpy;
			break;
		}
		
		vec4 colorg1 = BaseColor + colorf1;
		colorn = colorg1;
	}
	
	bool H_zt4vz81 = d8 < C_0d0;
	bool H_cokhy9 = d8 < C_1d0;
	colorp = coloro;
	while (true) {
		if (H_zt4vz81) {
			colorq = colorp;
			break;
		}
		
		colorh1 = bigColor7 + colorp;
		if (H_cokhy9) {
			float H_fjsmvh = C_1d0 + colorh1.z;
			bool H_hrxnuy1 = d8 < C_2d0;
			float H_e8em5i = C_1d0 + colorh1.y;
			vec4 H_fh4v4t = colorh1;
			H_fh4v4t.yz = vec2(H_e8em5i, H_fjsmvh);
			float H_dxzlfi = C_1d0 + colorh1.x;
			vec4 H_fh4v4tr = colorh1;
			H_fh4v4tr.xz = vec2(H_dxzlfi, H_fjsmvh);
			vec4 select9 = H_hrxnuy1 ? H_fh4v4t : H_fh4v4tr;
			colorq = select9;
			break;
		}
		
		colori1 = BaseColor + colorh1;
		bool H_1tq5ws1 = colori1.z >= d8;
		if (H_1tq5ws1) {
			colorq = colori1;
			break;
		}
		
		colorp = colori1;
	}
	
	bool H_45lodh = d9 > d8;
	colorr = colorq;
	while (colorr.w < d9) {
		colort = colorr;
		if (H_45lodh) {
			bool H_bare6w1 = colorr.x > d7;
			colors = colorr;
			if (! H_bare6w1) {
				bool H_thbawy = colorr.z == C_5d0;
				if (! H_thbawy) {
					break;
				}
				
				float H_dbcm251 = C_1d0 + colorr.w;
				vec4 H_iz6rsw1 = colorr;
				H_iz6rsw1.w = H_dbcm251;
				colors = H_iz6rsw1;
			}
			
			colort = colors;
		}
		
		colorr = colort;
	}
	
	coloru = colorr;
	while (coloru.z < d10) {
		float H_imrx301 = C_1d0 + coloru.y;
		Lg_7 = coloru;
		Lg_7.y = H_imrx301;
		bool H_o5kiav1 = H_imrx301 < d11;
		if (! H_o5kiav1) {
			vec4 colorj1 = C_vec4p1d0p + Lg_7;
			colorv = colorj1;
			break;
		}
		
		float H_jx5ytz = C_1d0 + coloru.z;
		bool H_j3w65o1 = coloru.w < d12;
		float H_wwb38w = C_1d0 + coloru.w;
		vec4 H_y8yjmy = Lg_7;
		H_y8yjmy.zw = vec2(H_jx5ytz, H_wwb38w);
		float H_hbdxd01 = C_1d0 + coloru.x;
		vec4 H_y8yjmyr = Lg_7;
		H_y8yjmyr.xz = vec2(H_hbdxd01, H_jx5ytz);
		vec4 selecta = H_j3w65o1 ? H_y8yjmy : H_y8yjmyr;
		coloru = selecta;
	}
	
	colorv = coloru;
	colorw = colorv;
	while (colorw.x < C_10d0) {
		vec4 colork1 = bigColor8 + colorw;
		bool H_4hxxxc1 = colork1.z < d8;
		bool H_nvrkke = colork1.w < d6;
		float H_ldwisu1 = bigColor8.x + colork1.y;
		vec4 H_cvcj3x1 = colork1;
		H_cvcj3x1.y = H_ldwisu1;
		vec4 selectb = H_nvrkke ? colork1 : H_cvcj3x1;
		vec4 selectc = H_4hxxxc1 ? selectb : H_cvcj3x1;
		colorw = selectc;
	}
	
	vec4 colorl1 = C_vec4p1d0p + colorw;
	gl_FragColor = colorl1;
	colorx = colorl1;
	while (colorx.x < d14) {
		bool H_b9sdbr = colorx.y < d15;
		if (H_b9sdbr) {
			return;
		}
		
		vec4 colorm1 = C_vec4p1d0p + colorx;
		colorx = colorm1;
	}
	
	vec4 colorn1 = C_vec4p1d0p + colorx;
	colory = colorn1;
	while (colory.w < d16) {
		float H_gd6sw71 = C_1d0 + colory.w;
		vec4 H_rqruau1 = colory;
		H_rqruau1.w = H_gd6sw71;
		colory = H_rqruau1;
	}
	
	colorz = colory;
	while (true) {
		bool notlhs1 = colorz.w >= d2;
		bool notrhs1 = colorz.y >= d3;
		bool H_9acxdp1 = notrhs1 || notlhs1;
		if (H_9acxdp1) {
			color01 = colorz;
			while (color01.y >= d18) {
				coloro1 = C_vec4p1d0p + color01;
				bool H_zwze631 = coloro1.x >= d17;
				if (H_zwze631) {
					color11 = coloro1;
					while (color11.y < d16) {
						bool H_an18n91 = color11.w < d16;
						if (H_an18n91) {
							discard;
						}
						
						vec4 colorp1 = C_vec4p1d0p + color11;
						color11 = colorp1;
					}
					
					vec4 colorq1 = C_vec4p1d0p + color11;
					gl_FragColor = colorq1;
					return;
				}
				
				color01 = coloro1;
			}
			
			return;
		}
		
		vec4 colorr1 = bigColor1_2 + colorz;
		bool H_eafgoe1 = colorr1.z < d3;
		if (H_eafgoe1) {
			
		}
		
		colorz = colorr1;
	}
	
}

#version 130
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
uniform vec4 bigColor1_1;
uniform float d2;
uniform float d3;
uniform vec4 bigColor1_2;
uniform vec4 bigColor1_3;
uniform float d4;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform vec4 bigColor4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform float d8;
uniform float d9;
uniform float d10;
uniform float d11;
uniform float d12;
uniform vec4 bigColor8;
uniform float d14;
uniform float d15;
uniform float d16;
uniform float d18;
uniform float d17;
uniform float d13;
uniform float d19;
uniform float d20;
uniform float d21;
uniform float d22;
uniform float d23;
uniform float d24;
uniform float d25;
uniform float d26;
uniform float d27;
uniform float d28;
uniform float d29;
uniform float d30;
uniform float d31;
uniform float d32;
uniform float d33;
uniform float d34;
in vec4 BaseColor;
const float C_0d33 = 0.33;
const float C_0d66 = 0.66;
const vec4 C_vec4p0d66p = vec4(0.66);
const vec4 C_vec4p0d33p = vec4(0.33);
const float C_42d0 = 42.0;
const vec4 C_vec4p1d0p = vec4(1.0);
const int C_0 = 0;
vec4 colora1;
const float C_20d0 = 20.0;
const float C_1d0 = 1.0;
const int C_41 = 41;
const int C_1 = 1;
vec4 select6;
vec4 select7;
float Lg_1;
const float C_0d0 = 0.0;
vec4 colorf1;
vec4 colorh1;
const float C_2d0 = 2.0;
vec4 colori1;
const float C_5d0 = 5.0;
const float C_10d0 = 10.0;
vec4 coloro1;

void main()
{
	vec4 color;
	vec4 color1;
	vec4 color2;
	vec4 color3;
	vec4 color4;
	int i;
	vec4 color5;
	vec4 color6;
	int Lg_;
	vec4 color7;
	int Lg_1;
	vec4 color8;
	int Lg_2;
	vec4 colora;
	int Lg_3;
	vec4 colorb;
	vec4 colord;
	vec4 colore;
	vec4 colorf;
	vec4 colorg;
	vec4 colorh;
	vec4 colori;
	vec4 colorj;
	vec4 colorl;
	vec4 colorm;
	vec4 colorn;
	vec4 coloro;
	vec4 colorp;
	vec4 colorq;
	vec4 colorr;
	vec4 colors;
	vec4 colort;
	vec4 coloru;
	vec4 colorw;
	vec4 colorx;
	vec4 colory;
	vec4 colorz;
	vec4 color9;
	vec4 colora;
	bool H_bghf2q = BaseColor.x < C_0d33;
	bool H_9j9phn = BaseColor.x < C_0d66;
	vec4 select = H_9j9phn ? C_vec4p0d66p : C_vec4p0d33p;
	vec4 _L = H_bghf2q ? C_vec4p0d33p : select;
	vec4 select1 = BaseColor + _L;
	color = select1;
	while (color.x < d) {
		vec4 colorb = bigColor + color;
		color = colorb;
	}
	
	color1 = color;
	while (color1.z < d) {
		vec4 colorc = bigColor1_1 + color1;
		bool H_b19a7k = colorc.w < d;
		vec4 colord = bigColor1_1 + colorc;
		vec4 select2 = H_b19a7k ? colorc : colord;
		color1 = select2;
	}
	
	color2 = color1;
	while (color2.x < C_42d0) {
		vec4 colore = color2 + C_vec4p1d0p;
		color2 = colore;
	}
	
	color3 = color2;
	while (true) {
		bool notlhs = color3.w >= d2;
		bool notrhs = color3.y >= d3;
		bool H_nbn92x = notrhs || notlhs;
		if (H_nbn92x) {
			break;
		}
		
		vec4 colorf = bigColor1_2 + color3;
		color3 = colorf;
	}
	
	color4 = color3;
	while (color4.z < d3) {
		vec4 colorg = bigColor1_3 + color4;
		bool H_r8iyb = colorg.y < d4;
		if (H_r8iyb) {
			break;
		}
		
		vec4 colorh = bigColor1_3 + colorg;
		color4 = colorh;
	}
	
	i = C_0;
	color5 = color4;
	for (i = 0; i < Count; ++i) {
		vec4 colori = bigColor2 + color5;
		color5 = colori;
	}
	
	color6 = color5;
	while (true) {
		colora1 = bigColor3 + color6;
		bool H_xompge = colora1.x < d2;
		if (! H_xompge) {
			break;
		}
		
		color6 = colora1;
	}
	
	float H_ku5agd = colora1.z + d3;
	float H_158lq = H_ku5agd + d3;
	float H_eogxfs = H_158lq + d3;
	float H_f2ygx = H_eogxfs + d3;
	float H_2qwz = H_f2ygx + d3;
	float H_xdf9hr = H_2qwz + d3;
	float H_sw01mp = H_xdf9hr + d3;
	float H_tezmy = H_sw01mp + d3;
	float H_ele3ta = H_tezmy + d3;
	float H_ysilgy = H_ele3ta + d3;
	float H_0lrzed = H_ysilgy + d3;
	float H_j5olaj = H_0lrzed + d3;
	float H_0bhu0r = H_j5olaj + d3;
	float H_ktsosb = H_0bhu0r + d3;
	float H_xobpo = H_ktsosb + d3;
	float H_lk8re = H_xobpo + d3;
	float H_ypc4bi = H_lk8re + d3;
	float H_f76nni = H_ypc4bi + d3;
	float H_wi7r2e = H_f76nni + d3;
	float H_ylzk3t = H_wi7r2e + d3;
	float H_ceb2j = H_ylzk3t + d3;
	float H_9ff4vw = H_ceb2j + d3;
	float H_toyl = H_9ff4vw + d3;
	float H_w4hbmc = H_toyl + d3;
	float H_94aq2c = H_w4hbmc + d3;
	float H_ahsf = H_94aq2c + d3;
	float H_u3tk5t = H_ahsf + d3;
	float H_ww53jp = H_u3tk5t + d3;
	float H_ex1j8n = H_ww53jp + d3;
	float H_iobo = H_ex1j8n + d3;
	float H_qu9zfv = H_iobo + d3;
	float H_2c5yby = H_qu9zfv + d3;
	float H_aos = H_2c5yby + d3;
	float H_8py0cj = H_aos + d3;
	float H_zybgke = H_8py0cj + d3;
	float H_ahww6q = H_zybgke + d3;
	float H_mbf21d = H_ahww6q + d3;
	float H_1xbyox = H_mbf21d + d3;
	float H_kus1yu = H_1xbyox + d3;
	float H_c94ic = H_kus1yu + d3;
	float H_2zz = H_c94ic + d3;
	float H_bbt9se = H_2zz + d3;
	vec4 H_egrhpy = colora1;
	H_egrhpy.z = H_bbt9se;
	Lg_ = C_0;
	color7 = H_egrhpy;
	for ( ; Lg_ != 100; ++Lg_) {
		bool H_ouigu = color7.z < C_20d0;
		float H_i27ik = color7.x + C_1d0;
		vec4 H_hvpvwg = color7;
		H_hvpvwg.x = H_i27ik;
		float H_tyie6w = C_1d0 + color7.y;
		vec4 H_hvpvwgr = color7;
		H_hvpvwgr.y = H_tyie6w;
		vec4 select3 = H_ouigu ? H_hvpvwg : H_hvpvwgr;
		color7 = select3;
	}
	
	Lg_1 = C_0;
	color8 = color7;
	for ( ; Lg_1 != 120; ++Lg_1) {
		bool H_dkcc0l = color8.z < C_20d0;
		float H_5t8tep = C_1d0 + color8.x;
		vec4 H_wgo1rc = color8;
		H_wgo1rc.x = H_5t8tep;
		float H_64nt4p = C_1d0 + color8.y;
		vec4 H_wgo1rcr = color8;
		H_wgo1rcr.y = H_64nt4p;
		vec4 select4 = H_dkcc0l ? H_wgo1rc : H_wgo1rcr;
		color8 = select4;
	}
	
	Lg_2 = C_0;
	colora = color8;
	for ( ; Lg_2 != 42; ++Lg_2) {
		float H_bthy3g = colora.z + d3;
		bool H_nda4t = colora.x < d4;
		vec4 H_ze6hx1 = colora;
		H_ze6hx1.z = H_bthy3g;
		float H_0bsj8w = C_1d0 + colora.w;
		vec4 H_ze6hx1r = colora;
		H_ze6hx1r.zw = vec2(H_bthy3g, H_0bsj8w);
		vec4 select5 = H_nda4t ? H_ze6hx1 : H_ze6hx1r;
		colora = select5;
	}
	
	Lg_3 = C_0;
	colorb = colora;
	while (Lg_3 <= C_41) {
		bool H_0rnct = colorb.x < d4;
		if (H_0rnct) {
			break;
		}
		
		float H_0f3y = colorb.z + d3;
		float H_heycbr = C_1d0 + colorb.w;
		vec4 H_y3sg72 = colorb;
		H_y3sg72.zw = vec2(H_0f3y, H_heycbr);
		int H_zk97sd = Lg_3 + C_1;
		Lg_3 = H_zk97sd;
		colorb = H_y3sg72;
	}
	
	colord = colorb;
	while (true) {
		vec4 colorb1 = bigColor4 + colord;
		bool H_d8n1rz = colorb1.x < d4;
		if (H_d8n1rz) {
			colore = colorb1;
		} else {
			bool H_0hvytn = colorb1.y < d4;
			float H_ft4i1t = colorb1.y + d4;
			vec4 H_hbtye1 = colorb1;
			H_hbtye1.y = H_ft4i1t;
			float H_qi2sqn = colorb1.x + d4;
			vec4 H_hbtye1r = colorb1;
			H_hbtye1r.x = H_qi2sqn;
			select6 = H_0hvytn ? H_hbtye1 : H_hbtye1r;
			bool H_l1em9x = select6.z < d4;
			if (! H_l1em9x) {
				break;
			}
			
			colore = select6;
		}
		
		colord = colore;
	}
	
	colorf = select6;
	while (true) {
		vec4 colorc1 = bigColor5 + colorf;
		bool H_ky29nq = colorc1.y < d5;
		float H_vnjtse = colorc1.y + d5;
		vec4 H_cd5hos1 = colorc1;
		H_cd5hos1.y = H_vnjtse;
		select7 = H_ky29nq ? H_cd5hos1 : colorc1;
		bool H_1bgbo = select7.x < d5;
		if (! H_1bgbo) {
			break;
		}
		
		colorf = select7;
	}
	
	bool H_tg986f = select7.x < d6;
	if (H_tg986f) {
		colorg = select7;
		while (colorg.y < d6) {
			vec4 colord1 = bigColor6 + colorg;
			colorg = colord1;
		}
		
		colori = colorg;
	} else {
		colorh = select7;
		while (colorh.z < d6) {
			float H_k81hde = bigColor6.z + colorh.z;
			vec4 H_c5togy1 = colorh;
			H_c5togy1.z = H_k81hde;
			colorh = H_c5togy1;
		}
		
		colori = colorh;
	}
	
	bool H_p4jfbx = colori.x < d6;
	if (H_p4jfbx) {
		bool H_lmykhx = d7 < C_1d0;
		colorj = colori;
		while (colorj.y < d6) {
			if (H_lmykhx) {
				break;
			}
			
			vec4 colore1 = bigColor6 + colorj;
			colorj = colore1;
		}
		
		colorm = colorj;
	} else {
		colorl = colori;
		while (colorl.z < d6) {
			float H_wcfyex = bigColor6.z + colorl.z;
			vec4 H_4y5jj = colorl;
			H_4y5jj.z = H_wcfyex;
			colorl = H_4y5jj;
		}
		
		colorm = colorl;
	}
	
	bool H_2ecxn = d7 < C_0d0;
	bool H_lmykhx1r = d7 < C_1d0;
	colorn = colorm;
	while (true) {
		if (H_2ecxn) {
			coloro = colorn;
			break;
		}
		
		colorf1 = bigColor7 + colorn;
		if (H_lmykhx1r) {
			float H_5nb6mx = C_1d0 + colorf1.z;
			vec4 H_1kqzpy = colorf1;
			H_1kqzpy.z = H_5nb6mx;
			coloro = H_1kqzpy;
			break;
		}
		
		vec4 colorg1 = BaseColor + colorf1;
		colorn = colorg1;
	}
	
	bool H_zt4vz = d8 < C_0d0;
	bool H_cokhy = d8 < C_1d0;
	colorp = coloro;
	while (true) {
		if (H_zt4vz) {
			colorq = colorp;
			break;
		}
		
		colorh1 = bigColor7 + colorp;
		if (H_cokhy) {
			float H_fjsmvh = C_1d0 + colorh1.z;
			bool H_hrxnuy = d8 < C_2d0;
			float H_e8em5i = C_1d0 + colorh1.y;
			vec4 H_fh4v4t = colorh1;
			H_fh4v4t.yz = vec2(H_e8em5i, H_fjsmvh);
			float H_dxzlfi = C_1d0 + colorh1.x;
			vec4 H_fh4v4tr = colorh1;
			H_fh4v4tr.xz = vec2(H_dxzlfi, H_fjsmvh);
			vec4 select8 = H_hrxnuy ? H_fh4v4t : H_fh4v4tr;
			colorq = select8;
			break;
		}
		
		colori1 = BaseColor + colorh1;
		bool H_1tq5ws = colori1.z < d8;
		if (! H_1tq5ws) {
			colorq = colori1;
			break;
		}
		
		colorp = colori1;
	}
	
	bool H_45lodh = d9 > d8;
	colorr = colorq;
	while (colorr.w < d9) {
		colort = colorr;
		if (H_45lodh) {
			bool H_0oe77c = colorr.x <= d7;
			colors = colorr;
			if (H_0oe77c) {
				bool H_tmuuyn = colorr.z != C_5d0;
				if (H_tmuuyn) {
					break;
				}
				
				float H_dbcm = C_1d0 + colorr.w;
				vec4 H_iz6rsw1 = colorr;
				H_iz6rsw1.w = H_dbcm;
				colors = H_iz6rsw1;
			}
			
			colort = colors;
		}
		
		colorr = colort;
	}
	
	coloru = colorr;
	while (coloru.z < d10) {
		float H_imrx = C_1d0 + coloru.y;
		vec4 H_f20qmx1 = coloru;
		H_f20qmx1.y = H_imrx;
		bool H_buumyu1 = H_imrx >= d11;
		if (H_buumyu1) {
			break;
		}
		
		float H_jx5ytz = C_1d0 + coloru.z;
		bool H_j3w65o = coloru.w < d12;
		float H_wwb38w = C_1d0 + coloru.w;
		vec4 H_1rlppb1 = H_f20qmx1;
		H_1rlppb1.zw = vec2(H_jx5ytz, H_wwb38w);
		float H_hbdxd = C_1d0 + coloru.x;
		vec4 H_1rlppb1r = H_f20qmx1;
		H_1rlppb1r.xz = vec2(H_hbdxd, H_jx5ytz);
		vec4 select9 = H_j3w65o ? H_1rlppb1 : H_1rlppb1r;
		coloru = select9;
	}
	
	colorw = coloru;
	while (colorw.x < C_10d0) {
		vec4 colork = bigColor8 + colorw;
		bool H_4hxxxc = colork.z < d8;
		bool H_nvrkke = colork.w < d6;
		float H_ldwisu = bigColor8.x + colork.y;
		vec4 H_59kj9 = colork;
		H_59kj9.y = H_ldwisu;
		vec4 colork1 = H_nvrkke ? colork : H_59kj9;
		vec4 selectc = H_4hxxxc ? colork1 : H_59kj9;
		colorw = selectc;
	}
	
	vec4 colorl1 = C_vec4p1d0p + colorw;
	gl_FragColor = colorl1;
	colorx = colorl1;
	while (colorx.x < d14) {
		bool H_b9sdbr = colorx.y < d15;
		if (H_b9sdbr) {
			return;
		}
		
		vec4 colorm1 = C_vec4p1d0p + colorx;
		colorx = colorm1;
	}
	
	vec4 colorn1 = C_vec4p1d0p + colorx;
	colory = colorn1;
	while (colory.w < d16) {
		float H_gd6sw = C_1d0 + colory.w;
		vec4 H_rqruau1 = colory;
		H_rqruau1.w = H_gd6sw;
		colory = H_rqruau1;
	}
	
	colorz = colory;
	while (true) {
		bool notlhs1 = colorz.w >= d2;
		bool notrhs1 = colorz.y >= d3;
		bool H_9acxdp = notrhs1 || notlhs1;
		vec4 colorr1 = bigColor1_2 + colorz;
		colorz = colorr1;
	}
	
	color9 = colorz;
	while (color9.y >= d18) {
		coloro1 = C_vec4p1d0p + color9;
		bool H_zwze = coloro1.x < d17;
		if (! H_zwze) {
			colora = coloro1;
			while (colora.y < d16) {
				bool H_an18n = colora.w < d16;
				if (H_an18n) {
					discard;
				}
				
				vec4 colorp1 = C_vec4p1d0p + colora;
				colora = colorp1;
			}
			
			vec4 colorq1 = C_vec4p1d0p + colora;
			gl_FragColor = colorq1;
			return;
		}
		
		color9 = coloro1;
	}
	
	
}

