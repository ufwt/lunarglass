; ModuleID = 'Top'

@gl_MaxLights = internal global i32 8
@gl_MaxClipPlanes = internal global i32 8
@gl_MaxTextureUnits = internal global i32 2
@gl_MaxTextureCoords = internal global i32 4
@gl_MaxVertexAttribs = internal global i32 16
@gl_MaxVertexUniformComponents = internal global i32 512
@gl_MaxVaryingFloats = internal global i32 32
@gl_MaxVertexTextureImageUnits = internal global i32 0
@gl_MaxCombinedTextureImageUnits = internal global i32 2
@gl_MaxTextureImageUnits = internal global i32 2
@gl_MaxFragmentUniformComponents = internal global i32 64
@gl_MaxDrawBuffers = internal global i32 2
@d7 = external addrspace(1) global float
@bigColor7 = external addrspace(1) global <4 x float>
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %assignment_tmp = alloca <4 x float>
  %color = alloca <4 x float>
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  store <4 x float> %BaseColor, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %ifmerge10, %entry
  %0 = load float addrspace(1)* @d7
  %1 = fcmp olt float %0, 0.000000e+00
  br i1 %1, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loopjump:                                    ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %post-loopjump, %loop-header
  %2 = load <4 x float>* %color
  %3 = load <4 x float> addrspace(1)* @bigColor7
  %assignment_tmp1 = fadd <4 x float> %2, %3
  store <4 x float> %assignment_tmp1, <4 x float>* %assignment_tmp
  %color2 = load <4 x float>* %assignment_tmp
  store <4 x float> %color2, <4 x float>* %color
  %4 = load float addrspace(1)* @d7
  %5 = fcmp olt float %4, 1.000000e+00
  br i1 %5, label %then3, label %ifmerge10

then3:                                            ; preds = %ifmerge
  %6 = load <4 x float>* %assignment_tmp
  %7 = extractelement <4 x float> %6, i32 2
  %8 = fadd float %7, 1.000000e+00
  %9 = load <4 x float>* %color
  %color4 = insertelement <4 x float> %9, float %8, i32 2
  store <4 x float> %color4, <4 x float>* %color
  %10 = load float addrspace(1)* @d7
  %11 = fcmp olt float %10, 2.000000e+00
  br i1 %11, label %then5, label %else

then5:                                            ; preds = %then3
  %12 = load <4 x float>* %color
  %13 = extractelement <4 x float> %12, i32 1
  %14 = fadd float %13, 1.000000e+00
  %15 = load <4 x float>* %color
  %color6 = insertelement <4 x float> %15, float %14, i32 1
  store <4 x float> %color6, <4 x float>* %color
  br label %ifmerge8

else:                                             ; preds = %then3
  %16 = load <4 x float>* %color
  %17 = extractelement <4 x float> %16, i32 0
  %18 = fadd float %17, 1.000000e+00
  %19 = load <4 x float>* %color
  %color7 = insertelement <4 x float> %19, float %18, i32 0
  store <4 x float> %color7, <4 x float>* %color
  br label %ifmerge8

ifmerge8:                                         ; preds = %else, %then5
  br label %loop-merge

post-loopjump9:                                   ; No predecessors!
  br label %ifmerge10

ifmerge10:                                        ; preds = %post-loopjump9, %ifmerge
  %20 = load <4 x float>* %color
  %BaseColor11 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  %color12 = fadd <4 x float> %20, %BaseColor11
  store <4 x float> %color12, <4 x float>* %color
  br label %loop-header

loop-merge:                                       ; preds = %ifmerge8, %then
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %21 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %21)
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

@d7 = external addrspace(1) global float
@bigColor7 = external addrspace(1) global <4 x float>

define void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  br label %loop-header

loop-header:                                      ; preds = %ifmerge10, %entry
  %color.0 = phi <4 x float> [ %BaseColor, %entry ], [ %color12, %ifmerge10 ]
  %0 = load float addrspace(1)* @d7
  %1 = fcmp olt float %0, 0.000000e+00
  br i1 %1, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

ifmerge:                                          ; preds = %loop-header
  %2 = load <4 x float> addrspace(1)* @bigColor7
  %assignment_tmp1 = fadd <4 x float> %color.0, %2
  %3 = fcmp olt float %0, 1.000000e+00
  br i1 %3, label %then3, label %ifmerge10

then3:                                            ; preds = %ifmerge
  %4 = extractelement <4 x float> %assignment_tmp1, i32 2
  %5 = fadd float %4, 1.000000e+00
  %6 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp1, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %5, i32 -1, float 0.000000e+00, i32 -1)
  %7 = fcmp olt float %0, 2.000000e+00
  br i1 %7, label %then5, label %else

then5:                                            ; preds = %then3
  %8 = extractelement <4 x float> %6, i32 1
  %9 = fadd float %8, 1.000000e+00
  %10 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %6, i32 2, float 0.000000e+00, i32 -1, float %9, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge8

else:                                             ; preds = %then3
  %11 = extractelement <4 x float> %6, i32 0
  %12 = fadd float %11, 1.000000e+00
  %13 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %6, i32 1, float %12, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge8

ifmerge8:                                         ; preds = %else, %then5
  %color.2 = phi <4 x float> [ %10, %then5 ], [ %13, %else ]
  br label %loop-merge

ifmerge10:                                        ; preds = %ifmerge
  %BaseColor11 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  %color12 = fadd <4 x float> %assignment_tmp1, %BaseColor11
  br label %loop-header

loop-merge:                                       ; preds = %ifmerge8, %then
  %color.1 = phi <4 x float> [ %color.0, %then ], [ %color.2, %ifmerge8 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %color.1)
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone


Loop info:
Loop at depth 1 containing: %loop-header<header><exiting>,%ifmerge10<latch>,%ifmerge<exiting>


Scalar evolution:
Classifying expressions for: @main
Determining loop execution counts for: @main
Loop %loop-header: <multiple exits> Unpredictable backedge-taken count. 
Loop %loop-header: Unpredictable max backedge-taken count. 
compiling loops.frag...
uniform vec4 bigColor ; 
uniform vec4 bigColor2 ; 
uniform vec4 bigColor3 ; 
uniform vec4 bigColor4 ; 
uniform vec4 bigColor5 ; 
uniform vec4 bigColor6 ; 
uniform vec4 bigColor7 ; 
uniform vec4 bigColor8 ; 
varying vec4 BaseColor ; 
uniform float d ; 
uniform float d2 ; 
uniform float d3 ; 
uniform float d4 ; 
uniform float d5 ; 
uniform float d6 ; 
uniform float d7 ; 
uniform float d8 ; 
uniform int Count ; 
void  main (){
vec4 color = BaseColor ; do {
if ( d7 < 0.000000 ) break; color += bigColor7 ; if ( d7 < 1.000000 ) {
color . z ++ ; if ( d7 < 2.000000 ) {
color . y ++ ; }
else {
color . x ++ ; }
break; }
color += BaseColor ; }
while ( true ); gl_FragColor = color ; }



(
(declare (uniform ) int Count)
(declare (uniform ) float d8)
(declare (uniform ) float d7)
(declare (uniform ) float d6)
(declare (uniform ) float d5)
(declare (uniform ) float d4)
(declare (uniform ) float d3)
(declare (uniform ) float d2)
(declare (uniform ) float d)
(declare (in ) vec4 BaseColor)
(declare (uniform ) vec4 bigColor8)
(declare (uniform ) vec4 bigColor7)
(declare (uniform ) vec4 bigColor6)
(declare (uniform ) vec4 bigColor5)
(declare (uniform ) vec4 bigColor4)
(declare (uniform ) vec4 bigColor3)
(declare (uniform ) vec4 bigColor2)
(declare (uniform ) vec4 bigColor)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(declare (in ) vec2 gl_PointCoord)
(declare (in ) (array float 8) gl_ClipDistance)
(function main
  (signature void
    (parameters
    )
    (
      (declare () vec4 color)
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref BaseColor) ) 
      (loop () () () () (
        (if (expression bool < (var_ref d7) (constant float (0.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor7) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (var_ref d7) (constant float (1.000000)) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (1.000000)) ) ) 
          (if (expression bool < (var_ref d7) (constant float (2.000000)) ) (
            (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(constant float (1.000000)) ) ) 
          )
          (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
          ))

          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref BaseColor) ) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref color) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform float d7;
uniform vec4 bigColor7;
in vec4 BaseColor;
const float const25 = 0;
const float const28 = 1;
in vec4 BaseColor11;
const float const33 = 2;

void main()
{
    vec4 color_0;
    vec4 color_2;
    vec4 color_1;
    color_0 = BaseColor;
    while (true) {
        bool temp24 = d7 < const25;
        if (temp24) {
            break;
        }
        
        vec4 assignment_tmp1 = color_0 + bigColor7;
        bool temp27 = d7 < const28;
        if (temp27) {
            break;
        }
        
        vec4 color12 = assignment_tmp1 + BaseColor11;
        color_0 = color12;
        continue;
    }
    
    color_1 = color_0;
    float temp30 = assignment_tmp1.z + const28;
    vec4 temp31 = assignment_tmp1;
    temp31.z = temp30.x;
    bool temp32 = d7 < const33;
    if (temp32) {
        float temp34 = temp31.y + const28;
        vec4 temp35 = temp31;
        temp35.y = temp34.x;
        color_2 = temp35;
    }
    else {
        float temp36 = temp31.x + const28;
        vec4 temp37 = temp31;
        temp37.x = temp36.x;
        color_2 = temp37;
    }
    
    color_1 = color_2;
    gl_FragColor = color_1;
    
}
