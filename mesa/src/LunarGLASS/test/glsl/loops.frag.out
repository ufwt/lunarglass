; ModuleID = 'Top'

@gl_MaxLights = internal global i32 8
@gl_MaxClipPlanes = internal global i32 8
@gl_MaxTextureUnits = internal global i32 2
@gl_MaxTextureCoords = internal global i32 4
@gl_MaxVertexAttribs = internal global i32 16
@gl_MaxVertexUniformComponents = internal global i32 512
@gl_MaxVaryingFloats = internal global i32 32
@gl_MaxVertexTextureImageUnits = internal global i32 0
@gl_MaxCombinedTextureImageUnits = internal global i32 2
@gl_MaxTextureImageUnits = internal global i32 2
@gl_MaxFragmentUniformComponents = internal global i32 64
@gl_MaxDrawBuffers = internal global i32 2
@d = external addrspace(1) global float
@bigColor = external addrspace(1) global <4 x float>
@Count = external addrspace(1) global i32
@bigColor2 = external addrspace(1) global <4 x float>
@bigColor3 = external addrspace(1) global <4 x float>
@d2 = external addrspace(1) global float
@bigColor4 = external addrspace(1) global <4 x float>
@d4 = external addrspace(1) global float
@bigColor5 = external addrspace(1) global <4 x float>
@d5 = external addrspace(1) global float
@d6 = external addrspace(1) global float
@bigColor6 = external addrspace(1) global <4 x float>
@d7 = external addrspace(1) global float
@bigColor7 = external addrspace(1) global <4 x float>
@bigColor8 = external addrspace(1) global <4 x float>
@d8 = external addrspace(1) global float
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %assignment_tmp74 = alloca <4 x float>
  %assignment_tmp61 = alloca <4 x float>
  %assignment_tmp32 = alloca <4 x float>
  %assignment_tmp17 = alloca <4 x float>
  %assignment_tmp = alloca <4 x float>
  %color = alloca <4 x float>
  %i = alloca i32
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  store <4 x float> %BaseColor, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %ifmerge, %entry
  %0 = load <4 x float>* %color
  %1 = extractelement <4 x float> %0, i32 0
  %2 = load float addrspace(1)* @d
  %3 = fcmp oge float %1, %2
  br i1 %3, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loopjump:                                    ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %post-loopjump, %loop-header
  %4 = load <4 x float>* %color
  %5 = load <4 x float> addrspace(1)* @bigColor
  %color1 = fadd <4 x float> %4, %5
  store <4 x float> %color1, <4 x float>* %color
  br label %loop-header

loop-merge:                                       ; preds = %then
  store i32 0, i32* %i
  br label %loop-header2

loop-header2:                                     ; preds = %ifmerge5, %loop-merge
  %6 = load i32* %i
  %7 = load i32 addrspace(1)* @Count
  %8 = icmp sge i32 %6, %7
  br i1 %8, label %then3, label %ifmerge5

then3:                                            ; preds = %loop-header2
  br label %loop-merge8

post-loopjump4:                                   ; No predecessors!
  br label %ifmerge5

ifmerge5:                                         ; preds = %post-loopjump4, %loop-header2
  %9 = load <4 x float>* %color
  %10 = load <4 x float> addrspace(1)* @bigColor2
  %color6 = fadd <4 x float> %9, %10
  store <4 x float> %color6, <4 x float>* %color
  %11 = load i32* %i
  %i7 = add i32 %11, 1
  store i32 %i7, i32* %i
  br label %loop-header2

loop-merge8:                                      ; preds = %then3
  br label %loop-header9

loop-header9:                                     ; preds = %ifmerge14, %loop-merge8
  %12 = load <4 x float>* %color
  %13 = load <4 x float> addrspace(1)* @bigColor3
  %assignment_tmp10 = fadd <4 x float> %12, %13
  store <4 x float> %assignment_tmp10, <4 x float>* %assignment_tmp
  %color11 = load <4 x float>* %assignment_tmp
  store <4 x float> %color11, <4 x float>* %color
  %14 = load <4 x float>* %assignment_tmp
  %15 = extractelement <4 x float> %14, i32 0
  %16 = load float addrspace(1)* @d2
  %17 = fcmp oge float %15, %16
  br i1 %17, label %then12, label %ifmerge14

then12:                                           ; preds = %loop-header9
  br label %loop-merge15

post-loopjump13:                                  ; No predecessors!
  br label %ifmerge14

ifmerge14:                                        ; preds = %post-loopjump13, %loop-header9
  br label %loop-header9

loop-merge15:                                     ; preds = %then12
  br label %loop-header16

loop-header16:                                    ; preds = %ifmerge29, %then20, %loop-merge15
  %18 = load <4 x float>* %color
  %19 = load <4 x float> addrspace(1)* @bigColor4
  %assignment_tmp1718 = fadd <4 x float> %18, %19
  store <4 x float> %assignment_tmp1718, <4 x float>* %assignment_tmp17
  %color19 = load <4 x float>* %assignment_tmp17
  store <4 x float> %color19, <4 x float>* %color
  %20 = load <4 x float>* %assignment_tmp17
  %21 = extractelement <4 x float> %20, i32 0
  %22 = load float addrspace(1)* @d4
  %23 = fcmp olt float %21, %22
  br i1 %23, label %then20, label %ifmerge22

then20:                                           ; preds = %loop-header16
  br label %loop-header16

post-loopjump21:                                  ; No predecessors!
  br label %ifmerge22

ifmerge22:                                        ; preds = %post-loopjump21, %loop-header16
  %24 = load <4 x float>* %assignment_tmp17
  %25 = extractelement <4 x float> %24, i32 1
  %26 = load float addrspace(1)* @d4
  %27 = fcmp olt float %25, %26
  br i1 %27, label %then23, label %else

then23:                                           ; preds = %ifmerge22
  %28 = load <4 x float>* %assignment_tmp17
  %29 = extractelement <4 x float> %28, i32 1
  %30 = load float addrspace(1)* @d4
  %31 = fadd float %29, %30
  %32 = load <4 x float>* %color
  %color24 = insertelement <4 x float> %32, float %31, i32 1
  store <4 x float> %color24, <4 x float>* %color
  br label %ifmerge26

else:                                             ; preds = %ifmerge22
  %33 = load <4 x float>* %color
  %34 = extractelement <4 x float> %33, i32 0
  %35 = load float addrspace(1)* @d4
  %36 = fadd float %34, %35
  %37 = load <4 x float>* %color
  %color25 = insertelement <4 x float> %37, float %36, i32 0
  store <4 x float> %color25, <4 x float>* %color
  br label %ifmerge26

ifmerge26:                                        ; preds = %else, %then23
  %38 = load <4 x float>* %color
  %39 = extractelement <4 x float> %38, i32 2
  %40 = load float addrspace(1)* @d4
  %41 = fcmp oge float %39, %40
  br i1 %41, label %then27, label %ifmerge29

then27:                                           ; preds = %ifmerge26
  br label %loop-merge30

post-loopjump28:                                  ; No predecessors!
  br label %ifmerge29

ifmerge29:                                        ; preds = %post-loopjump28, %ifmerge26
  br label %loop-header16

loop-merge30:                                     ; preds = %then27
  br label %loop-header31

loop-header31:                                    ; preds = %ifmerge40, %loop-merge30
  %42 = load <4 x float>* %color
  %43 = load <4 x float> addrspace(1)* @bigColor5
  %assignment_tmp3233 = fadd <4 x float> %42, %43
  store <4 x float> %assignment_tmp3233, <4 x float>* %assignment_tmp32
  %color34 = load <4 x float>* %assignment_tmp32
  store <4 x float> %color34, <4 x float>* %color
  %44 = load <4 x float>* %assignment_tmp32
  %45 = extractelement <4 x float> %44, i32 1
  %46 = load float addrspace(1)* @d5
  %47 = fcmp olt float %45, %46
  br i1 %47, label %then35, label %ifmerge37

then35:                                           ; preds = %loop-header31
  %48 = load <4 x float>* %assignment_tmp32
  %49 = extractelement <4 x float> %48, i32 1
  %50 = load float addrspace(1)* @d5
  %51 = fadd float %49, %50
  %52 = load <4 x float>* %color
  %color36 = insertelement <4 x float> %52, float %51, i32 1
  store <4 x float> %color36, <4 x float>* %color
  br label %ifmerge37

ifmerge37:                                        ; preds = %then35, %loop-header31
  %53 = load <4 x float>* %color
  %54 = extractelement <4 x float> %53, i32 0
  %55 = load float addrspace(1)* @d5
  %56 = fcmp oge float %54, %55
  br i1 %56, label %then38, label %ifmerge40

then38:                                           ; preds = %ifmerge37
  br label %loop-merge41

post-loopjump39:                                  ; No predecessors!
  br label %ifmerge40

ifmerge40:                                        ; preds = %post-loopjump39, %ifmerge37
  br label %loop-header31

loop-merge41:                                     ; preds = %then38
  %57 = load <4 x float>* %color
  %58 = extractelement <4 x float> %57, i32 0
  %59 = load float addrspace(1)* @d6
  %60 = fcmp olt float %58, %59
  br i1 %60, label %then42, label %else49

then42:                                           ; preds = %loop-merge41
  br label %loop-header43

loop-header43:                                    ; preds = %ifmerge46, %then42
  %61 = load <4 x float>* %color
  %62 = extractelement <4 x float> %61, i32 1
  %63 = load float addrspace(1)* @d6
  %64 = fcmp oge float %62, %63
  br i1 %64, label %then44, label %ifmerge46

then44:                                           ; preds = %loop-header43
  br label %loop-merge48

post-loopjump45:                                  ; No predecessors!
  br label %ifmerge46

ifmerge46:                                        ; preds = %post-loopjump45, %loop-header43
  %65 = load <4 x float>* %color
  %66 = load <4 x float> addrspace(1)* @bigColor6
  %color47 = fadd <4 x float> %65, %66
  store <4 x float> %color47, <4 x float>* %color
  br label %loop-header43

loop-merge48:                                     ; preds = %then44
  br label %ifmerge56

else49:                                           ; preds = %loop-merge41
  br label %loop-header50

loop-header50:                                    ; preds = %ifmerge53, %else49
  %67 = load <4 x float>* %color
  %68 = extractelement <4 x float> %67, i32 2
  %69 = load float addrspace(1)* @d6
  %70 = fcmp oge float %68, %69
  br i1 %70, label %then51, label %ifmerge53

then51:                                           ; preds = %loop-header50
  br label %loop-merge55

post-loopjump52:                                  ; No predecessors!
  br label %ifmerge53

ifmerge53:                                        ; preds = %post-loopjump52, %loop-header50
  %71 = load <4 x float>* %color
  %72 = extractelement <4 x float> %71, i32 2
  %73 = load <4 x float> addrspace(1)* @bigColor6
  %74 = extractelement <4 x float> %73, i32 2
  %75 = fadd float %72, %74
  %76 = load <4 x float>* %color
  %color54 = insertelement <4 x float> %76, float %75, i32 2
  store <4 x float> %color54, <4 x float>* %color
  br label %loop-header50

loop-merge55:                                     ; preds = %then51
  br label %ifmerge56

ifmerge56:                                        ; preds = %loop-merge55, %loop-merge48
  br label %loop-header57

loop-header57:                                    ; preds = %ifmerge66, %ifmerge56
  %77 = load float addrspace(1)* @d7
  %78 = fcmp olt float %77, 0.000000e+00
  br i1 %78, label %then58, label %ifmerge60

then58:                                           ; preds = %loop-header57
  br label %loop-merge69

post-loopjump59:                                  ; No predecessors!
  br label %ifmerge60

ifmerge60:                                        ; preds = %post-loopjump59, %loop-header57
  %79 = load <4 x float>* %color
  %80 = load <4 x float> addrspace(1)* @bigColor7
  %assignment_tmp6162 = fadd <4 x float> %79, %80
  store <4 x float> %assignment_tmp6162, <4 x float>* %assignment_tmp61
  %color63 = load <4 x float>* %assignment_tmp61
  store <4 x float> %color63, <4 x float>* %color
  %81 = load float addrspace(1)* @d7
  %82 = fcmp olt float %81, 1.000000e+00
  br i1 %82, label %then64, label %ifmerge66

then64:                                           ; preds = %ifmerge60
  br label %loop-merge69

post-loopjump65:                                  ; No predecessors!
  br label %ifmerge66

ifmerge66:                                        ; preds = %post-loopjump65, %ifmerge60
  %83 = load <4 x float>* %assignment_tmp61
  %BaseColor67 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  %color68 = fadd <4 x float> %83, %BaseColor67
  store <4 x float> %color68, <4 x float>* %color
  br label %loop-header57

loop-merge69:                                     ; preds = %then64, %then58
  br label %loop-header70

loop-header70:                                    ; preds = %ifmerge79, %then77, %loop-merge69
  %84 = load <4 x float>* %color
  %85 = extractelement <4 x float> %84, i32 0
  %86 = fcmp oge float %85, 1.000000e+01
  br i1 %86, label %then71, label %ifmerge73

then71:                                           ; preds = %loop-header70
  br label %loop-merge81

post-loopjump72:                                  ; No predecessors!
  br label %ifmerge73

ifmerge73:                                        ; preds = %post-loopjump72, %loop-header70
  %87 = load <4 x float>* %color
  %88 = load <4 x float> addrspace(1)* @bigColor8
  %assignment_tmp7475 = fadd <4 x float> %87, %88
  store <4 x float> %assignment_tmp7475, <4 x float>* %assignment_tmp74
  %color76 = load <4 x float>* %assignment_tmp74
  store <4 x float> %color76, <4 x float>* %color
  %89 = load <4 x float>* %assignment_tmp74
  %90 = extractelement <4 x float> %89, i32 2
  %91 = load float addrspace(1)* @d8
  %92 = fcmp olt float %90, %91
  br i1 %92, label %then77, label %ifmerge79

then77:                                           ; preds = %ifmerge73
  br label %loop-header70

post-loopjump78:                                  ; No predecessors!
  br label %ifmerge79

ifmerge79:                                        ; preds = %post-loopjump78, %ifmerge73
  %93 = load <4 x float>* %assignment_tmp74
  %94 = extractelement <4 x float> %93, i32 1
  %95 = load <4 x float> addrspace(1)* @bigColor8
  %96 = extractelement <4 x float> %95, i32 0
  %97 = fadd float %94, %96
  %98 = load <4 x float>* %color
  %color80 = insertelement <4 x float> %98, float %97, i32 1
  store <4 x float> %color80, <4 x float>* %color
  br label %loop-header70

loop-merge81:                                     ; preds = %then71
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %99 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %99)
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

@d = external addrspace(1) global float
@bigColor = external addrspace(1) global <4 x float>
@Count = external addrspace(1) global i32
@bigColor2 = external addrspace(1) global <4 x float>
@bigColor3 = external addrspace(1) global <4 x float>
@d2 = external addrspace(1) global float
@bigColor4 = external addrspace(1) global <4 x float>
@d4 = external addrspace(1) global float
@bigColor5 = external addrspace(1) global <4 x float>
@d5 = external addrspace(1) global float
@d6 = external addrspace(1) global float
@bigColor6 = external addrspace(1) global <4 x float>
@d7 = external addrspace(1) global float
@bigColor7 = external addrspace(1) global <4 x float>
@bigColor8 = external addrspace(1) global <4 x float>
@d8 = external addrspace(1) global float

define void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  br label %loop-header

loop-header:                                      ; preds = %ifmerge, %entry
  %color.0 = phi <4 x float> [ %BaseColor, %entry ], [ %color1, %ifmerge ]
  %0 = extractelement <4 x float> %color.0, i32 0
  %1 = load float addrspace(1)* @d
  %2 = fcmp oge float %0, %1
  br i1 %2, label %loop-header2.preheader, label %ifmerge

loop-header2.preheader:                           ; preds = %loop-header
  %color.0.lcssa = phi <4 x float> [ %color.0, %loop-header ]
  br label %loop-header2

ifmerge:                                          ; preds = %loop-header
  %3 = load <4 x float> addrspace(1)* @bigColor
  %color1 = fadd <4 x float> %color.0, %3
  br label %loop-header

loop-header2:                                     ; preds = %loop-header2.preheader, %ifmerge5
  %color.1 = phi <4 x float> [ %color6, %ifmerge5 ], [ %color.0.lcssa, %loop-header2.preheader ]
  %4 = phi i32 [ %i7, %ifmerge5 ], [ 0, %loop-header2.preheader ]
  %5 = load i32 addrspace(1)* @Count
  %6 = icmp sge i32 %4, %5
  br i1 %6, label %loop-header9.preheader, label %ifmerge5

loop-header9.preheader:                           ; preds = %loop-header2
  %color.1.lcssa = phi <4 x float> [ %color.1, %loop-header2 ]
  br label %loop-header9

ifmerge5:                                         ; preds = %loop-header2
  %7 = load <4 x float> addrspace(1)* @bigColor2
  %color6 = fadd <4 x float> %color.1, %7
  %i7 = add i32 %4, 1
  br label %loop-header2

loop-header9:                                     ; preds = %loop-header9.preheader, %loop-header9
  %color.2 = phi <4 x float> [ %assignment_tmp10, %loop-header9 ], [ %color.1.lcssa, %loop-header9.preheader ]
  %8 = load <4 x float> addrspace(1)* @bigColor3
  %assignment_tmp10 = fadd <4 x float> %color.2, %8
  %9 = extractelement <4 x float> %assignment_tmp10, i32 0
  %10 = load float addrspace(1)* @d2
  %11 = fcmp oge float %9, %10
  br i1 %11, label %loop-header16.preheader, label %loop-header9

loop-header16.preheader:                          ; preds = %loop-header9
  %assignment_tmp10.lcssa = phi <4 x float> [ %assignment_tmp10, %loop-header9 ]
  br label %loop-header16

loop-header16:                                    ; preds = %loop-header16.backedge, %loop-header16.preheader
  %color.3 = phi <4 x float> [ %assignment_tmp10.lcssa, %loop-header16.preheader ], [ %color.3.be, %loop-header16.backedge ]
  %12 = load <4 x float> addrspace(1)* @bigColor4
  %assignment_tmp1718 = fadd <4 x float> %color.3, %12
  %13 = extractelement <4 x float> %assignment_tmp1718, i32 0
  %14 = load float addrspace(1)* @d4
  %15 = fcmp olt float %13, %14
  br i1 %15, label %loop-header16.backedge, label %ifmerge22

loop-header16.backedge:                           ; preds = %loop-header16, %ifmerge26
  %color.3.be = phi <4 x float> [ %assignment_tmp1718, %loop-header16 ], [ %color.4, %ifmerge26 ]
  br label %loop-header16

ifmerge22:                                        ; preds = %loop-header16
  %16 = extractelement <4 x float> %assignment_tmp1718, i32 1
  %17 = fcmp olt float %16, %14
  br i1 %17, label %then23, label %else

then23:                                           ; preds = %ifmerge22
  %18 = fadd float %16, %14
  %19 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp1718, i32 2, float 0.000000e+00, i32 -1, float %18, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge26

else:                                             ; preds = %ifmerge22
  %20 = fadd float %13, %14
  %21 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp1718, i32 1, float %20, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge26

ifmerge26:                                        ; preds = %else, %then23
  %color.4 = phi <4 x float> [ %19, %then23 ], [ %21, %else ]
  %22 = extractelement <4 x float> %color.4, i32 2
  %23 = fcmp oge float %22, %14
  br i1 %23, label %loop-header31.preheader, label %loop-header16.backedge

loop-header31.preheader:                          ; preds = %ifmerge26
  %color.4.lcssa = phi <4 x float> [ %color.4, %ifmerge26 ]
  br label %loop-header31

loop-header31:                                    ; preds = %loop-header31.preheader, %ifmerge37
  %color.5 = phi <4 x float> [ %color.6, %ifmerge37 ], [ %color.4.lcssa, %loop-header31.preheader ]
  %24 = load <4 x float> addrspace(1)* @bigColor5
  %assignment_tmp3233 = fadd <4 x float> %color.5, %24
  %25 = extractelement <4 x float> %assignment_tmp3233, i32 1
  %26 = load float addrspace(1)* @d5
  %27 = fcmp olt float %25, %26
  br i1 %27, label %then35, label %ifmerge37

then35:                                           ; preds = %loop-header31
  %28 = fadd float %25, %26
  %29 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp3233, i32 2, float 0.000000e+00, i32 -1, float %28, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge37

ifmerge37:                                        ; preds = %then35, %loop-header31
  %color.6 = phi <4 x float> [ %29, %then35 ], [ %assignment_tmp3233, %loop-header31 ]
  %30 = extractelement <4 x float> %color.6, i32 0
  %31 = fcmp oge float %30, %26
  br i1 %31, label %then38, label %loop-header31

then38:                                           ; preds = %ifmerge37
  %.lcssa = phi float [ %30, %ifmerge37 ]
  %color.6.lcssa = phi <4 x float> [ %color.6, %ifmerge37 ]
  %32 = load float addrspace(1)* @d6
  %33 = fcmp olt float %.lcssa, %32
  br i1 %33, label %loop-header43.preheader, label %loop-header50.preheader

loop-header43.preheader:                          ; preds = %then38
  br label %loop-header43

loop-header50.preheader:                          ; preds = %then38
  br label %loop-header50

loop-header43:                                    ; preds = %loop-header43.preheader, %ifmerge46
  %color.7 = phi <4 x float> [ %color47, %ifmerge46 ], [ %color.6.lcssa, %loop-header43.preheader ]
  %34 = extractelement <4 x float> %color.7, i32 1
  %35 = fcmp oge float %34, %32
  br i1 %35, label %loop-header57.preheader.loopexit, label %ifmerge46

ifmerge46:                                        ; preds = %loop-header43
  %36 = load <4 x float> addrspace(1)* @bigColor6
  %color47 = fadd <4 x float> %color.7, %36
  br label %loop-header43

loop-header50:                                    ; preds = %loop-header50.preheader, %ifmerge53
  %color.9 = phi <4 x float> [ %42, %ifmerge53 ], [ %color.6.lcssa, %loop-header50.preheader ]
  %37 = extractelement <4 x float> %color.9, i32 2
  %38 = fcmp oge float %37, %32
  br i1 %38, label %loop-header57.loopexit, label %ifmerge53

ifmerge53:                                        ; preds = %loop-header50
  %39 = load <4 x float> addrspace(1)* @bigColor6
  %40 = extractelement <4 x float> %39, i32 2
  %41 = fadd float %37, %40
  %42 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.9, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %41, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header50

loop-header57.loopexit:                           ; preds = %loop-header50
  %color.9.lcssa = phi <4 x float> [ %color.9, %loop-header50 ]
  br label %loop-header57.preheader

loop-header57.preheader.loopexit:                 ; preds = %loop-header43
  %color.7.lcssa = phi <4 x float> [ %color.7, %loop-header43 ]
  br label %loop-header57.preheader

loop-header57.preheader:                          ; preds = %loop-header57.preheader.loopexit, %loop-header57.loopexit
  %color.10.ph = phi <4 x float> [ %color.9.lcssa, %loop-header57.loopexit ], [ %color.7.lcssa, %loop-header57.preheader.loopexit ]
  br label %loop-header57

loop-header57:                                    ; preds = %loop-header57.preheader, %ifmerge66
  %color.10 = phi <4 x float> [ %color68, %ifmerge66 ], [ %color.10.ph, %loop-header57.preheader ]
  %43 = load float addrspace(1)* @d7
  %44 = fcmp olt float %43, 0.000000e+00
  br i1 %44, label %loop-header70.preheader, label %ifmerge60

loop-header70.preheader:                          ; preds = %ifmerge60, %loop-header57
  %color.12.ph = phi <4 x float> [ %color.10, %loop-header57 ], [ %assignment_tmp6162, %ifmerge60 ]
  br label %loop-header70

ifmerge60:                                        ; preds = %loop-header57
  %45 = load <4 x float> addrspace(1)* @bigColor7
  %assignment_tmp6162 = fadd <4 x float> %color.10, %45
  %46 = fcmp olt float %43, 1.000000e+00
  br i1 %46, label %loop-header70.preheader, label %ifmerge66

ifmerge66:                                        ; preds = %ifmerge60
  %BaseColor67 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  %color68 = fadd <4 x float> %assignment_tmp6162, %BaseColor67
  br label %loop-header57

loop-header70:                                    ; preds = %loop-header70.backedge, %loop-header70.preheader
  %color.12 = phi <4 x float> [ %color.12.ph, %loop-header70.preheader ], [ %color.12.be, %loop-header70.backedge ]
  %47 = extractelement <4 x float> %color.12, i32 0
  %48 = fcmp oge float %47, 1.000000e+01
  br i1 %48, label %then71, label %ifmerge73

then71:                                           ; preds = %loop-header70
  %color.12.lcssa = phi <4 x float> [ %color.12, %loop-header70 ]
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %color.12.lcssa)
  ret void

ifmerge73:                                        ; preds = %loop-header70
  %49 = load <4 x float> addrspace(1)* @bigColor8
  %assignment_tmp7475 = fadd <4 x float> %color.12, %49
  %50 = extractelement <4 x float> %assignment_tmp7475, i32 2
  %51 = load float addrspace(1)* @d8
  %52 = fcmp olt float %50, %51
  br i1 %52, label %loop-header70.backedge, label %ifmerge79

loop-header70.backedge:                           ; preds = %ifmerge73, %ifmerge79
  %color.12.be = phi <4 x float> [ %56, %ifmerge79 ], [ %assignment_tmp7475, %ifmerge73 ]
  br label %loop-header70

ifmerge79:                                        ; preds = %ifmerge73
  %53 = extractelement <4 x float> %assignment_tmp7475, i32 1
  %54 = extractelement <4 x float> %49, i32 0
  %55 = fadd float %53, %54
  %56 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp7475, i32 2, float 0.000000e+00, i32 -1, float %55, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header70.backedge
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone


Loop info:
Loop at depth 1 containing: %loop-header<header><exiting>,%ifmerge<latch>
Loop at depth 1 containing: %loop-header2<header><exiting>,%ifmerge5<latch>
Loop at depth 1 containing: %loop-header9<header><latch><exiting>
Loop at depth 1 containing: %loop-header16<header>,%loop-header16.backedge<latch>,%ifmerge26<exiting>,%then23,%ifmerge22,%else
Loop at depth 1 containing: %loop-header31<header>,%ifmerge37<latch><exiting>,%then35
Loop at depth 1 containing: %loop-header43<header><exiting>,%ifmerge46<latch>
Loop at depth 1 containing: %loop-header57<header><exiting>,%ifmerge66<latch>,%ifmerge60<exiting>
Loop at depth 1 containing: %loop-header70<header><exiting>,%loop-header70.backedge<latch>,%ifmerge79,%ifmerge73
Loop at depth 1 containing: %loop-header50<header><exiting>,%ifmerge53<latch>


Scalar evolution:
Classifying expressions for: @main
  %4 = phi i32 [ %i7, %ifmerge5 ], [ 0, %loop-header2.preheader ]
  -->  {0,+,1}<%loop-header2>		Exits: <<Unknown>>
  %5 = load i32 addrspace(1)* @Count
  -->  %5		Exits: <<Unknown>>
  %i7 = add i32 %4, 1
  -->  {1,+,1}<%loop-header2>		Exits: <<Unknown>>
Determining loop execution counts for: @main
Loop %loop-header: Unpredictable backedge-taken count. 
Loop %loop-header: Unpredictable max backedge-taken count. 
Loop %loop-header2: Unpredictable backedge-taken count. 
Loop %loop-header2: Unpredictable max backedge-taken count. 
Loop %loop-header9: Unpredictable backedge-taken count. 
Loop %loop-header9: Unpredictable max backedge-taken count. 
Loop %loop-header16: Unpredictable backedge-taken count. 
Loop %loop-header16: Unpredictable max backedge-taken count. 
Loop %loop-header31: Unpredictable backedge-taken count. 
Loop %loop-header31: Unpredictable max backedge-taken count. 
Loop %loop-header43: Unpredictable backedge-taken count. 
Loop %loop-header43: Unpredictable max backedge-taken count. 
Loop %loop-header57: <multiple exits> Unpredictable backedge-taken count. 
Loop %loop-header57: Unpredictable max backedge-taken count. 
Loop %loop-header70: Unpredictable backedge-taken count. 
Loop %loop-header70: Unpredictable max backedge-taken count. 
Loop %loop-header50: Unpredictable backedge-taken count. 
Loop %loop-header50: Unpredictable max backedge-taken count. 

***Unsupported functionality: inductive loops
compiling loops.frag...
uniform vec4 bigColor ; 
uniform vec4 bigColor2 ; 
uniform vec4 bigColor3 ; 
uniform vec4 bigColor4 ; 
uniform vec4 bigColor5 ; 
uniform vec4 bigColor6 ; 
uniform vec4 bigColor7 ; 
uniform vec4 bigColor8 ; 
varying vec4 BaseColor ; 
uniform float d ; 
uniform float d2 ; 
uniform float d3 ; 
uniform float d4 ; 
uniform float d5 ; 
uniform float d6 ; 
uniform float d7 ; 
uniform float d8 ; 
uniform int Count ; 
void  main (){
vec4 color = BaseColor ; while ( color . x < d ) {
color += bigColor ; }
for( int i = 0 ; ; i < Count ; ++ i ) {
color += bigColor2 ; }
do {
color += bigColor3 ; }
while ( color . x < d2 ); do {
color += bigColor4 ; if ( color . x < d4 ) continue; if ( color . y < d4 ) color . y += d4 ; else color . x += d4 ; }
while ( color . z < d4 ); do {
color += bigColor5 ; if ( color . y < d5 ) color . y += d5 ; }
while ( color . x < d5 ); if ( color . x < d6 ) {
while ( color . y < d6 ) color += bigColor6 ; }
else {
while ( color . z < d6 ) color . z += bigColor6 . z ; }
do {
if ( d7 < 0.000000 ) break; color += bigColor7 ; if ( d7 < 1.000000 ) break; color += BaseColor ; }
while ( true ); while ( color . x < 10 ) {
color += bigColor8 ; if ( color . z < d8 ) continue; color . y += bigColor8 . x ; }
gl_FragColor = color ; }



(
(declare (uniform ) int Count)
(declare (uniform ) float d8)
(declare (uniform ) float d7)
(declare (uniform ) float d6)
(declare (uniform ) float d5)
(declare (uniform ) float d4)
(declare (uniform ) float d3)
(declare (uniform ) float d2)
(declare (uniform ) float d)
(declare (in ) vec4 BaseColor)
(declare (uniform ) vec4 bigColor8)
(declare (uniform ) vec4 bigColor7)
(declare (uniform ) vec4 bigColor6)
(declare (uniform ) vec4 bigColor5)
(declare (uniform ) vec4 bigColor4)
(declare (uniform ) vec4 bigColor3)
(declare (uniform ) vec4 bigColor2)
(declare (uniform ) vec4 bigColor)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(declare (in ) vec2 gl_PointCoord)
(declare (in ) (array float 8) gl_ClipDistance)
(function main
  (signature void
    (parameters
    )
    (
      (declare () int i)
      (declare () vec4 color)
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref BaseColor) ) 
      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(var_ref d) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop () () () () (
        (if (expression bool >= (var_ref i) (var_ref Count) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor2) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor3) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool >= (swiz x (var_ref assignment_tmp) )(var_ref d2) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor4) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz x (var_ref assignment_tmp) )(var_ref d4) ) (
          continue
        )
        ())

        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d4) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(var_ref d4) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(var_ref d4) ) ) 
        ))

        (if (expression bool >= (swiz z (var_ref color) )(var_ref d4) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor5) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d5) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(var_ref d5) ) ) 
        )
        ())

        (if (expression bool >= (swiz x (var_ref color) )(var_ref d5) ) (
          break
        )
        ())

      ))

      (if (expression bool < (swiz x (var_ref color) )(var_ref d6) ) (
        (loop () () () () (
          (if (expression bool >= (swiz y (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor6) ) ) 
        ))

      )
      (
        (loop () () () () (
          (if (expression bool >= (swiz z (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(swiz z (var_ref bigColor6) )) ) 
        ))

      ))

      (loop () () () () (
        (if (expression bool < (var_ref d7) (constant float (0.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor7) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (var_ref d7) (constant float (1.000000)) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref assignment_tmp) (var_ref BaseColor) ) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(constant float (10.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor8) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz z (var_ref assignment_tmp) )(var_ref d8) ) (
          continue
        )
        ())

        (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(swiz x (var_ref bigColor8) )) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref color) ) 
    ))

)


)