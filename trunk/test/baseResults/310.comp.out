
Top IR:
; ModuleID = 'Glslang'

%outb = type { float, float, float, <3 x float> }
%outbna = type { i32, <4 x float> }
%outs = type { <4 x float> }

@outbname = external addrspace(2) constant %outb
@s = global float 0.000000e+00
@outbnamena = external addrspace(2) constant %outbna
@i = global i32 0
@outnames = external addrspace(2) constant %outs
@gl_LocalInvocationID = global <3 x i32> zeroinitializer
@iimg2Drgba = external addrspace(1) constant i32
@coord2D = global <2 x i32> zeroinitializer
@img3Drgba = external addrspace(1) constant i32
@coord3D = global <3 x i32> zeroinitializer
@uimgCube = external addrspace(1) constant i32
@img2DA = external addrspace(1) constant i32
@iimg2D = external addrspace(1) constant i32
@wimg2DA = external addrspace(1) constant i32
@wimg2D = external addrspace(1) constant i32
@ii2da = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  %gl_WorkGroupSize = alloca <3 x i32>
  %uv = alloca <4 x i32>
  %v = alloca <4 x float>
  %iv = alloca <4 x i32>
  %outnames = alloca <4 x float>
  %outbname = alloca <3 x float>
  %outbnamena = alloca <4 x float>
  br label %mainBody

mainBody:                                         ; preds = %entry
  call void @llvm.gla.barrier()
  %0 = load float* @s
  store float %0, float addrspace(2)* getelementptr inbounds (%outb addrspace(2)* @outbname, i32 0, i32 0)
  %1 = load float* @s
  %2 = load <4 x float>* %outbnamena
  %3 = insertelement <4 x float> undef, float %1, i32 0, !gla.precision !40
  %4 = insertelement <4 x float> %3, float %1, i32 1, !gla.precision !40
  %5 = insertelement <4 x float> %4, float %1, i32 2, !gla.precision !40
  %6 = insertelement <4 x float> %5, float %1, i32 3, !gla.precision !40
  store <4 x float> %6, <4 x float> addrspace(2)* getelementptr inbounds (%outbna addrspace(2)* @outbnamena, i32 0, i32 1)
  %7 = load <3 x float> addrspace(2)* getelementptr (<3 x float> addrspace(2)* getelementptr inbounds (%outb addrspace(2)* @outbname, i32 0, i32 3), i32 18)
  %s = extractelement <3 x float> %7, i32 0, !gla.precision !40
  store float %s, float* @s
  %8 = load i32* @i
  %9 = load float* @s
  %10 = load <3 x float>* %outbname
  %11 = insertelement <3 x float> undef, float %9, i32 0, !gla.precision !40
  %12 = insertelement <3 x float> %11, float %9, i32 1, !gla.precision !40
  %13 = insertelement <3 x float> %12, float %9, i32 2, !gla.precision !40
  %14 = getelementptr <3 x float> addrspace(2)* getelementptr inbounds (%outb addrspace(2)* @outbname, i32 0, i32 3), i32 %8
  store <3 x float> %13, <3 x float> addrspace(2)* %14
  %15 = load <3 x i32>* @gl_LocalInvocationID
  %16 = extractelement <3 x i32> %15, i32 0, !gla.precision !40
  %17 = load float* @s
  %18 = load <4 x float>* %outnames
  %19 = insertelement <4 x float> undef, float %17, i32 0, !gla.precision !40
  %20 = insertelement <4 x float> %19, float %17, i32 1, !gla.precision !40
  %21 = insertelement <4 x float> %20, float %17, i32 2, !gla.precision !40
  %22 = insertelement <4 x float> %21, float %17, i32 3, !gla.precision !40
  %23 = getelementptr <4 x float> addrspace(2)* getelementptr inbounds (%outs addrspace(2)* @outnames, i32 0, i32 0), i32 %16
  store <4 x float> %22, <4 x float> addrspace(2)* %23
  %24 = load i32 addrspace(1)* @iimg2Drgba, !gla.uniform !10
  %25 = load <2 x i32>* @coord2D
  %iv1 = call <4 x i32> @llvm.gla.imageLoad.v4i32.v2i32(i32 2, i32 %24, i32 65536, <2 x i32> %25), !gla.precision !40
  store <4 x i32> %iv1, <4 x i32>* %iv
  %26 = load i32 addrspace(1)* @img3Drgba, !gla.uniform !13
  %27 = load <3 x i32>* @coord3D
  %v3 = call <4 x float> @llvm.gla.fImageLoad.v4f32.v3i32(i32 3, i32 %26, i32 65536, <3 x i32> %27), !gla.precision !40
  store <4 x float> %v3, <4 x float>* %v
  %28 = load i32 addrspace(1)* @uimgCube, !gla.uniform !16
  %29 = load <3 x i32>* @coord3D
  %uv4 = call <4 x i32> @llvm.gla.imageLoad.v4i32.v3i32(i32 4, i32 %28, i32 65536, <3 x i32> %29), !gla.precision !40
  store <4 x i32> %uv4, <4 x i32>* %uv
  %30 = load i32 addrspace(1)* @img2DA, !gla.uniform !19
  %31 = load <3 x i32>* @coord3D
  %v5 = call <4 x float> @llvm.gla.fImageLoad.v4f32.v3i32(i32 2, i32 %30, i32 65552, <3 x i32> %31), !gla.precision !40
  %32 = load <4 x float>* %v
  %v6 = fadd <4 x float> %32, %v5, !gla.precision !40
  store <4 x float> %v6, <4 x float>* %v
  %33 = load i32 addrspace(1)* @iimg2D, !gla.uniform !22
  %34 = load <2 x i32>* @coord2D
  %35 = load <4 x i32>* %iv
  call void @llvm.gla.imageStoreI.v2i32(i32 2, i32 %33, i32 131072, <2 x i32> %34, <4 x i32> %35), !gla.precision !40
  %36 = load i32 addrspace(1)* @uimgCube, !gla.uniform !16
  %37 = load <3 x i32>* @coord3D
  %38 = load <4 x i32>* %uv
  call void @llvm.gla.imageStoreI.v3i32(i32 4, i32 %36, i32 131072, <3 x i32> %37, <4 x i32> %38), !gla.precision !40
  %39 = load i32 addrspace(1)* @wimg2DA, !gla.uniform !25
  %40 = load <3 x i32>* @coord3D
  %41 = load <4 x float>* %v
  call void @llvm.gla.imageStoreF.v3i32(i32 2, i32 %39, i32 131088, <3 x i32> %40, <4 x float> %41), !gla.precision !40
  %42 = load i32 addrspace(1)* @wimg2D, !gla.uniform !28
  %43 = load <2 x i32>* @coord2D
  %44 = load <4 x float>* %v
  call void @llvm.gla.imageStoreF.v2i32(i32 2, i32 %42, i32 131072, <2 x i32> %43, <4 x float> %44), !gla.precision !40
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.barrier() #0

; Function Attrs: nounwind readonly
declare <4 x i32> @llvm.gla.imageLoad.v4i32.v2i32(i32, i32, i32, <2 x i32>) #1

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.gla.fImageLoad.v4f32.v3i32(i32, i32, i32, <3 x i32>) #1

; Function Attrs: nounwind readonly
declare <4 x i32> @llvm.gla.imageLoad.v4i32.v3i32(i32, i32, i32, <3 x i32>) #1

; Function Attrs: nounwind
declare void @llvm.gla.imageStoreI.v2i32(i32, i32, i32, <2 x i32>, <4 x i32>) #0

; Function Attrs: nounwind
declare void @llvm.gla.imageStoreI.v3i32(i32, i32, i32, <3 x i32>, <4 x i32>) #0

; Function Attrs: nounwind
declare void @llvm.gla.imageStoreF.v3i32(i32, i32, i32, <3 x i32>, <4 x float>) #0

; Function Attrs: nounwind
declare void @llvm.gla.imageStoreF.v2i32(i32, i32, i32, <2 x i32>, <4 x float>) #0

attributes #0 = { nounwind }
attributes #1 = { nounwind readonly }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !6, !8, !10, !13, !16, !19, !22, !25, !28, !31}
!gla.shared = !{!34, !35, !36, !37}
!gla.inputs = !{!38}
!gla.noStaticUse = !{!31}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"outbname", i32 18, %outb* @outbname_typeProxy, metadata !2, metadata !3}
!2 = metadata !{i32 6, i32 0, i32 1024, null}
!3 = metadata !{metadata !"outb", metadata !2, metadata !"f", metadata !4, metadata !"g", metadata !4, metadata !"h", metadata !4, metadata !"uns", metadata !4}
!4 = metadata !{metadata !"", metadata !5}
!5 = metadata !{i32 0, i32 3, i32 1024, null}
!6 = metadata !{metadata !"outbnamena", i32 14, %outbna* @outbnamena_typeProxy, metadata !2, metadata !7}
!7 = metadata !{metadata !"outbna", metadata !2, metadata !"k", metadata !4, metadata !"na", metadata !4}
!8 = metadata !{metadata !"outnames", i32 18, %outs* @outnames_typeProxy, metadata !2, metadata !9}
!9 = metadata !{metadata !"outs", metadata !2, metadata !"va", metadata !4}
!10 = metadata !{metadata !"iimg2Drgba", i32 12, i32* @iimg2Drgba_typeProxy, metadata !11}
!11 = metadata !{i32 5, i32 3, i32 1024, metadata !12}
!12 = metadata !{i32 22, i32* @iimg2Drgba_typeProxy, i32 1, i1 false, i1 false, i32 1}
!13 = metadata !{metadata !"img3Drgba", i32 12, i32* @img3Drgba_typeProxy, metadata !14}
!14 = metadata !{i32 5, i32 3, i32 1024, metadata !15}
!15 = metadata !{i32 2, i32* @img3Drgba_typeProxy, i32 2, i1 false, i1 false, i32 0}
!16 = metadata !{metadata !"uimgCube", i32 12, i32* @uimgCube_typeProxy, metadata !17}
!17 = metadata !{i32 5, i32 3, i32 1024, metadata !18}
!18 = metadata !{i32 34, i32* @uimgCube_typeProxy, i32 3, i1 false, i1 false, i32 2}
!19 = metadata !{metadata !"img2DA", i32 12, i32* @img2DA_typeProxy, metadata !20}
!20 = metadata !{i32 5, i32 3, i32 1024, metadata !21}
!21 = metadata !{i32 6, i32* @img2DA_typeProxy, i32 1, i1 true, i1 false, i32 0}
!22 = metadata !{metadata !"iimg2D", i32 12, i32* @iimg2D_typeProxy, metadata !23}
!23 = metadata !{i32 5, i32 3, i32 1024, metadata !24}
!24 = metadata !{i32 25, i32* @iimg2D_typeProxy, i32 1, i1 false, i1 false, i32 1}
!25 = metadata !{metadata !"wimg2DA", i32 12, i32* @wimg2DA_typeProxy, metadata !26}
!26 = metadata !{i32 5, i32 3, i32 1024, metadata !27}
!27 = metadata !{i32 5, i32* @wimg2DA_typeProxy, i32 1, i1 true, i1 false, i32 0}
!28 = metadata !{metadata !"wimg2D", i32 12, i32* @wimg2D_typeProxy, metadata !29}
!29 = metadata !{i32 5, i32 3, i32 1024, metadata !30}
!30 = metadata !{i32 3, i32* @wimg2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!31 = metadata !{metadata !"ii2da", i32 12, i32* @ii2da_typeProxy, metadata !32}
!32 = metadata !{i32 5, i32 3, i32 1024, metadata !33}
!33 = metadata !{i32 1, i32* @ii2da_typeProxy, i32 1, i1 true, i1 false, i32 1}
!34 = metadata !{float* @s}
!35 = metadata !{i32* @i}
!36 = metadata !{<2 x i32>* @coord2D}
!37 = metadata !{<3 x i32>* @coord3D}
!38 = metadata !{metadata !"gl_LocalInvocationID", i32 1, <3 x i32>* @gl_LocalInvocationID_typeProxy, metadata !39}
!39 = metadata !{i32 1, i32 3, i32 1024, null, i32 0, i32 4}
!40 = metadata !{i32 3}


Bottom IR:
; ModuleID = 'Glslang'

%outb = type { float, float, float, <3 x float> }
%outbna = type { i32, <4 x float> }
%outs = type { <4 x float> }

@outbname = external addrspace(2) constant %outb
@s = global float 0.000000e+00
@outbnamena = external addrspace(2) constant %outbna
@i = global i32 0
@outnames = external addrspace(2) constant %outs
@gl_LocalInvocationID = global <3 x i32> zeroinitializer
@iimg2Drgba = external addrspace(1) constant i32
@coord2D = global <2 x i32> zeroinitializer
@img3Drgba = external addrspace(1) constant i32
@coord3D = global <3 x i32> zeroinitializer
@uimgCube = external addrspace(1) constant i32
@img2DA = external addrspace(1) constant i32
@iimg2D = external addrspace(1) constant i32
@wimg2DA = external addrspace(1) constant i32
@wimg2D = external addrspace(1) constant i32

define fastcc void @main() {
entry:
  call void @llvm.gla.barrier()
  %0 = load float* @s, align 4
  %1 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %0, <4 x i32> zeroinitializer)
  %gla_constGEP = getelementptr %outb addrspace(2)* @outbname, i32 0, i32 0
  store float %0, float addrspace(2)* %gla_constGEP, align 16
  %gla_constGEP7 = getelementptr %outbna addrspace(2)* @outbnamena, i32 0, i32 1
  store <4 x float> %1, <4 x float> addrspace(2)* %gla_constGEP7, align 16
  %gla_constGEP8 = getelementptr %outb addrspace(2)* @outbname, i32 9, i32 3
  %2 = load <3 x float> addrspace(2)* %gla_constGEP8, align 16
  %3 = call <4 x float> @llvm.gla.fSwizzle.v4f32.v3f32.v4i32(<3 x float> %2, <4 x i32> zeroinitializer)
  %4 = call <3 x float> @llvm.gla.fSwizzle.v3f32.v3f32.v3i32(<3 x float> %2, <3 x i32> zeroinitializer)
  %s = extractelement <3 x float> %2, i32 0, !gla.precision !40
  store float %s, float* @s, align 4
  %5 = load i32* @i, align 4
  %gla_constGEP9 = getelementptr %outb addrspace(2)* @outbname, i32 0, i32 3
  %6 = getelementptr <3 x float> addrspace(2)* %gla_constGEP9, i32 %5
  store <3 x float> %4, <3 x float> addrspace(2)* %6, align 16
  %7 = load <3 x i32>* @gl_LocalInvocationID, align 16
  %8 = extractelement <3 x i32> %7, i32 0, !gla.precision !40
  %9 = getelementptr inbounds %outs addrspace(2)* @outnames, i32 %8, i32 0
  store <4 x float> %3, <4 x float> addrspace(2)* %9, align 16
  %10 = load i32 addrspace(1)* @iimg2Drgba, align 4, !gla.uniform !10
  %11 = load <2 x i32>* @coord2D, align 8
  %iv1 = call <4 x i32> @llvm.gla.imageLoad.v4i32.v2i32(i32 2, i32 %10, i32 65536, <2 x i32> %11), !gla.precision !40
  %12 = load i32 addrspace(1)* @img3Drgba, align 4, !gla.uniform !13
  %13 = load <3 x i32>* @coord3D, align 16
  %v3 = call <4 x float> @llvm.gla.fImageLoad.v4f32.v3i32(i32 3, i32 %12, i32 65536, <3 x i32> %13), !gla.precision !40
  %14 = load i32 addrspace(1)* @uimgCube, align 4, !gla.uniform !16
  %uv4 = call <4 x i32> @llvm.gla.imageLoad.v4i32.v3i32(i32 4, i32 %14, i32 65536, <3 x i32> %13), !gla.precision !40
  %15 = load i32 addrspace(1)* @img2DA, align 4, !gla.uniform !19
  %v5 = call <4 x float> @llvm.gla.fImageLoad.v4f32.v3i32(i32 2, i32 %15, i32 65552, <3 x i32> %13), !gla.precision !40
  %v6 = fadd <4 x float> %v3, %v5, !gla.precision !40
  %16 = load i32 addrspace(1)* @iimg2D, align 4, !gla.uniform !22
  call void @llvm.gla.imageStoreI.v2i32(i32 2, i32 %16, i32 131072, <2 x i32> %11, <4 x i32> %iv1), !gla.precision !40
  call void @llvm.gla.imageStoreI.v3i32(i32 4, i32 %14, i32 131072, <3 x i32> %13, <4 x i32> %uv4), !gla.precision !40
  %17 = load i32 addrspace(1)* @wimg2DA, align 4, !gla.uniform !25
  call void @llvm.gla.imageStoreF.v3i32(i32 2, i32 %17, i32 131088, <3 x i32> %13, <4 x float> %v6), !gla.precision !40
  %18 = load i32 addrspace(1)* @wimg2D, align 4, !gla.uniform !28
  call void @llvm.gla.imageStoreF.v2i32(i32 2, i32 %18, i32 131072, <2 x i32> %11, <4 x float> %v6), !gla.precision !40
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.barrier() #0

; Function Attrs: nounwind readonly
declare <4 x i32> @llvm.gla.imageLoad.v4i32.v2i32(i32, i32, i32, <2 x i32>) #1

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.gla.fImageLoad.v4f32.v3i32(i32, i32, i32, <3 x i32>) #1

; Function Attrs: nounwind readonly
declare <4 x i32> @llvm.gla.imageLoad.v4i32.v3i32(i32, i32, i32, <3 x i32>) #1

; Function Attrs: nounwind
declare void @llvm.gla.imageStoreI.v2i32(i32, i32, i32, <2 x i32>, <4 x i32>) #0

; Function Attrs: nounwind
declare void @llvm.gla.imageStoreI.v3i32(i32, i32, i32, <3 x i32>, <4 x i32>) #0

; Function Attrs: nounwind
declare void @llvm.gla.imageStoreF.v3i32(i32, i32, i32, <3 x i32>, <4 x float>) #0

; Function Attrs: nounwind
declare void @llvm.gla.imageStoreF.v2i32(i32, i32, i32, <2 x i32>, <4 x float>) #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <3 x float> @llvm.gla.fSwizzle.v3f32.v3f32.v3i32(<3 x float>, <3 x i32>) #2

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.v3f32.v4i32(<3 x float>, <4 x i32>) #2

attributes #0 = { nounwind }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !6, !8, !10, !13, !16, !19, !22, !25, !28, !31}
!gla.shared = !{!34, !35, !36, !37}
!gla.inputs = !{!38}
!gla.noStaticUse = !{!31}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"outbname", i32 18, %outb* @outbname_typeProxy, metadata !2, metadata !3}
!2 = metadata !{i32 6, i32 0, i32 1024, null}
!3 = metadata !{metadata !"outb", metadata !2, metadata !"f", metadata !4, metadata !"g", metadata !4, metadata !"h", metadata !4, metadata !"uns", metadata !4}
!4 = metadata !{metadata !"", metadata !5}
!5 = metadata !{i32 0, i32 3, i32 1024, null}
!6 = metadata !{metadata !"outbnamena", i32 14, %outbna* @outbnamena_typeProxy, metadata !2, metadata !7}
!7 = metadata !{metadata !"outbna", metadata !2, metadata !"k", metadata !4, metadata !"na", metadata !4}
!8 = metadata !{metadata !"outnames", i32 18, %outs* @outnames_typeProxy, metadata !2, metadata !9}
!9 = metadata !{metadata !"outs", metadata !2, metadata !"va", metadata !4}
!10 = metadata !{metadata !"iimg2Drgba", i32 12, i32* @iimg2Drgba_typeProxy, metadata !11}
!11 = metadata !{i32 5, i32 3, i32 1024, metadata !12}
!12 = metadata !{i32 22, i32* @iimg2Drgba_typeProxy, i32 1, i1 false, i1 false, i32 1}
!13 = metadata !{metadata !"img3Drgba", i32 12, i32* @img3Drgba_typeProxy, metadata !14}
!14 = metadata !{i32 5, i32 3, i32 1024, metadata !15}
!15 = metadata !{i32 2, i32* @img3Drgba_typeProxy, i32 2, i1 false, i1 false, i32 0}
!16 = metadata !{metadata !"uimgCube", i32 12, i32* @uimgCube_typeProxy, metadata !17}
!17 = metadata !{i32 5, i32 3, i32 1024, metadata !18}
!18 = metadata !{i32 34, i32* @uimgCube_typeProxy, i32 3, i1 false, i1 false, i32 2}
!19 = metadata !{metadata !"img2DA", i32 12, i32* @img2DA_typeProxy, metadata !20}
!20 = metadata !{i32 5, i32 3, i32 1024, metadata !21}
!21 = metadata !{i32 6, i32* @img2DA_typeProxy, i32 1, i1 true, i1 false, i32 0}
!22 = metadata !{metadata !"iimg2D", i32 12, i32* @iimg2D_typeProxy, metadata !23}
!23 = metadata !{i32 5, i32 3, i32 1024, metadata !24}
!24 = metadata !{i32 25, i32* @iimg2D_typeProxy, i32 1, i1 false, i1 false, i32 1}
!25 = metadata !{metadata !"wimg2DA", i32 12, i32* @wimg2DA_typeProxy, metadata !26}
!26 = metadata !{i32 5, i32 3, i32 1024, metadata !27}
!27 = metadata !{i32 5, i32* @wimg2DA_typeProxy, i32 1, i1 true, i1 false, i32 0}
!28 = metadata !{metadata !"wimg2D", i32 12, i32* @wimg2D_typeProxy, metadata !29}
!29 = metadata !{i32 5, i32 3, i32 1024, metadata !30}
!30 = metadata !{i32 3, i32* @wimg2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!31 = metadata !{metadata !"ii2da", i32 12, i32* @ii2da_typeProxy, metadata !32}
!32 = metadata !{i32 5, i32 3, i32 1024, metadata !33}
!33 = metadata !{i32 1, i32* @ii2da_typeProxy, i32 1, i1 true, i1 false, i32 1}
!34 = metadata !{float* @s}
!35 = metadata !{i32* @i}
!36 = metadata !{<2 x i32>* @coord2D}
!37 = metadata !{<3 x i32>* @coord3D}
!38 = metadata !{metadata !"gl_LocalInvocationID", i32 1, <3 x i32>* @gl_LocalInvocationID_typeProxy, metadata !39}
!39 = metadata !{i32 1, i32 3, i32 1024, null, i32 0, i32 4}
!40 = metadata !{i32 3}
#version 310 es
// LunarGOO output
buffer outb {
	highp float f;
	highp float g;
	highp float h;
	highp vec3 uns[];
} outbname;
buffer outbna {
	highp int k;
	highp vec4 na;
} outbnamena;
buffer outs {
	highp vec4 va[];
} outnames;
uniform layout(rgba32i) highp iimage2D iimg2Drgba;
uniform layout(rgba32f) highp image3D img3Drgba;
uniform layout(r32ui) highp uimageCube uimgCube;
uniform layout(rgba8_snorm) highp image2DArray img2DA;
uniform layout(r32i) highp iimage2D iimg2D;
uniform layout(rgba8) highp image2DArray wimg2DA;
uniform layout(rgba16f) highp image2D wimg2D;
uniform highp iimage2DArray ii2da;
shared float s;
shared int i;
shared ivec2 coord2D;
shared ivec3 coord3D;

void main()
{
	barrier();
	vec4 H_xv6ac = vec4(s);
	outbname.f = s;
	outbnamena.na = H_xv6ac;
	s = outbname[9].uns.x;
	outbname.uns[i] = outbname[9].uns.xxx;
	outnames[ivec3(gl_LocalInvocationID).x].va = outbname[9].uns.xxxx;
	highp ivec4 iv = imageLoad(iimg2Drgba, coord2D);
	highp vec4 H_d28na9 = imageLoad(img3Drgba, coord3D);
	highp ivec4 uv = ivec4(imageLoad(uimgCube, coord3D));
	highp vec4 H_vp6gnj = imageLoad(img2DA, coord3D);
	highp vec4 H_hlq1hy1 = H_d28na9 + H_vp6gnj;
	imageStore(iimg2D, coord2D, iv);
	imageStore(uimgCube, coord3D, uv);
	imageStore(wimg2DA, coord3D, H_hlq1hy1);
	imageStore(wimg2D, coord2D, H_hlq1hy1);
	
}

tempglsl.comp
Warning, version 310 is not yet complete; most version-specific features are present, but some are missing.
ERROR: 0:16: 'rgba32i' : format requires readonly or writeonly memory qualifier 
ERROR: 0:17: 'rgba32f' : format requires readonly or writeonly memory qualifier 
ERROR: 0:19: 'rgba8_snorm' : format requires readonly or writeonly memory qualifier 
ERROR: 0:21: 'rgba8' : format requires readonly or writeonly memory qualifier 
ERROR: 0:22: 'rgba16f' : format requires readonly or writeonly memory qualifier 
ERROR: 0:23: '' : image variables not declared 'writeonly' must have a format layout qualifier 
ERROR: 0:35: 'outbname' :  left of '[' is not of type array, matrix, or vector  
ERROR: 0:35: 'scalar swizzle' : not supported with this profile: es
ERROR: 0:35: 'uns' : illegal vector field selection 
ERROR: 0:35: 'scalar swizzle' : not supported with this profile: es
ERROR: 0:36: 'outbname' :  left of '[' is not of type array, matrix, or vector  
ERROR: 0:36: 'scalar swizzle' : not supported with this profile: es
ERROR: 0:36: 'uns' : illegal vector field selection 
ERROR: 0:36: 'scalar swizzle' : not supported with this profile: es
ERROR: 0:37: 'outnames' :  left of '[' is not of type array, matrix, or vector  
ERROR: 0:37: 'scalar swizzle' : not supported with this profile: es
ERROR: 0:37: 'va' : illegal vector field selection 
ERROR: 0:37: 'outbname' :  left of '[' is not of type array, matrix, or vector  
ERROR: 0:37: 'scalar swizzle' : not supported with this profile: es
ERROR: 0:37: 'uns' : illegal vector field selection 
ERROR: 0:37: 'scalar swizzle' : not supported with this profile: es
ERROR: 0:37: 'assign' :  l-value required (can't modify a const)
ERROR: 0:37: 'assign' :  cannot convert from 'temp 4-component vector of float' to 'const float'
ERROR: 0:44: 'imageStore' : no matching overloaded function found 
ERROR: 24 compilation errors.  No code generated.


