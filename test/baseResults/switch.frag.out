
Top IR:
; ModuleID = 'Glslang'

@c = external addrspace(2) constant i32
@x = global float 0.000000e+00
@d = external addrspace(2) constant i32
@color = global float 0.000000e+00
@v = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %param96 = alloca i32
  %param95 = alloca <4 x float>
  %param94 = alloca <4 x float>
  %param89 = alloca i32
  %param88 = alloca <4 x float>
  %param = alloca <4 x float>
  %j = alloca i32
  %i = alloca i32
  %f = alloca float
  %local = alloca i32
  br label %mainBody

mainBody:                                         ; preds = %entry
  %local1 = load i32 addrspace(2)* @c, !gla.uniform !1
  store i32 %local1, i32* %local
  %0 = load i32* %local
  %local2 = add i32 %0, 1, !gla.precision !9
  store i32 %local2, i32* %local
  %1 = load i32 addrspace(2)* @c, !gla.uniform !1
  switch i32 %1, label %switch-segment4 [
    i32 1, label %switch-segment
    i32 2, label %switch-segment3
  ]

switch-segment:                                   ; preds = %mainBody
  %2 = load float* @x
  %f6 = call float @llvm.gla.fSin.f32.f32(float %2), !gla.precision !9
  store float %f6, float* %f
  br label %switch-merge

switch-segment3:                                  ; preds = %mainBody
  %3 = load float* @x
  %f8 = call float @llvm.gla.fCos.f32.f32(float %3), !gla.precision !9
  store float %f8, float* %f
  br label %switch-merge

switch-segment4:                                  ; preds = %mainBody
  %4 = load float* @x
  %f11 = call float @llvm.gla.fTan.f32.f32(float %4), !gla.precision !9
  store float %f11, float* %f
  br label %switch-merge

switch-merge:                                     ; preds = %switch-segment4, %switch-segment3, %switch-segment
  %5 = load i32 addrspace(2)* @c, !gla.uniform !1
  switch i32 %5, label %switch-segment15 [
    i32 1, label %switch-segment13
    i32 2, label %switch-segment14
  ]

post-switch-break:                                ; No predecessors!
  unreachable

post-switch-break9:                               ; No predecessors!
  unreachable

post-switch-break12:                              ; No predecessors!
  unreachable

switch-segment13:                                 ; preds = %switch-merge
  %6 = load float* @x
  %f17 = call float @llvm.gla.fSin.f32.f32(float %6), !gla.precision !9
  %7 = load float* %f
  %f18 = fadd float %7, %f17, !gla.precision !9
  store float %f18, float* %f
  br label %switch-segment14

switch-segment14:                                 ; preds = %switch-segment13, %switch-merge
  %8 = load float* @x
  %f19 = call float @llvm.gla.fCos.f32.f32(float %8), !gla.precision !9
  %9 = load float* %f
  %f20 = fadd float %9, %f19, !gla.precision !9
  store float %f20, float* %f
  br label %switch-merge16

switch-segment15:                                 ; preds = %switch-merge
  %10 = load float* @x
  %f22 = call float @llvm.gla.fTan.f32.f32(float %10), !gla.precision !9
  %11 = load float* %f
  %f23 = fadd float %11, %f22, !gla.precision !9
  store float %f23, float* %f
  br label %switch-merge16

switch-merge16:                                   ; preds = %switch-segment15, %switch-segment14
  %12 = load i32 addrspace(2)* @c, !gla.uniform !1
  switch i32 %12, label %switch-merge27 [
    i32 1, label %switch-segment25
    i32 2, label %switch-segment26
  ]

post-switch-break21:                              ; No predecessors!
  unreachable

post-switch-break24:                              ; No predecessors!
  unreachable

switch-segment25:                                 ; preds = %switch-merge16
  %13 = load float* @x
  %f28 = call float @llvm.gla.fSin.f32.f32(float %13), !gla.precision !9
  %14 = load float* %f
  %f29 = fadd float %14, %f28, !gla.precision !9
  store float %f29, float* %f
  br label %switch-merge27

switch-segment26:                                 ; preds = %switch-merge16
  %15 = load float* @x
  %f31 = call float @llvm.gla.fCos.f32.f32(float %15), !gla.precision !9
  %16 = load float* %f
  %f32 = fadd float %16, %f31, !gla.precision !9
  store float %f32, float* %f
  br label %switch-merge27

switch-merge27:                                   ; preds = %switch-segment26, %switch-segment25, %switch-merge16
  %17 = load i32 addrspace(2)* @c, !gla.uniform !1
  switch i32 %17, label %switch-segment36 [
    i32 1, label %switch-segment34
    i32 2, label %switch-segment35
  ]

post-switch-break30:                              ; No predecessors!
  unreachable

post-switch-break33:                              ; No predecessors!
  unreachable

switch-segment34:                                 ; preds = %switch-merge27
  %18 = load float* @x
  %f38 = call float @llvm.gla.fSin.f32.f32(float %18), !gla.precision !9
  %19 = load float* %f
  %f39 = fadd float %19, %f38, !gla.precision !9
  store float %f39, float* %f
  br label %switch-merge37

switch-segment35:                                 ; preds = %switch-merge27
  %20 = load i32 addrspace(2)* @d, !gla.uniform !3
  switch i32 %20, label %switch-merge43 [
    i32 1, label %switch-segment41
    i32 2, label %switch-segment42
  ]

switch-segment36:                                 ; preds = %switch-merge27
  %21 = load float* @x
  %f49 = call float @llvm.gla.fTan.f32.f32(float %21), !gla.precision !9
  %22 = load float* %f
  %f50 = fadd float %22, %f49, !gla.precision !9
  store float %f50, float* %f
  br label %switch-merge37

switch-merge37:                                   ; preds = %switch-segment36, %switch-merge43, %switch-segment34
  store i32 0, i32* %i
  br label %loop-header

post-switch-break40:                              ; No predecessors!
  unreachable

switch-segment41:                                 ; preds = %switch-segment35
  %23 = load float* @x
  %24 = load float* @x
  %25 = fmul float %23, %24, !gla.precision !9
  %26 = load float* @x
  %27 = fmul float %25, %26, !gla.precision !9
  %28 = load float* %f
  %f44 = fadd float %28, %27, !gla.precision !9
  store float %f44, float* %f
  br label %switch-merge43

switch-segment42:                                 ; preds = %switch-segment35
  %29 = load float* @x
  %30 = load float* @x
  %31 = fmul float %29, %30, !gla.precision !9
  %32 = load float* %f
  %f46 = fadd float %32, %31, !gla.precision !9
  store float %f46, float* %f
  br label %switch-merge43

switch-merge43:                                   ; preds = %switch-segment42, %switch-segment41, %switch-segment35
  br label %switch-merge37

post-switch-break45:                              ; No predecessors!
  unreachable

post-switch-break47:                              ; No predecessors!
  unreachable

post-switch-break48:                              ; No predecessors!
  unreachable

post-switch-break51:                              ; No predecessors!
  unreachable

loop-header:                                      ; preds = %ifmerge77, %switch-merge37
  %33 = load i32* %i
  %34 = icmp slt i32 %33, 10
  %35 = xor i1 %34, true
  br i1 %35, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge80

post-loop-break:                                  ; No predecessors!
  unreachable

ifmerge:                                          ; preds = %loop-header
  %36 = load i32 addrspace(2)* @c, !gla.uniform !1
  switch i32 %36, label %switch-segment54 [
    i32 1, label %switch-segment52
    i32 2, label %switch-segment53
  ]

switch-segment52:                                 ; preds = %ifmerge
  %37 = load float* @x
  %f56 = call float @llvm.gla.fSin.f32.f32(float %37), !gla.precision !9
  %38 = load float* %f
  %f57 = fadd float %38, %f56, !gla.precision !9
  store float %f57, float* %f
  store i32 20, i32* %j
  br label %loop-header58

switch-segment53:                                 ; preds = %ifmerge
  %39 = load float* @x
  %f68 = call float @llvm.gla.fCos.f32.f32(float %39), !gla.precision !9
  %40 = load float* %f
  %f69 = fadd float %40, %f68, !gla.precision !9
  store float %f69, float* %f
  br label %switch-merge55

switch-segment54:                                 ; preds = %ifmerge
  %41 = load float* @x
  %f72 = call float @llvm.gla.fTan.f32.f32(float %41), !gla.precision !9
  %42 = load float* %f
  %f73 = fadd float %42, %f72, !gla.precision !9
  store float %f73, float* %f
  br label %switch-merge55

switch-merge55:                                   ; preds = %switch-segment54, %switch-segment53, %loop-merge
  %43 = load float* %f
  %44 = fcmp olt float %43, 0x400B70A3E0000000
  br i1 %44, label %then75, label %ifmerge77

loop-header58:                                    ; preds = %ifmerge65, %switch-segment52
  %45 = load i32* %j
  %46 = icmp slt i32 %45, 30
  %47 = xor i1 %46, true
  br i1 %47, label %then59, label %ifmerge61

then59:                                           ; preds = %loop-header58
  br label %loop-merge

post-loop-break60:                                ; No predecessors!
  unreachable

ifmerge61:                                        ; preds = %loop-header58
  %48 = load float* %f
  %f62 = fadd float %48, 1.000000e+00, !gla.precision !9
  store float %f62, float* %f
  %49 = load float* %f
  %50 = fcmp olt float %49, 0x40590CCCC0000000
  br i1 %50, label %then63, label %ifmerge65

then63:                                           ; preds = %ifmerge61
  br label %loop-merge

post-loop-break64:                                ; No predecessors!
  unreachable

ifmerge65:                                        ; preds = %ifmerge61
  %51 = load i32* %j
  %j66 = add i32 %51, 1, !gla.precision !9
  store i32 %j66, i32* %j
  br label %loop-header58

post-loop-continue:                               ; No predecessors!
  unreachable

loop-merge:                                       ; preds = %then63, %then59
  br label %switch-merge55

post-switch-break67:                              ; No predecessors!
  unreachable

post-switch-break70:                              ; No predecessors!
  unreachable

post-switch-break71:                              ; No predecessors!
  unreachable

post-switch-break74:                              ; No predecessors!
  unreachable

then75:                                           ; preds = %switch-merge55
  br label %loop-merge80

post-loop-break76:                                ; No predecessors!
  unreachable

ifmerge77:                                        ; preds = %switch-merge55
  %52 = load i32* %i
  %i78 = add i32 %52, 1, !gla.precision !9
  store i32 %i78, i32* %i
  br label %loop-header

post-loop-continue79:                             ; No predecessors!
  unreachable

loop-merge80:                                     ; preds = %then75, %then
  %53 = load i32 addrspace(2)* @c, !gla.uniform !1
  switch i32 %53, label %switch-merge83 [
    i32 1, label %switch-segment81
    i32 2, label %switch-segment82
  ]

switch-segment81:                                 ; preds = %loop-merge80
  %54 = load float* @x
  %f84 = call float @llvm.gla.fSin.f32.f32(float %54), !gla.precision !9
  %55 = load float* %f
  %f85 = fadd float %55, %f84, !gla.precision !9
  store float %f85, float* %f
  br label %switch-merge83

switch-segment82:                                 ; preds = %loop-merge80
  br label %switch-merge83

switch-merge83:                                   ; preds = %switch-segment82, %switch-segment81, %loop-merge80
  %56 = load float* %f
  %57 = load i32* %local
  %58 = sitofp i32 %57 to float, !gla.precision !9
  %color = fadd float %56, %58, !gla.precision !9
  store float %color, float* @color
  %param90 = load <4 x float> addrspace(2)* @v, !gla.uniform !4
  store <4 x float> %param90, <4 x float>* %param
  %param8891 = load <4 x float> addrspace(2)* @v, !gla.uniform !4
  store <4 x float> %param8891, <4 x float>* %param88
  %param8992 = load i32 addrspace(2)* @c, !gla.uniform !1
  store i32 %param8992, i32* %param89
  %59 = call <4 x float> @"foo1(vf4;vf4;i1;"(<4 x float>* %param, <4 x float>* %param88, i32* %param89)
  %60 = extractelement <4 x float> %59, i32 1, !gla.precision !9
  %61 = load float* @color
  %color93 = fadd float %61, %60, !gla.precision !9
  store float %color93, float* @color
  %param9497 = load <4 x float> addrspace(2)* @v, !gla.uniform !4
  store <4 x float> %param9497, <4 x float>* %param94
  %param9598 = load <4 x float> addrspace(2)* @v, !gla.uniform !4
  store <4 x float> %param9598, <4 x float>* %param95
  %param9699 = load i32 addrspace(2)* @c, !gla.uniform !1
  store i32 %param9699, i32* %param96
  %62 = call <4 x float> @"foo2(vf4;vf4;i1;"(<4 x float>* %param94, <4 x float>* %param95, i32* %param96)
  %63 = extractelement <4 x float> %62, i32 2, !gla.precision !9
  %64 = load float* @color
  %color100 = fadd float %64, %63, !gla.precision !9
  store float %color100, float* @color
  br label %stage-epilogue

post-switch-break86:                              ; No predecessors!
  unreachable

post-switch-break87:                              ; No predecessors!
  unreachable

stage-epilogue:                                   ; preds = %switch-merge83
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc <4 x float> @"foo1(vf4;vf4;i1;"(<4 x float>*, <4 x float>*, i32*) #0 {
entry:
  %3 = load i32* %2
  switch i32 %3, label %switch-merge [
    i32 0, label %switch-segment
    i32 2, label %switch-segment1
    i32 1, label %switch-segment1
    i32 3, label %switch-segment2
  ]

switch-segment:                                   ; preds = %entry
  %4 = load <4 x float>* %0
  ret <4 x float> %4

switch-segment1:                                  ; preds = %entry, %entry
  %5 = load <4 x float>* %1
  ret <4 x float> %5

switch-segment2:                                  ; preds = %entry
  %6 = load <4 x float>* %0
  %7 = load <4 x float>* %1
  %8 = fmul <4 x float> %6, %7, !gla.precision !9
  ret <4 x float> %8

switch-merge:                                     ; preds = %entry
  ret <4 x float> zeroinitializer

post-return:                                      ; No predecessors!
  unreachable

post-return3:                                     ; No predecessors!
  unreachable

post-return4:                                     ; No predecessors!
  unreachable

post-return5:                                     ; No predecessors!
  unreachable
}

; Function Attrs: alwaysinline
define internal fastcc <4 x float> @"foo2(vf4;vf4;i1;"(<4 x float>*, <4 x float>*, i32*) #0 {
entry:
  %3 = load i32* %2
  switch i32 %3, label %switch-merge [
    i32 0, label %switch-segment
    i32 2, label %switch-segment1
    i32 1, label %switch-segment2
    i32 3, label %switch-segment3
  ]

switch-segment:                                   ; preds = %entry
  %4 = load <4 x float>* %0
  ret <4 x float> %4

switch-segment1:                                  ; preds = %entry
  ret <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>

switch-segment2:                                  ; preds = %entry
  %5 = load <4 x float>* %1
  ret <4 x float> %5

switch-segment3:                                  ; preds = %entry
  %6 = load <4 x float>* %0
  %7 = load <4 x float>* %1
  %8 = fmul <4 x float> %6, %7, !gla.precision !9
  ret <4 x float> %8

switch-merge:                                     ; preds = %entry
  ret <4 x float> zeroinitializer

post-return:                                      ; No predecessors!
  unreachable

post-return4:                                     ; No predecessors!
  unreachable

post-return5:                                     ; No predecessors!
  unreachable

post-return6:                                     ; No predecessors!
  unreachable

post-return7:                                     ; No predecessors!
  unreachable
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.fSin.f32.f32(float) #1

; Function Attrs: nounwind readnone
declare float @llvm.gla.fCos.f32.f32(float) #1

; Function Attrs: nounwind readnone
declare float @llvm.gla.fTan.f32.f32(float) #1

attributes #0 = { alwaysinline }
attributes #1 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3, !4}
!gla.inputs = !{!5}
!gla.outputs = !{!7}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"c", i32 12, i32* @c_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 2, i32 1024, null}
!3 = metadata !{metadata !"d", i32 12, i32* @d_typeProxy, metadata !2}
!4 = metadata !{metadata !"v", i32 12, <4 x float>* @v_typeProxy, metadata !2}
!5 = metadata !{metadata !"x", i32 1, float* @x_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 2, i32 1024, null, i32 1}
!7 = metadata !{metadata !"color", i32 7, float* @color_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 2, i32 1025, null, i32 0}
!9 = metadata !{i32 2}


Bottom IR:
; ModuleID = 'Glslang'

@c = external addrspace(2) constant i32
@x = global float 0.000000e+00
@d = external addrspace(2) constant i32
@color = global float 0.000000e+00
@v = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %local1 = load i32 addrspace(2)* @c, align 4, !gla.uniform !1
  %local2 = add i32 %local1, 1, !gla.precision !9
  switch i32 %local1, label %switch-segment4 [
    i32 1, label %switch-segment
    i32 2, label %switch-segment3
  ]

switch-segment:                                   ; preds = %entry
  %0 = load float* @x, align 4
  %f6 = call float @llvm.gla.fSin.f32.f32(float %0), !gla.precision !9
  br label %switch-merge

switch-segment3:                                  ; preds = %entry
  %1 = load float* @x, align 4
  %f8 = call float @llvm.gla.fCos.f32.f32(float %1), !gla.precision !9
  br label %switch-merge

switch-segment4:                                  ; preds = %entry
  %2 = load float* @x, align 4
  %f11 = call float @llvm.gla.fTan.f32.f32(float %2), !gla.precision !9
  br label %switch-merge

switch-merge:                                     ; preds = %switch-segment4, %switch-segment3, %switch-segment
  %3 = phi float [ %2, %switch-segment4 ], [ %1, %switch-segment3 ], [ %0, %switch-segment ]
  %f.0 = phi float [ %f11, %switch-segment4 ], [ %f8, %switch-segment3 ], [ %f6, %switch-segment ]
  switch i32 %local1, label %switch-segment15 [
    i32 1, label %switch-segment13
    i32 2, label %switch-segment14
  ]

switch-segment13:                                 ; preds = %switch-merge
  %f17 = call float @llvm.gla.fSin.f32.f32(float %3), !gla.precision !9
  %f18 = fadd float %f.0, %f17, !gla.precision !9
  br label %switch-segment14

switch-segment14:                                 ; preds = %switch-segment13, %switch-merge
  %f.1 = phi float [ %f.0, %switch-merge ], [ %f18, %switch-segment13 ]
  %f19 = call float @llvm.gla.fCos.f32.f32(float %3), !gla.precision !9
  %f20 = fadd float %f.1, %f19, !gla.precision !9
  br label %switch-merge16

switch-segment15:                                 ; preds = %switch-merge
  %f22 = call float @llvm.gla.fTan.f32.f32(float %3), !gla.precision !9
  %f23 = fadd float %f.0, %f22, !gla.precision !9
  br label %switch-merge16

switch-merge16:                                   ; preds = %switch-segment15, %switch-segment14
  %f.2 = phi float [ %f23, %switch-segment15 ], [ %f20, %switch-segment14 ]
  switch i32 %local1, label %switch-merge27 [
    i32 1, label %switch-segment25
    i32 2, label %switch-segment26
  ]

switch-segment25:                                 ; preds = %switch-merge16
  %f28 = call float @llvm.gla.fSin.f32.f32(float %3), !gla.precision !9
  %f29 = fadd float %f.2, %f28, !gla.precision !9
  br label %switch-merge27

switch-segment26:                                 ; preds = %switch-merge16
  %f31 = call float @llvm.gla.fCos.f32.f32(float %3), !gla.precision !9
  %f32 = fadd float %f.2, %f31, !gla.precision !9
  br label %switch-merge27

switch-merge27:                                   ; preds = %switch-segment26, %switch-segment25, %switch-merge16
  %f.3 = phi float [ %f.2, %switch-merge16 ], [ %f32, %switch-segment26 ], [ %f29, %switch-segment25 ]
  switch i32 %local1, label %switch-segment36 [
    i32 1, label %switch-segment34
    i32 2, label %switch-segment35
  ]

switch-segment34:                                 ; preds = %switch-merge27
  %f38 = call float @llvm.gla.fSin.f32.f32(float %3), !gla.precision !9
  %f39 = fadd float %f.3, %f38, !gla.precision !9
  br label %switch-merge37

switch-segment35:                                 ; preds = %switch-merge27
  %4 = load i32 addrspace(2)* @d, align 4, !gla.uniform !3
  switch i32 %4, label %switch-merge43 [
    i32 1, label %switch-segment41
    i32 2, label %switch-segment42
  ]

switch-segment36:                                 ; preds = %switch-merge27
  %f49 = call float @llvm.gla.fTan.f32.f32(float %3), !gla.precision !9
  %f50 = fadd float %f.3, %f49, !gla.precision !9
  br label %switch-merge37

switch-merge37:                                   ; preds = %switch-segment36, %switch-merge43, %switch-segment34
  %f.4 = phi float [ %f50, %switch-segment36 ], [ %f.5, %switch-merge43 ], [ %f39, %switch-segment34 ]
  %f72 = call float @llvm.gla.fTan.f32.f32(float %3), !gla.precision !9
  %f56 = call float @llvm.gla.fSin.f32.f32(float %3), !gla.precision !9
  %f68 = call float @llvm.gla.fCos.f32.f32(float %3), !gla.precision !9
  br label %loop-header

switch-segment41:                                 ; preds = %switch-segment35
  %5 = fmul float %3, %3, !gla.precision !9
  %6 = fmul float %3, %5, !gla.precision !9
  %f44 = fadd float %f.3, %6, !gla.precision !9
  br label %switch-merge43

switch-segment42:                                 ; preds = %switch-segment35
  %7 = fmul float %3, %3, !gla.precision !9
  %f46 = fadd float %f.3, %7, !gla.precision !9
  br label %switch-merge43

switch-merge43:                                   ; preds = %switch-segment42, %switch-segment41, %switch-segment35
  %f.5 = phi float [ %f.3, %switch-segment35 ], [ %f46, %switch-segment42 ], [ %f44, %switch-segment41 ]
  br label %switch-merge37

loop-header:                                      ; preds = %switch-merge55, %switch-merge37
  %i.0 = phi i32 [ 0, %switch-merge37 ], [ %i78, %switch-merge55 ]
  %f.6 = phi float [ %f.4, %switch-merge37 ], [ %f.7, %switch-merge55 ]
  %8 = icmp sgt i32 %i.0, 9
  br i1 %8, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge80

ifmerge:                                          ; preds = %loop-header
  switch i32 %local1, label %switch-segment54 [
    i32 1, label %switch-segment52
    i32 2, label %switch-segment53
  ]

switch-segment52:                                 ; preds = %ifmerge
  %f57 = fadd float %f.6, %f56, !gla.precision !9
  br label %loop-header58

switch-segment53:                                 ; preds = %ifmerge
  %f69 = fadd float %f.6, %f68, !gla.precision !9
  br label %switch-merge55

switch-segment54:                                 ; preds = %ifmerge
  %f73 = fadd float %f.6, %f72, !gla.precision !9
  br label %switch-merge55

switch-merge55:                                   ; preds = %switch-segment54, %switch-segment53, %loop-merge
  %f.7 = phi float [ %f73, %switch-segment54 ], [ %f69, %switch-segment53 ], [ %f.9, %loop-merge ]
  %9 = fcmp olt float %f.7, 0x400B70A3E0000000
  %i78 = add i32 %i.0, 1, !gla.precision !9
  br i1 %9, label %then75, label %loop-header

loop-header58:                                    ; preds = %ifmerge61, %switch-segment52
  %j.0 = phi i32 [ 20, %switch-segment52 ], [ %j66, %ifmerge61 ]
  %f.8 = phi float [ %f57, %switch-segment52 ], [ %f62, %ifmerge61 ]
  %10 = icmp sgt i32 %j.0, 29
  br i1 %10, label %then59, label %ifmerge61

then59:                                           ; preds = %loop-header58
  br label %loop-merge

ifmerge61:                                        ; preds = %loop-header58
  %f62 = fadd float %f.8, 1.000000e+00, !gla.precision !9
  %11 = fcmp olt float %f62, 0x40590CCCC0000000
  %j66 = add i32 %j.0, 1, !gla.precision !9
  br i1 %11, label %then63, label %loop-header58

then63:                                           ; preds = %ifmerge61
  br label %loop-merge

loop-merge:                                       ; preds = %then63, %then59
  %f.9 = phi float [ %f.8, %then59 ], [ %f62, %then63 ]
  br label %switch-merge55

then75:                                           ; preds = %switch-merge55
  br label %loop-merge80

loop-merge80:                                     ; preds = %then75, %then
  %f.10 = phi float [ %f.6, %then ], [ %f.7, %then75 ]
  switch i32 %local1, label %switch-merge83 [
    i32 1, label %switch-segment81
    i32 2, label %switch-segment82
  ]

switch-segment81:                                 ; preds = %loop-merge80
  %f85 = fadd float %f.10, %f56, !gla.precision !9
  br label %switch-merge83

switch-segment82:                                 ; preds = %loop-merge80
  br label %switch-merge83

switch-merge83:                                   ; preds = %switch-segment82, %switch-segment81, %loop-merge80
  %f.11 = phi float [ %f.10, %loop-merge80 ], [ %f.10, %switch-segment82 ], [ %f85, %switch-segment81 ]
  %12 = sitofp i32 %local2 to float, !gla.precision !9
  %color = fadd float %12, %f.11, !gla.precision !9
  store float %color, float* @color, align 4
  %param90 = load <4 x float> addrspace(2)* @v, align 16, !gla.uniform !4
  switch i32 %local1, label %switch-merge.i [
    i32 0, label %switch-segment.i
    i32 2, label %switch-segment1.i
    i32 1, label %switch-segment1.i
    i32 3, label %switch-segment2.i
  ]

switch-segment.i:                                 ; preds = %switch-merge83
  br label %"foo1(vf4;vf4;i1;.exit"

switch-segment1.i:                                ; preds = %switch-merge83, %switch-merge83
  br label %"foo1(vf4;vf4;i1;.exit"

switch-segment2.i:                                ; preds = %switch-merge83
  %13 = fmul <4 x float> %param90, %param90, !gla.precision !9
  br label %"foo1(vf4;vf4;i1;.exit"

switch-merge.i:                                   ; preds = %switch-merge83
  br label %"foo1(vf4;vf4;i1;.exit"

"foo1(vf4;vf4;i1;.exit":                          ; preds = %switch-merge.i, %switch-segment2.i, %switch-segment1.i, %switch-segment.i
  %14 = phi <4 x float> [ %param90, %switch-segment.i ], [ %param90, %switch-segment1.i ], [ %13, %switch-segment2.i ], [ zeroinitializer, %switch-merge.i ]
  %15 = extractelement <4 x float> %14, i32 1, !gla.precision !9
  %color93 = fadd float %color, %15, !gla.precision !9
  store float %color93, float* @color, align 4
  switch i32 %local1, label %switch-merge.i104 [
    i32 0, label %switch-segment.i101
    i32 2, label %switch-segment1.i102
    i32 1, label %switch-segment2.i103
    i32 3, label %switch-segment3.i
  ]

switch-segment.i101:                              ; preds = %"foo1(vf4;vf4;i1;.exit"
  br label %"foo2(vf4;vf4;i1;.exit"

switch-segment1.i102:                             ; preds = %"foo1(vf4;vf4;i1;.exit"
  br label %"foo2(vf4;vf4;i1;.exit"

switch-segment2.i103:                             ; preds = %"foo1(vf4;vf4;i1;.exit"
  br label %"foo2(vf4;vf4;i1;.exit"

switch-segment3.i:                                ; preds = %"foo1(vf4;vf4;i1;.exit"
  %16 = fmul <4 x float> %param90, %param90, !gla.precision !9
  br label %"foo2(vf4;vf4;i1;.exit"

switch-merge.i104:                                ; preds = %"foo1(vf4;vf4;i1;.exit"
  br label %"foo2(vf4;vf4;i1;.exit"

"foo2(vf4;vf4;i1;.exit":                          ; preds = %switch-merge.i104, %switch-segment3.i, %switch-segment2.i103, %switch-segment1.i102, %switch-segment.i101
  %17 = phi <4 x float> [ %param90, %switch-segment.i101 ], [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %switch-segment1.i102 ], [ %param90, %switch-segment2.i103 ], [ %16, %switch-segment3.i ], [ zeroinitializer, %switch-merge.i104 ]
  %18 = extractelement <4 x float> %17, i32 2, !gla.precision !9
  %color100 = fadd float %color93, %18, !gla.precision !9
  store float %color100, float* @color, align 4
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %"foo2(vf4;vf4;i1;.exit"
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare float @llvm.gla.fSin.f32.f32(float) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fCos.f32.f32(float) #0

; Function Attrs: nounwind readnone
declare float @llvm.gla.fTan.f32.f32(float) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3, !4}
!gla.inputs = !{!5}
!gla.outputs = !{!7}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"c", i32 12, i32* @c_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 2, i32 1024, null}
!3 = metadata !{metadata !"d", i32 12, i32* @d_typeProxy, metadata !2}
!4 = metadata !{metadata !"v", i32 12, <4 x float>* @v_typeProxy, metadata !2}
!5 = metadata !{metadata !"x", i32 1, float* @x_typeProxy, metadata !6}
!6 = metadata !{i32 0, i32 2, i32 1024, null, i32 1}
!7 = metadata !{metadata !"color", i32 7, float* @color_typeProxy, metadata !8}
!8 = metadata !{i32 0, i32 2, i32 1025, null, i32 0}
!9 = metadata !{i32 2}

***Unsupported functionality: switch topology

***Unsupported functionality: switch topology

***Unsupported functionality: switch topology

***Unsupported functionality: switch topology

***Unsupported functionality: switch topology

***Unsupported functionality: switch topology
#version 300 es
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations
uniform mediump int c;
uniform mediump int d;
uniform mediump vec4 v;
in mediump float x;
out mediump float color;
const int C_1 = 1;
const int C_0 = 0;
const int C_9 = 9;
const int C_20 = 20;
const int C_29 = 29;
mediump float Lg_3;
const float C_1d0 = 1.0;
const float C_100d2 = 100.2;
const float C_3d43 = 3.43;
const vec4 C_vec4p0d0p = vec4(0.0);
const vec4 C_vec4p1d0p = vec4(1.0);

void main()
{
	float f;
	float f1;
	float f2;
	float f3;
	float f4;
	float f5;
	int i;
	float f6;
	float f7;
	int j;
	float f8;
	float f9;
	float fa;
	float fb;
	vec4 Lg_1;
	vec4 Lg_2;
	mediump int local = c + C_1;
	switch (c) {
		case 1:
		{
			mediump float H_0lhnah = sin(x);
			f = H_0lhnah;
			break;
			
		}
		case 2:
		{
			mediump float H_v86jke1 = cos(x);
			f = H_v86jke1;
			break;
			
		}
		default:
		{
			mediump float H_3c9cke1 = tan(x);
			f = H_3c9cke1;
			break;
			
		}
	}
	
	f1 = f;
	switch (c) {
		case 1:
		{
			mediump float H_0lhnahr = sin(x);
			mediump float H_wcnmtj1 = H_0lhnahr + f;
			f1 = H_wcnmtj1;
			
		}
		case 2:
		{
			mediump float H_v86jke1r = cos(x);
			mediump float H_t8w2cv = H_v86jke1r + f1;
			f2 = H_t8w2cv;
			break;
			
		}
		default:
		{
			mediump float H_3c9cke1r = tan(x);
			mediump float H_mtq1vr = H_3c9cke1r + f;
			f2 = H_mtq1vr;
			break;
			
		}
	}
	
	f3 = f2;
	switch (c) {
		case 1:
		{
			mediump float H_0lhnahrr = sin(x);
			mediump float H_27zftj = H_0lhnahrr + f2;
			f3 = H_27zftj;
			break;
			
		}
		case 2:
		{
			mediump float H_v86jke1rr = cos(x);
			mediump float H_o3mdae = H_v86jke1rr + f2;
			f3 = H_o3mdae;
			break;
			
		}
	}
	
	switch (c) {
		case 1:
		{
			mediump float H_0lhnahrrr = sin(x);
			mediump float H_hu2yrb = H_0lhnahrrr + f3;
			f4 = H_hu2yrb;
			break;
			
		}
		case 2:
		{
			f5 = f3;
			switch (d) {
				case 1:
				{
					mediump float H_hzby3e = x * x;
					mediump float H_dxsdny = H_hzby3e * x;
					mediump float H_eyk1vd = H_dxsdny + f3;
					f5 = H_eyk1vd;
					break;
					
				}
				case 2:
				{
					mediump float H_hzby3er = x * x;
					mediump float H_pzmj7i1 = H_hzby3er + f3;
					f5 = H_pzmj7i1;
					break;
					
				}
			}
			
			f4 = f5;
			default:
			{
				mediump float H_3c9cke1rr = tan(x);
				mediump float H_bmyrry = H_3c9cke1rr + f3;
				f4 = H_bmyrry;
				break;
				
			}
		}
		
		mediump float H_3c9cke1rrr = tan(x);
		mediump float H_0lhnahrrrr = sin(x);
		mediump float H_v86jke1rrr = cos(x);
		i = C_0;
		f6 = f4;
		while (i <= C_9) {
			switch (c) {
				case 1:
				{
					mediump float H_q4zp4f1 = H_0lhnahrrrr + f6;
					j = C_20;
					f8 = H_q4zp4f1;
					while (j <= C_29) {
						Lg_3 = f8 + C_1d0;
						bool H_93uqn1 = Lg_3 < C_100d2;
						mediump int H_l69nk4 = C_1 + j;
						if (H_93uqn1) {
							f9 = Lg_3;
							break;
							
						}
						break;
					}
					
					j = H_l69nk4;
					f8 = Lg_3;
				}
				
				f9 = f8;
				break;
				
			}
			f7 = f9;
			case 2:
			{
				mediump float H_sf4otx1 = H_v86jke1rrr + f6;
				f7 = H_sf4otx1;
				default:
				{
					mediump float H_ksdj391 = H_3c9cke1rrr + f6;
					f7 = H_ksdj391;
				}
				
				bool H_amefxf1 = f7 < C_3d43;
				mediump int H_o3goq3 = C_1 + i;
				if (H_amefxf1) {
					fa = f7;
					break;
				}
				
				i = H_o3goq3;
				f6 = f7;
			}
			
			fa = f6;
			fb = fa;
			switch (c) {
				case 1:
				{
					mediump float H_jyv82r1 = H_0lhnahrrrr + fa;
					fb = H_jyv82r1;
					break;
					
				}
				case 2:
				{
					fb = fa;
					break;
					
				}
			}
			
			mediump float H_13mhsn1 = float(local);
			mediump float color1 = H_13mhsn1 + fb;
			color = color1;
			switch (c) {
				case 0:
				{
					Lg_1 = v;
					break;
					
				}
				case 2:
				{
					Lg_1 = v;
					break;
					
				}
				case 1:
				{
					case 3:
					{
						mediump vec4 H_hno2sy = v * v;
						Lg_1 = H_hno2sy;
						break;
						
					}
					default:
					{
						Lg_1 = C_vec4p0d0p;
						break;
						
					}
				}
				
				mediump float color2 = Lg_1.y + color1;
				color = color2;
				switch (c) {
					case 0:
					{
						Lg_2 = v;
						break;
						
					}
					case 2:
					{
						Lg_2 = C_vec4p1d0p;
						break;
						
					}
					case 1:
					{
						Lg_2 = v;
						break;
						
					}
					case 3:
					{
						mediump vec4 H_hno2syr = v * v;
						Lg_2 = H_hno2syr;
						break;
						
					}
					default:
					{
						Lg_2 = C_vec4p0d0p;
						break;
						
					}
				}
				
				mediump float color3 = Lg_2.z + color2;
				color = color3;
				
			}
			
tempglsl.frag
ERROR: 0:144: 'default' : cannot be nested inside control flow 
ERROR: 0:178: 'H_l69nk4' : undeclared identifier 
ERROR: 0:178: 'assign' :  cannot convert from 'temp float' to 'temp mediump int'
ERROR: 0:187: 'case' : cannot be nested inside control flow 
ERROR: 0:191: 'default' : cannot be nested inside control flow 
ERROR: 0:244: 'case' : cannot be nested inside control flow 
ERROR: 0:251: 'default' : cannot be nested inside control flow 
ERROR: 0:300: '' :  syntax error
ERROR: 8 compilation errors.  No code generated.


