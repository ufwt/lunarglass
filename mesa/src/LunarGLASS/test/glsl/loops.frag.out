; ModuleID = 'Top'

@gl_MaxLights = internal global i32 8
@gl_MaxClipPlanes = internal global i32 8
@gl_MaxTextureUnits = internal global i32 2
@gl_MaxTextureCoords = internal global i32 4
@gl_MaxVertexAttribs = internal global i32 16
@gl_MaxVertexUniformComponents = internal global i32 512
@gl_MaxVaryingFloats = internal global i32 32
@gl_MaxVertexTextureImageUnits = internal global i32 0
@gl_MaxCombinedTextureImageUnits = internal global i32 2
@gl_MaxTextureImageUnits = internal global i32 2
@gl_MaxFragmentUniformComponents = internal global i32 64
@gl_MaxDrawBuffers = internal global i32 2
@d = external addrspace(1) global float
@bigColor = external addrspace(1) global <4 x float>
@Count = external addrspace(1) global i32
@bigColor2 = external addrspace(1) global <4 x float>
@bigColor3 = external addrspace(1) global <4 x float>
@d2 = external addrspace(1) global float
@bigColor4 = external addrspace(1) global <4 x float>
@d4 = external addrspace(1) global float
@bigColor5 = external addrspace(1) global <4 x float>
@d5 = external addrspace(1) global float
@d6 = external addrspace(1) global float
@bigColor6 = external addrspace(1) global <4 x float>
@d7 = external addrspace(1) global float
@bigColor7 = external addrspace(1) global <4 x float>
@bigColor8 = external addrspace(1) global <4 x float>
@d8 = external addrspace(1) global float
@gl_FragColor = internal global <4 x float> zeroinitializer

define void @main() {
entry:
  %assignment_tmp94 = alloca <4 x float>
  %assignment_tmp75 = alloca <4 x float>
  %assignment_tmp61 = alloca <4 x float>
  %assignment_tmp32 = alloca <4 x float>
  %assignment_tmp17 = alloca <4 x float>
  %assignment_tmp = alloca <4 x float>
  %color = alloca <4 x float>
  %i = alloca i32
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  store <4 x float> %BaseColor, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %ifmerge, %entry
  %0 = load <4 x float>* %color
  %1 = extractelement <4 x float> %0, i32 0
  %2 = load float addrspace(1)* @d
  %3 = fcmp oge float %1, %2
  br i1 %3, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loopjump:                                    ; No predecessors!
  br label %ifmerge

ifmerge:                                          ; preds = %post-loopjump, %loop-header
  %4 = load <4 x float>* %color
  %5 = load <4 x float> addrspace(1)* @bigColor
  %color1 = fadd <4 x float> %4, %5
  store <4 x float> %color1, <4 x float>* %color
  br label %loop-header

loop-merge:                                       ; preds = %then
  store i32 0, i32* %i
  br label %loop-header2

loop-header2:                                     ; preds = %ifmerge5, %loop-merge
  %6 = load i32* %i
  %7 = load i32 addrspace(1)* @Count
  %8 = icmp sge i32 %6, %7
  br i1 %8, label %then3, label %ifmerge5

then3:                                            ; preds = %loop-header2
  br label %loop-merge8

post-loopjump4:                                   ; No predecessors!
  br label %ifmerge5

ifmerge5:                                         ; preds = %post-loopjump4, %loop-header2
  %9 = load <4 x float>* %color
  %10 = load <4 x float> addrspace(1)* @bigColor2
  %color6 = fadd <4 x float> %9, %10
  store <4 x float> %color6, <4 x float>* %color
  %11 = load i32* %i
  %i7 = add i32 %11, 1
  store i32 %i7, i32* %i
  br label %loop-header2

loop-merge8:                                      ; preds = %then3
  br label %loop-header9

loop-header9:                                     ; preds = %ifmerge14, %loop-merge8
  %12 = load <4 x float>* %color
  %13 = load <4 x float> addrspace(1)* @bigColor3
  %assignment_tmp10 = fadd <4 x float> %12, %13
  store <4 x float> %assignment_tmp10, <4 x float>* %assignment_tmp
  %color11 = load <4 x float>* %assignment_tmp
  store <4 x float> %color11, <4 x float>* %color
  %14 = load <4 x float>* %assignment_tmp
  %15 = extractelement <4 x float> %14, i32 0
  %16 = load float addrspace(1)* @d2
  %17 = fcmp oge float %15, %16
  br i1 %17, label %then12, label %ifmerge14

then12:                                           ; preds = %loop-header9
  br label %loop-merge15

post-loopjump13:                                  ; No predecessors!
  br label %ifmerge14

ifmerge14:                                        ; preds = %post-loopjump13, %loop-header9
  br label %loop-header9

loop-merge15:                                     ; preds = %then12
  br label %loop-header16

loop-header16:                                    ; preds = %ifmerge29, %then20, %loop-merge15
  %18 = load <4 x float>* %color
  %19 = load <4 x float> addrspace(1)* @bigColor4
  %assignment_tmp1718 = fadd <4 x float> %18, %19
  store <4 x float> %assignment_tmp1718, <4 x float>* %assignment_tmp17
  %color19 = load <4 x float>* %assignment_tmp17
  store <4 x float> %color19, <4 x float>* %color
  %20 = load <4 x float>* %assignment_tmp17
  %21 = extractelement <4 x float> %20, i32 0
  %22 = load float addrspace(1)* @d4
  %23 = fcmp olt float %21, %22
  br i1 %23, label %then20, label %ifmerge22

then20:                                           ; preds = %loop-header16
  br label %loop-header16

post-loopjump21:                                  ; No predecessors!
  br label %ifmerge22

ifmerge22:                                        ; preds = %post-loopjump21, %loop-header16
  %24 = load <4 x float>* %assignment_tmp17
  %25 = extractelement <4 x float> %24, i32 1
  %26 = load float addrspace(1)* @d4
  %27 = fcmp olt float %25, %26
  br i1 %27, label %then23, label %else

then23:                                           ; preds = %ifmerge22
  %28 = load <4 x float>* %assignment_tmp17
  %29 = extractelement <4 x float> %28, i32 1
  %30 = load float addrspace(1)* @d4
  %31 = fadd float %29, %30
  %32 = load <4 x float>* %color
  %color24 = insertelement <4 x float> %32, float %31, i32 1
  store <4 x float> %color24, <4 x float>* %color
  br label %ifmerge26

else:                                             ; preds = %ifmerge22
  %33 = load <4 x float>* %color
  %34 = extractelement <4 x float> %33, i32 0
  %35 = load float addrspace(1)* @d4
  %36 = fadd float %34, %35
  %37 = load <4 x float>* %color
  %color25 = insertelement <4 x float> %37, float %36, i32 0
  store <4 x float> %color25, <4 x float>* %color
  br label %ifmerge26

ifmerge26:                                        ; preds = %else, %then23
  %38 = load <4 x float>* %color
  %39 = extractelement <4 x float> %38, i32 2
  %40 = load float addrspace(1)* @d4
  %41 = fcmp oge float %39, %40
  br i1 %41, label %then27, label %ifmerge29

then27:                                           ; preds = %ifmerge26
  br label %loop-merge30

post-loopjump28:                                  ; No predecessors!
  br label %ifmerge29

ifmerge29:                                        ; preds = %post-loopjump28, %ifmerge26
  br label %loop-header16

loop-merge30:                                     ; preds = %then27
  br label %loop-header31

loop-header31:                                    ; preds = %ifmerge40, %loop-merge30
  %42 = load <4 x float>* %color
  %43 = load <4 x float> addrspace(1)* @bigColor5
  %assignment_tmp3233 = fadd <4 x float> %42, %43
  store <4 x float> %assignment_tmp3233, <4 x float>* %assignment_tmp32
  %color34 = load <4 x float>* %assignment_tmp32
  store <4 x float> %color34, <4 x float>* %color
  %44 = load <4 x float>* %assignment_tmp32
  %45 = extractelement <4 x float> %44, i32 1
  %46 = load float addrspace(1)* @d5
  %47 = fcmp olt float %45, %46
  br i1 %47, label %then35, label %ifmerge37

then35:                                           ; preds = %loop-header31
  %48 = load <4 x float>* %assignment_tmp32
  %49 = extractelement <4 x float> %48, i32 1
  %50 = load float addrspace(1)* @d5
  %51 = fadd float %49, %50
  %52 = load <4 x float>* %color
  %color36 = insertelement <4 x float> %52, float %51, i32 1
  store <4 x float> %color36, <4 x float>* %color
  br label %ifmerge37

ifmerge37:                                        ; preds = %then35, %loop-header31
  %53 = load <4 x float>* %color
  %54 = extractelement <4 x float> %53, i32 0
  %55 = load float addrspace(1)* @d5
  %56 = fcmp oge float %54, %55
  br i1 %56, label %then38, label %ifmerge40

then38:                                           ; preds = %ifmerge37
  br label %loop-merge41

post-loopjump39:                                  ; No predecessors!
  br label %ifmerge40

ifmerge40:                                        ; preds = %post-loopjump39, %ifmerge37
  br label %loop-header31

loop-merge41:                                     ; preds = %then38
  %57 = load <4 x float>* %color
  %58 = extractelement <4 x float> %57, i32 0
  %59 = load float addrspace(1)* @d6
  %60 = fcmp olt float %58, %59
  br i1 %60, label %then42, label %else49

then42:                                           ; preds = %loop-merge41
  br label %loop-header43

loop-header43:                                    ; preds = %ifmerge46, %then42
  %61 = load <4 x float>* %color
  %62 = extractelement <4 x float> %61, i32 1
  %63 = load float addrspace(1)* @d6
  %64 = fcmp oge float %62, %63
  br i1 %64, label %then44, label %ifmerge46

then44:                                           ; preds = %loop-header43
  br label %loop-merge48

post-loopjump45:                                  ; No predecessors!
  br label %ifmerge46

ifmerge46:                                        ; preds = %post-loopjump45, %loop-header43
  %65 = load <4 x float>* %color
  %66 = load <4 x float> addrspace(1)* @bigColor6
  %color47 = fadd <4 x float> %65, %66
  store <4 x float> %color47, <4 x float>* %color
  br label %loop-header43

loop-merge48:                                     ; preds = %then44
  br label %ifmerge56

else49:                                           ; preds = %loop-merge41
  br label %loop-header50

loop-header50:                                    ; preds = %ifmerge53, %else49
  %67 = load <4 x float>* %color
  %68 = extractelement <4 x float> %67, i32 2
  %69 = load float addrspace(1)* @d6
  %70 = fcmp oge float %68, %69
  br i1 %70, label %then51, label %ifmerge53

then51:                                           ; preds = %loop-header50
  br label %loop-merge55

post-loopjump52:                                  ; No predecessors!
  br label %ifmerge53

ifmerge53:                                        ; preds = %post-loopjump52, %loop-header50
  %71 = load <4 x float>* %color
  %72 = extractelement <4 x float> %71, i32 2
  %73 = load <4 x float> addrspace(1)* @bigColor6
  %74 = extractelement <4 x float> %73, i32 2
  %75 = fadd float %72, %74
  %76 = load <4 x float>* %color
  %color54 = insertelement <4 x float> %76, float %75, i32 2
  store <4 x float> %color54, <4 x float>* %color
  br label %loop-header50

loop-merge55:                                     ; preds = %then51
  br label %ifmerge56

ifmerge56:                                        ; preds = %loop-merge55, %loop-merge48
  br label %loop-header57

loop-header57:                                    ; preds = %ifmerge67, %ifmerge56
  %77 = load float addrspace(1)* @d7
  %78 = fcmp olt float %77, 0.000000e+00
  br i1 %78, label %then58, label %ifmerge60

then58:                                           ; preds = %loop-header57
  br label %loop-merge70

post-loopjump59:                                  ; No predecessors!
  br label %ifmerge60

ifmerge60:                                        ; preds = %post-loopjump59, %loop-header57
  %79 = load <4 x float>* %color
  %80 = load <4 x float> addrspace(1)* @bigColor7
  %assignment_tmp6162 = fadd <4 x float> %79, %80
  store <4 x float> %assignment_tmp6162, <4 x float>* %assignment_tmp61
  %color63 = load <4 x float>* %assignment_tmp61
  store <4 x float> %color63, <4 x float>* %color
  %81 = load float addrspace(1)* @d7
  %82 = fcmp olt float %81, 1.000000e+00
  br i1 %82, label %then64, label %ifmerge67

then64:                                           ; preds = %ifmerge60
  %83 = load <4 x float>* %assignment_tmp61
  %84 = extractelement <4 x float> %83, i32 2
  %85 = fadd float %84, 1.000000e+00
  %86 = load <4 x float>* %color
  %color65 = insertelement <4 x float> %86, float %85, i32 2
  store <4 x float> %color65, <4 x float>* %color
  br label %loop-merge70

post-loopjump66:                                  ; No predecessors!
  br label %ifmerge67

ifmerge67:                                        ; preds = %post-loopjump66, %ifmerge60
  %87 = load <4 x float>* %color
  %BaseColor68 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  %color69 = fadd <4 x float> %87, %BaseColor68
  store <4 x float> %color69, <4 x float>* %color
  br label %loop-header57

loop-merge70:                                     ; preds = %then64, %then58
  br label %loop-header71

loop-header71:                                    ; preds = %ifmerge86, %loop-merge70
  %88 = load float addrspace(1)* @d7
  %89 = fcmp olt float %88, 0.000000e+00
  br i1 %89, label %then72, label %ifmerge74

then72:                                           ; preds = %loop-header71
  br label %loop-merge89

post-loopjump73:                                  ; No predecessors!
  br label %ifmerge74

ifmerge74:                                        ; preds = %post-loopjump73, %loop-header71
  %90 = load <4 x float>* %color
  %91 = load <4 x float> addrspace(1)* @bigColor7
  %assignment_tmp7576 = fadd <4 x float> %90, %91
  store <4 x float> %assignment_tmp7576, <4 x float>* %assignment_tmp75
  %color77 = load <4 x float>* %assignment_tmp75
  store <4 x float> %color77, <4 x float>* %color
  %92 = load float addrspace(1)* @d7
  %93 = fcmp olt float %92, 1.000000e+00
  br i1 %93, label %then78, label %ifmerge86

then78:                                           ; preds = %ifmerge74
  %94 = load <4 x float>* %assignment_tmp75
  %95 = extractelement <4 x float> %94, i32 2
  %96 = fadd float %95, 1.000000e+00
  %97 = load <4 x float>* %color
  %color79 = insertelement <4 x float> %97, float %96, i32 2
  store <4 x float> %color79, <4 x float>* %color
  %98 = load float addrspace(1)* @d7
  %99 = fcmp olt float %98, 2.000000e+00
  br i1 %99, label %then80, label %else82

then80:                                           ; preds = %then78
  %100 = load <4 x float>* %color
  %101 = extractelement <4 x float> %100, i32 1
  %102 = fadd float %101, 1.000000e+00
  %103 = load <4 x float>* %color
  %color81 = insertelement <4 x float> %103, float %102, i32 1
  store <4 x float> %color81, <4 x float>* %color
  br label %ifmerge84

else82:                                           ; preds = %then78
  %104 = load <4 x float>* %color
  %105 = extractelement <4 x float> %104, i32 0
  %106 = fadd float %105, 1.000000e+00
  %107 = load <4 x float>* %color
  %color83 = insertelement <4 x float> %107, float %106, i32 0
  store <4 x float> %color83, <4 x float>* %color
  br label %ifmerge84

ifmerge84:                                        ; preds = %else82, %then80
  br label %loop-merge89

post-loopjump85:                                  ; No predecessors!
  br label %ifmerge86

ifmerge86:                                        ; preds = %post-loopjump85, %ifmerge74
  %108 = load <4 x float>* %color
  %BaseColor87 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  %color88 = fadd <4 x float> %108, %BaseColor87
  store <4 x float> %color88, <4 x float>* %color
  br label %loop-header71

loop-merge89:                                     ; preds = %ifmerge84, %then72
  br label %loop-header90

loop-header90:                                    ; preds = %ifmerge101, %then98, %loop-merge89
  %109 = load <4 x float>* %color
  %110 = extractelement <4 x float> %109, i32 0
  %111 = fcmp oge float %110, 1.000000e+01
  br i1 %111, label %then91, label %ifmerge93

then91:                                           ; preds = %loop-header90
  br label %loop-merge103

post-loopjump92:                                  ; No predecessors!
  br label %ifmerge93

ifmerge93:                                        ; preds = %post-loopjump92, %loop-header90
  %112 = load <4 x float>* %color
  %113 = load <4 x float> addrspace(1)* @bigColor8
  %assignment_tmp9495 = fadd <4 x float> %112, %113
  store <4 x float> %assignment_tmp9495, <4 x float>* %assignment_tmp94
  %color96 = load <4 x float>* %assignment_tmp94
  store <4 x float> %color96, <4 x float>* %color
  %114 = load <4 x float>* %assignment_tmp94
  %115 = extractelement <4 x float> %114, i32 2
  %116 = load float addrspace(1)* @d8
  %117 = fcmp olt float %115, %116
  br i1 %117, label %then97, label %ifmerge101

then97:                                           ; preds = %ifmerge93
  %118 = load <4 x float>* %assignment_tmp94
  %119 = extractelement <4 x float> %118, i32 3
  %120 = load float addrspace(1)* @d6
  %121 = fcmp olt float %119, %120
  br i1 %121, label %then98, label %ifmerge100

then98:                                           ; preds = %then97
  br label %loop-header90

post-loopjump99:                                  ; No predecessors!
  br label %ifmerge100

ifmerge100:                                       ; preds = %post-loopjump99, %then97
  br label %ifmerge101

ifmerge101:                                       ; preds = %ifmerge100, %ifmerge93
  %122 = load <4 x float>* %assignment_tmp94
  %123 = extractelement <4 x float> %122, i32 1
  %124 = load <4 x float> addrspace(1)* @bigColor8
  %125 = extractelement <4 x float> %124, i32 0
  %126 = fadd float %123, %125
  %127 = load <4 x float>* %color
  %color102 = insertelement <4 x float> %127, float %126, i32 1
  store <4 x float> %color102, <4 x float>* %color
  br label %loop-header90

loop-merge103:                                    ; preds = %then91
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  %128 = load <4 x float>* @gl_FragColor
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %128)
  ret void
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind
; ModuleID = 'Top'

@d = external addrspace(1) global float
@bigColor = external addrspace(1) global <4 x float>
@Count = external addrspace(1) global i32
@bigColor2 = external addrspace(1) global <4 x float>
@bigColor3 = external addrspace(1) global <4 x float>
@d2 = external addrspace(1) global float
@bigColor4 = external addrspace(1) global <4 x float>
@d4 = external addrspace(1) global float
@bigColor5 = external addrspace(1) global <4 x float>
@d5 = external addrspace(1) global float
@d6 = external addrspace(1) global float
@bigColor6 = external addrspace(1) global <4 x float>
@d7 = external addrspace(1) global float
@bigColor7 = external addrspace(1) global <4 x float>
@bigColor8 = external addrspace(1) global <4 x float>
@d8 = external addrspace(1) global float

define void @main() {
entry:
  %BaseColor = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  br label %loop-header

loop-header:                                      ; preds = %ifmerge, %entry
  %color.0 = phi <4 x float> [ %BaseColor, %entry ], [ %color1, %ifmerge ]
  %0 = extractelement <4 x float> %color.0, i32 0
  %1 = load float addrspace(1)* @d
  %2 = fcmp oge float %0, %1
  br i1 %2, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-header2

ifmerge:                                          ; preds = %loop-header
  %3 = load <4 x float> addrspace(1)* @bigColor
  %color1 = fadd <4 x float> %color.0, %3
  br label %loop-header

loop-header2:                                     ; preds = %ifmerge5, %then
  %color.1 = phi <4 x float> [ %color.0, %then ], [ %color6, %ifmerge5 ]
  %i.0 = phi i32 [ 0, %then ], [ %i7, %ifmerge5 ]
  %4 = load i32 addrspace(1)* @Count
  %5 = icmp sge i32 %i.0, %4
  br i1 %5, label %then3, label %ifmerge5

then3:                                            ; preds = %loop-header2
  br label %loop-header9

ifmerge5:                                         ; preds = %loop-header2
  %6 = load <4 x float> addrspace(1)* @bigColor2
  %color6 = fadd <4 x float> %color.1, %6
  %i7 = add i32 %i.0, 1
  br label %loop-header2

loop-header9:                                     ; preds = %ifmerge14, %then3
  %color.2 = phi <4 x float> [ %color.1, %then3 ], [ %assignment_tmp10, %ifmerge14 ]
  %7 = load <4 x float> addrspace(1)* @bigColor3
  %assignment_tmp10 = fadd <4 x float> %color.2, %7
  %8 = extractelement <4 x float> %assignment_tmp10, i32 0
  %9 = load float addrspace(1)* @d2
  %10 = fcmp oge float %8, %9
  br i1 %10, label %then12, label %ifmerge14

then12:                                           ; preds = %loop-header9
  br label %loop-header16

ifmerge14:                                        ; preds = %loop-header9
  br label %loop-header9

loop-header16:                                    ; preds = %loop-header16.backedge, %then12
  %color.3 = phi <4 x float> [ %assignment_tmp10, %then12 ], [ %color.3.be, %loop-header16.backedge ]
  %11 = load <4 x float> addrspace(1)* @bigColor4
  %assignment_tmp1718 = fadd <4 x float> %color.3, %11
  %12 = extractelement <4 x float> %assignment_tmp1718, i32 0
  %13 = load float addrspace(1)* @d4
  %14 = fcmp olt float %12, %13
  br i1 %14, label %then20, label %ifmerge22

then20:                                           ; preds = %loop-header16
  br label %loop-header16.backedge

loop-header16.backedge:                           ; preds = %then20, %ifmerge29
  %color.3.be = phi <4 x float> [ %assignment_tmp1718, %then20 ], [ %color.4, %ifmerge29 ]
  br label %loop-header16

ifmerge22:                                        ; preds = %loop-header16
  %15 = extractelement <4 x float> %assignment_tmp1718, i32 1
  %16 = fcmp olt float %15, %13
  br i1 %16, label %then23, label %else

then23:                                           ; preds = %ifmerge22
  %17 = fadd float %15, %13
  %18 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp1718, i32 2, float 0.000000e+00, i32 -1, float %17, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge26

else:                                             ; preds = %ifmerge22
  %19 = fadd float %12, %13
  %20 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp1718, i32 1, float %19, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge26

ifmerge26:                                        ; preds = %else, %then23
  %color.4 = phi <4 x float> [ %18, %then23 ], [ %20, %else ]
  %21 = extractelement <4 x float> %color.4, i32 2
  %22 = fcmp oge float %21, %13
  br i1 %22, label %then27, label %ifmerge29

then27:                                           ; preds = %ifmerge26
  br label %loop-header31

ifmerge29:                                        ; preds = %ifmerge26
  br label %loop-header16.backedge

loop-header31:                                    ; preds = %ifmerge40, %then27
  %color.5 = phi <4 x float> [ %color.4, %then27 ], [ %color.6, %ifmerge40 ]
  %23 = load <4 x float> addrspace(1)* @bigColor5
  %assignment_tmp3233 = fadd <4 x float> %color.5, %23
  %24 = extractelement <4 x float> %assignment_tmp3233, i32 1
  %25 = load float addrspace(1)* @d5
  %26 = fcmp olt float %24, %25
  br i1 %26, label %then35, label %ifmerge37

then35:                                           ; preds = %loop-header31
  %27 = fadd float %24, %25
  %28 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp3233, i32 2, float 0.000000e+00, i32 -1, float %27, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge37

ifmerge37:                                        ; preds = %then35, %loop-header31
  %color.6 = phi <4 x float> [ %28, %then35 ], [ %assignment_tmp3233, %loop-header31 ]
  %29 = extractelement <4 x float> %color.6, i32 0
  %30 = fcmp oge float %29, %25
  br i1 %30, label %then38, label %ifmerge40

then38:                                           ; preds = %ifmerge37
  %31 = load float addrspace(1)* @d6
  %32 = fcmp olt float %29, %31
  br i1 %32, label %then42, label %else49

ifmerge40:                                        ; preds = %ifmerge37
  br label %loop-header31

then42:                                           ; preds = %then38
  br label %loop-header43

loop-header43:                                    ; preds = %ifmerge46, %then42
  %color.7 = phi <4 x float> [ %color.6, %then42 ], [ %color47, %ifmerge46 ]
  %33 = extractelement <4 x float> %color.7, i32 1
  %34 = fcmp oge float %33, %31
  br i1 %34, label %then44, label %ifmerge46

then44:                                           ; preds = %loop-header43
  br label %ifmerge56

ifmerge46:                                        ; preds = %loop-header43
  %35 = load <4 x float> addrspace(1)* @bigColor6
  %color47 = fadd <4 x float> %color.7, %35
  br label %loop-header43

else49:                                           ; preds = %then38
  br label %loop-header50

loop-header50:                                    ; preds = %ifmerge53, %else49
  %color.9 = phi <4 x float> [ %color.6, %else49 ], [ %41, %ifmerge53 ]
  %36 = extractelement <4 x float> %color.9, i32 2
  %37 = fcmp oge float %36, %31
  br i1 %37, label %then51, label %ifmerge53

then51:                                           ; preds = %loop-header50
  br label %ifmerge56

ifmerge53:                                        ; preds = %loop-header50
  %38 = load <4 x float> addrspace(1)* @bigColor6
  %39 = extractelement <4 x float> %38, i32 2
  %40 = fadd float %36, %39
  %41 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %color.9, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %40, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header50

ifmerge56:                                        ; preds = %then51, %then44
  %42 = phi float [ %31, %then44 ], [ %31, %then51 ]
  %color.8 = phi <4 x float> [ %color.7, %then44 ], [ %color.9, %then51 ]
  br label %loop-header57

loop-header57:                                    ; preds = %ifmerge67, %ifmerge56
  %color.10 = phi <4 x float> [ %color.8, %ifmerge56 ], [ %color69, %ifmerge67 ]
  %43 = load float addrspace(1)* @d7
  %44 = fcmp olt float %43, 0.000000e+00
  br i1 %44, label %then58, label %ifmerge60

then58:                                           ; preds = %loop-header57
  br label %loop-merge70

ifmerge60:                                        ; preds = %loop-header57
  %45 = load <4 x float> addrspace(1)* @bigColor7
  %assignment_tmp6162 = fadd <4 x float> %color.10, %45
  %46 = fcmp olt float %43, 1.000000e+00
  br i1 %46, label %then64, label %ifmerge67

then64:                                           ; preds = %ifmerge60
  %47 = extractelement <4 x float> %assignment_tmp6162, i32 2
  %48 = fadd float %47, 1.000000e+00
  %49 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp6162, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %48, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-merge70

ifmerge67:                                        ; preds = %ifmerge60
  %BaseColor68 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  %color69 = fadd <4 x float> %assignment_tmp6162, %BaseColor68
  br label %loop-header57

loop-merge70:                                     ; preds = %then64, %then58
  %color.11 = phi <4 x float> [ %color.10, %then58 ], [ %49, %then64 ]
  br label %loop-header71

loop-header71:                                    ; preds = %ifmerge86, %loop-merge70
  %color.12 = phi <4 x float> [ %color.11, %loop-merge70 ], [ %color88, %ifmerge86 ]
  %50 = fcmp olt float %43, 0.000000e+00
  br i1 %50, label %then72, label %ifmerge74

then72:                                           ; preds = %loop-header71
  br label %loop-merge89

ifmerge74:                                        ; preds = %loop-header71
  %51 = load <4 x float> addrspace(1)* @bigColor7
  %assignment_tmp7576 = fadd <4 x float> %color.12, %51
  %52 = fcmp olt float %43, 1.000000e+00
  br i1 %52, label %then78, label %ifmerge86

then78:                                           ; preds = %ifmerge74
  %53 = extractelement <4 x float> %assignment_tmp7576, i32 2
  %54 = fadd float %53, 1.000000e+00
  %55 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp7576, i32 4, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float %54, i32 -1, float 0.000000e+00, i32 -1)
  %56 = fcmp olt float %43, 2.000000e+00
  br i1 %56, label %then80, label %else82

then80:                                           ; preds = %then78
  %57 = extractelement <4 x float> %55, i32 1
  %58 = fadd float %57, 1.000000e+00
  %59 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %55, i32 2, float 0.000000e+00, i32 -1, float %58, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge84

else82:                                           ; preds = %then78
  %60 = extractelement <4 x float> %55, i32 0
  %61 = fadd float %60, 1.000000e+00
  %62 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %55, i32 1, float %61, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %ifmerge84

ifmerge84:                                        ; preds = %else82, %then80
  %color.14 = phi <4 x float> [ %59, %then80 ], [ %62, %else82 ]
  br label %loop-merge89

ifmerge86:                                        ; preds = %ifmerge74
  %BaseColor87 = call <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32 0, i32 0)
  %color88 = fadd <4 x float> %assignment_tmp7576, %BaseColor87
  br label %loop-header71

loop-merge89:                                     ; preds = %ifmerge84, %then72
  %color.13 = phi <4 x float> [ %color.12, %then72 ], [ %color.14, %ifmerge84 ]
  br label %loop-header90

loop-header90:                                    ; preds = %loop-header90.backedge, %loop-merge89
  %color.15 = phi <4 x float> [ %color.13, %loop-merge89 ], [ %color.15.be, %loop-header90.backedge ]
  %63 = extractelement <4 x float> %color.15, i32 0
  %64 = fcmp oge float %63, 1.000000e+01
  br i1 %64, label %then91, label %ifmerge93

then91:                                           ; preds = %loop-header90
  call void @llvm.gla.fWriteData.v4f32(i32 0, <4 x float> %color.15)
  ret void

ifmerge93:                                        ; preds = %loop-header90
  %65 = load <4 x float> addrspace(1)* @bigColor8
  %assignment_tmp9495 = fadd <4 x float> %color.15, %65
  %66 = extractelement <4 x float> %assignment_tmp9495, i32 2
  %67 = load float addrspace(1)* @d8
  %68 = fcmp olt float %66, %67
  br i1 %68, label %then97, label %ifmerge101

then97:                                           ; preds = %ifmerge93
  %69 = extractelement <4 x float> %assignment_tmp9495, i32 3
  %70 = fcmp olt float %69, %42
  br i1 %70, label %then98, label %ifmerge100

then98:                                           ; preds = %then97
  br label %loop-header90.backedge

loop-header90.backedge:                           ; preds = %then98, %ifmerge101
  %color.15.be = phi <4 x float> [ %assignment_tmp9495, %then98 ], [ %74, %ifmerge101 ]
  br label %loop-header90

ifmerge100:                                       ; preds = %then97
  br label %ifmerge101

ifmerge101:                                       ; preds = %ifmerge100, %ifmerge93
  %71 = extractelement <4 x float> %assignment_tmp9495, i32 1
  %72 = extractelement <4 x float> %65, i32 0
  %73 = fadd float %71, %72
  %74 = call <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float> %assignment_tmp9495, i32 2, float 0.000000e+00, i32 -1, float %73, i32 -1, float 0.000000e+00, i32 -1, float 0.000000e+00, i32 -1)
  br label %loop-header90.backedge
}

declare <4 x float> @llvm.gla.fReadInterpolant.v4f32(i32, i32) nounwind readonly

declare void @llvm.gla.fWriteData.v4f32(i32, <4 x float>) nounwind

declare <4 x float> @llvm.gla.fMultiInsert.v4f32.v4f32.f32.f32.f32.f32(<4 x float>, i32, float, i32, float, i32, float, i32, float, i32) nounwind readnone


Loop info:
Loop at depth 1 containing: %loop-header<header><exiting>,%ifmerge<latch>
Loop at depth 1 containing: %loop-header2<header><exiting>,%ifmerge5<latch>
Loop at depth 1 containing: %loop-header9<header><exiting>,%ifmerge14<latch>
Loop at depth 1 containing: %loop-header16<header>,%loop-header16.backedge<latch>,%ifmerge29,%ifmerge26<exiting>,%then23,%ifmerge22,%else,%then20
Loop at depth 1 containing: %loop-header31<header>,%ifmerge40<latch>,%ifmerge37<exiting>,%then35
Loop at depth 1 containing: %loop-header43<header><exiting>,%ifmerge46<latch>
Loop at depth 1 containing: %loop-header57<header><exiting>,%ifmerge67<latch>,%ifmerge60<exiting>
Loop at depth 1 containing: %loop-header71<header><exiting>,%ifmerge86<latch>,%ifmerge74<exiting>
Loop at depth 1 containing: %loop-header90<header><exiting>,%loop-header90.backedge<latch>,%ifmerge101,%ifmerge93,%ifmerge100,%then97,%then98
Loop at depth 1 containing: %loop-header50<header><exiting>,%ifmerge53<latch>


Scalar evolution:
Classifying expressions for: @main
  %i.0 = phi i32 [ 0, %then ], [ %i7, %ifmerge5 ]
  -->  {0,+,1}<%loop-header2>		Exits: <<Unknown>>
  %4 = load i32 addrspace(1)* @Count
  -->  %4		Exits: <<Unknown>>
  %i7 = add i32 %i.0, 1
  -->  {1,+,1}<%loop-header2>		Exits: <<Unknown>>
Determining loop execution counts for: @main
Loop %loop-header: Unpredictable backedge-taken count. 
Loop %loop-header: Unpredictable max backedge-taken count. 
Loop %loop-header2: Unpredictable backedge-taken count. 
Loop %loop-header2: Unpredictable max backedge-taken count. 
Loop %loop-header9: Unpredictable backedge-taken count. 
Loop %loop-header9: Unpredictable max backedge-taken count. 
Loop %loop-header16: Unpredictable backedge-taken count. 
Loop %loop-header16: Unpredictable max backedge-taken count. 
Loop %loop-header31: Unpredictable backedge-taken count. 
Loop %loop-header31: Unpredictable max backedge-taken count. 
Loop %loop-header43: Unpredictable backedge-taken count. 
Loop %loop-header43: Unpredictable max backedge-taken count. 
Loop %loop-header57: <multiple exits> Unpredictable backedge-taken count. 
Loop %loop-header57: Unpredictable max backedge-taken count. 
Loop %loop-header71: <multiple exits> Unpredictable backedge-taken count. 
Loop %loop-header71: Unpredictable max backedge-taken count. 
Loop %loop-header90: Unpredictable backedge-taken count. 
Loop %loop-header90: Unpredictable max backedge-taken count. 
Loop %loop-header50: Unpredictable backedge-taken count. 
Loop %loop-header50: Unpredictable max backedge-taken count. 
compiling loops.frag...
uniform vec4 bigColor ; 
uniform vec4 bigColor2 ; 
uniform vec4 bigColor3 ; 
uniform vec4 bigColor4 ; 
uniform vec4 bigColor5 ; 
uniform vec4 bigColor6 ; 
uniform vec4 bigColor7 ; 
uniform vec4 bigColor8 ; 
varying vec4 BaseColor ; 
uniform float d ; 
uniform float d2 ; 
uniform float d3 ; 
uniform float d4 ; 
uniform float d5 ; 
uniform float d6 ; 
uniform float d7 ; 
uniform float d8 ; 
uniform int Count ; 
void  main (){
vec4 color = BaseColor ; while ( color . x < d ) {
color += bigColor ; }
for( int i = 0 ; ; i < Count ; ++ i ) {
color += bigColor2 ; }
do {
color += bigColor3 ; }
while ( color . x < d2 ); do {
color += bigColor4 ; if ( color . x < d4 ) continue; if ( color . y < d4 ) color . y += d4 ; else color . x += d4 ; }
while ( color . z < d4 ); do {
color += bigColor5 ; if ( color . y < d5 ) color . y += d5 ; }
while ( color . x < d5 ); if ( color . x < d6 ) {
while ( color . y < d6 ) color += bigColor6 ; }
else {
while ( color . z < d6 ) color . z += bigColor6 . z ; }
do {
if ( d7 < 0.000000 ) break; color += bigColor7 ; if ( d7 < 1.000000 ) {
color . z ++ ; break; }
color += BaseColor ; }
while ( true ); do {
if ( d7 < 0.000000 ) break; color += bigColor7 ; if ( d7 < 1.000000 ) {
color . z ++ ; if ( d7 < 2.000000 ) {
color . y ++ ; }
else {
color . x ++ ; }
break; }
color += BaseColor ; }
while ( true ); while ( color . x < 10 ) {
color += bigColor8 ; if ( color . z < d8 ) if ( color . w < d6 ) continue; color . y += bigColor8 . x ; }
gl_FragColor = color ; }



(
(declare (uniform ) int Count)
(declare (uniform ) float d8)
(declare (uniform ) float d7)
(declare (uniform ) float d6)
(declare (uniform ) float d5)
(declare (uniform ) float d4)
(declare (uniform ) float d3)
(declare (uniform ) float d2)
(declare (uniform ) float d)
(declare (in ) vec4 BaseColor)
(declare (uniform ) vec4 bigColor8)
(declare (uniform ) vec4 bigColor7)
(declare (uniform ) vec4 bigColor6)
(declare (uniform ) vec4 bigColor5)
(declare (uniform ) vec4 bigColor4)
(declare (uniform ) vec4 bigColor3)
(declare (uniform ) vec4 bigColor2)
(declare (uniform ) vec4 bigColor)
(declare (in ) vec4 gl_FragCoord)
(declare (in ) bool gl_FrontFacing)
(declare (out ) vec4 gl_FragColor)
(declare (out ) float gl_FragDepth)
(declare (in ) vec4 gl_Color)
(declare (in ) vec4 gl_SecondaryColor)
(declare (in ) float gl_FogFragCoord)
(declare (uniform ) mat4 gl_ModelViewMatrix)
(declare (uniform ) mat4 gl_ProjectionMatrix)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrix)
(declare (uniform ) mat3 gl_NormalMatrix)
(declare (uniform ) mat4 gl_ModelViewMatrixInverse)
(declare (uniform ) mat4 gl_ProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverse)
(declare (uniform ) mat4 gl_ModelViewMatrixTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixTranspose)
(declare (uniform ) mat4 gl_ModelViewMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ProjectionMatrixInverseTranspose)
(declare (uniform ) mat4 gl_ModelViewProjectionMatrixInverseTranspose)
(declare (uniform ) float gl_NormalScale)
(declare (uniform ) gl_LightModelParameters gl_LightModel)
(declare () int gl_MaxLights)
(declare () int gl_MaxClipPlanes)
(declare () int gl_MaxTextureUnits)
(declare () int gl_MaxTextureCoords)
(declare () int gl_MaxVertexAttribs)
(declare () int gl_MaxVertexUniformComponents)
(declare () int gl_MaxVaryingFloats)
(declare () int gl_MaxVertexTextureImageUnits)
(declare () int gl_MaxCombinedTextureImageUnits)
(declare () int gl_MaxTextureImageUnits)
(declare () int gl_MaxFragmentUniformComponents)
(declare (uniform ) (array mat4 4) gl_TextureMatrix)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverse)
(declare (uniform ) (array mat4 4) gl_TextureMatrixTranspose)
(declare (uniform ) (array mat4 4) gl_TextureMatrixInverseTranspose)
(declare (uniform ) gl_DepthRangeParameters gl_DepthRange)
(declare (uniform ) (array vec4 8) gl_ClipPlane)
(declare (uniform ) gl_PointParameters gl_Point)
(declare (uniform ) gl_MaterialParameters gl_FrontMaterial)
(declare (uniform ) gl_MaterialParameters gl_BackMaterial)
(declare (uniform ) (array gl_LightSourceParameters 8) gl_LightSource)
(declare (uniform ) gl_LightModelProducts gl_FrontLightModelProduct)
(declare (uniform ) gl_LightModelProducts gl_BackLightModelProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_FrontLightProduct)
(declare (uniform ) (array gl_LightProducts 8) gl_BackLightProduct)
(declare (uniform ) (array vec4 2) gl_TextureEnvColor)
(declare (uniform ) (array vec4 4) gl_EyePlaneS)
(declare (uniform ) (array vec4 4) gl_EyePlaneT)
(declare (uniform ) (array vec4 4) gl_EyePlaneR)
(declare (uniform ) (array vec4 4) gl_EyePlaneQ)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneS)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneT)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneR)
(declare (uniform ) (array vec4 4) gl_ObjectPlaneQ)
(declare (uniform ) gl_FogParameters gl_Fog)
(declare (in ) (array vec4 0) gl_TexCoord)
(declare () int gl_MaxDrawBuffers)
(declare (out ) (array vec4 2) gl_FragData)
(declare (in ) vec2 gl_PointCoord)
(declare (in ) (array float 8) gl_ClipDistance)
(function main
  (signature void
    (parameters
    )
    (
      (declare () int i)
      (declare () vec4 color)
      (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref BaseColor) ) 
      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(var_ref d) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor) ) ) 
      ))

      (assign (constant bool (1)) (x) (var_ref i)  (constant int (0)) ) 
      (loop () () () () (
        (if (expression bool >= (var_ref i) (var_ref Count) ) (
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor2) ) ) 
        (assign (constant bool (1)) (x) (var_ref i)  (expression int + (var_ref i) (constant int (1)) ) ) 
      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor3) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool >= (swiz x (var_ref assignment_tmp) )(var_ref d2) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor4) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz x (var_ref assignment_tmp) )(var_ref d4) ) (
          continue
        )
        ())

        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d4) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(var_ref d4) ) ) 
        )
        (
          (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(var_ref d4) ) ) 
        ))

        (if (expression bool >= (swiz z (var_ref color) )(var_ref d4) ) (
          break
        )
        ())

      ))

      (loop () () () () (
        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor5) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz y (var_ref assignment_tmp) )(var_ref d5) ) (
          (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(var_ref d5) ) ) 
        )
        ())

        (if (expression bool >= (swiz x (var_ref color) )(var_ref d5) ) (
          break
        )
        ())

      ))

      (if (expression bool < (swiz x (var_ref color) )(var_ref d6) ) (
        (loop () () () () (
          (if (expression bool >= (swiz y (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref bigColor6) ) ) 
        ))

      )
      (
        (loop () () () () (
          (if (expression bool >= (swiz z (var_ref color) )(var_ref d6) ) (
            break
          )
          ())

          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref color) )(swiz z (var_ref bigColor6) )) ) 
        ))

      ))

      (loop () () () () (
        (if (expression bool < (var_ref d7) (constant float (0.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor7) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (var_ref d7) (constant float (1.000000)) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (1.000000)) ) ) 
          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref BaseColor) ) ) 
      ))

      (loop () () () () (
        (if (expression bool < (var_ref d7) (constant float (0.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor7) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (var_ref d7) (constant float (1.000000)) ) (
          (assign (constant bool (1)) (z) (var_ref color)  (expression float + (swiz z (var_ref assignment_tmp) )(constant float (1.000000)) ) ) 
          (if (expression bool < (var_ref d7) (constant float (2.000000)) ) (
            (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref color) )(constant float (1.000000)) ) ) 
          )
          (
            (assign (constant bool (1)) (x) (var_ref color)  (expression float + (swiz x (var_ref color) )(constant float (1.000000)) ) ) 
          ))

          break
        )
        ())

        (assign (constant bool (1)) (xyzw) (var_ref color)  (expression vec4 + (var_ref color) (var_ref BaseColor) ) ) 
      ))

      (loop () () () () (
        (if (expression bool >= (swiz x (var_ref color) )(constant float (10.000000)) ) (
          break
        )
        ())

        (declare (temporary ) vec4 assignment_tmp)
        (assign (constant bool (1)) (xyzw) (var_ref assignment_tmp)  (expression vec4 + (var_ref color) (var_ref bigColor8) ) ) 
        (assign (constant bool (1)) (xyzw) (var_ref color)  (var_ref assignment_tmp) ) 
        (if (expression bool < (swiz z (var_ref assignment_tmp) )(var_ref d8) ) (
          (if (expression bool < (swiz w (var_ref assignment_tmp) )(var_ref d6) ) (
            continue
          )
          ())

        )
        ())

        (assign (constant bool (1)) (y) (var_ref color)  (expression float + (swiz y (var_ref assignment_tmp) )(swiz x (var_ref bigColor8) )) ) 
      ))

      (assign (constant bool (1)) (xyzw) (var_ref gl_FragColor)  (var_ref color) ) 
    ))

)


)
// LunarGOO output
#version 130
uniform float d;
uniform vec4 bigColor;
uniform int Count;
uniform vec4 bigColor2;
uniform vec4 bigColor3;
uniform float d2;
uniform vec4 bigColor4;
uniform float d4;
uniform vec4 bigColor5;
uniform float d5;
uniform float d6;
uniform vec4 bigColor6;
uniform float d7;
uniform vec4 bigColor7;
uniform vec4 bigColor8;
uniform float d8;
in vec4 BaseColor;
const int const43 = 0;
const int const47 = 1;
const float const70 = 0;
const float const73 = 1;
in vec4 BaseColor68;
const float const83 = 2;
in vec4 BaseColor87;
const float const90 = 10;

void main()
{
    vec4 color_0;
    vec4 color_1;
    int i_0;
    vec4 color_2;
    vec4 color_3;
    vec4 color_3_be;
    vec4 color_4;
    vec4 color_5;
    vec4 color_6;
    vec4 color_7;
    vec4 color_9;
    float temp32;
    vec4 color_8;
    vec4 color_10;
    vec4 color_11;
    vec4 color_12;
    vec4 color_14;
    vec4 color_13;
    vec4 color_15;
    vec4 color_15_be;
    color_0 = BaseColor;
    while (true) {
        bool temp41 = color_0.x >= d;
        if (temp41) {
            break;
        }
        
        vec4 color1 = color_0 + bigColor;
        color_0 = color1;
        continue;
    }
    
    color_1 = color_0;
    i_0 = const43;
    while (true) {
        bool temp44 = i_0 >= Count;
        if (temp44) {
            break;
        }
        
        vec4 color6 = color_1 + bigColor2;
        int temp46 = i_0 + const47;
        color_1 = color6;
        i_0 = temp46;
        continue;
    }
    
    color_2 = color_1;
    while (true) {
        vec4 assignment_tmp10 = color_2 + bigColor3;
        bool temp49 = assignment_tmp10.x >= d2;
        if (temp49) {
            break;
        }
        
        color_2 = assignment_tmp10;
        continue;
    }
    
    color_3 = assignment_tmp10;
    while (true) {
        vec4 assignment_tmp1718 = color_3 + bigColor4;
        bool temp51 = assignment_tmp1718.x < d4;
        if (temp51) {
            color_3_be = assignment_tmp1718;
            color_3 = color_3_be;
            continue;
        }
        else {
            bool temp52 = assignment_tmp1718.y < d4;
            if (temp52) {
                float temp53 = assignment_tmp1718.y + d4;
                vec4 temp54 = assignment_tmp1718;
                temp54.y = temp53.x;
                color_4 = temp54;
            }
            else {
                float temp55 = assignment_tmp1718.x + d4;
                vec4 temp56 = assignment_tmp1718;
                temp56.x = temp55.x;
                color_4 = temp56;
            }
            
            bool temp57 = color_4.z >= d4;
            if (temp57) {
                break;
            }
            
            color_3_be = color_4;
            color_3 = color_3_be;
            continue;
        }
        
        color_3 = color_3_be;
        continue;
    }
    
    color_5 = color_4;
    while (true) {
        vec4 assignment_tmp3233 = color_5 + bigColor5;
        bool temp59 = assignment_tmp3233.y < d5;
        color_6 = assignment_tmp3233;
        if (temp59) {
            float temp60 = assignment_tmp3233.y + d5;
            vec4 temp61 = assignment_tmp3233;
            temp61.y = temp60.x;
            color_6 = temp61;
        }
        
        bool temp62 = color_6.x >= d5;
        if (temp62) {
            break;
        }
        
        color_5 = color_6;
        continue;
    }
    
    bool temp63 = color_6.x < d6;
    if (temp63) {
        color_7 = color_6;
        while (true) {
            bool temp64 = color_7.y >= d6;
            if (temp64) {
                break;
            }
            
            vec4 color47 = color_7 + bigColor6;
            color_7 = color47;
            continue;
        }
        
        temp32 = d6;
        color_8 = color_7;
    }
    else {
        color_9 = color_6;
        while (true) {
            bool temp66 = color_9.z >= d6;
            if (temp66) {
                break;
            }
            
            float temp67 = color_9.z + bigColor6.z;
            vec4 temp68 = color_9;
            temp68.z = temp67.x;
            color_9 = temp68;
            continue;
        }
        
        temp32 = d6;
        color_8 = color_9;
    }
    
    color_10 = color_8;
    while (true) {
        bool temp69 = d7 < const70;
        if (temp69) {
            color_11 = color_10;
            break;
        }
        
        vec4 assignment_tmp6162 = color_10 + bigColor7;
        bool temp72 = d7 < const73;
        if (temp72) {
            float temp74 = assignment_tmp6162.z + const73;
            vec4 temp75 = assignment_tmp6162;
            temp75.z = temp74.x;
            color_11 = temp75;
            break;
        }
        
        vec4 color69 = assignment_tmp6162 + BaseColor68;
        color_10 = color69;
        continue;
    }
    
    color_12 = color_11;
    while (true) {
        bool temp77 = d7 < const70;
        if (temp77) {
            color_13 = color_12;
            break;
        }
        
        vec4 assignment_tmp7576 = color_12 + bigColor7;
        bool temp79 = d7 < const73;
        if (temp79) {
            float temp80 = assignment_tmp7576.z + const73;
            vec4 temp81 = assignment_tmp7576;
            temp81.z = temp80.x;
            bool temp82 = d7 < const83;
            if (temp82) {
                float temp84 = temp81.y + const73;
                vec4 temp85 = temp81;
                temp85.y = temp84.x;
                color_14 = temp85;
            }
            else {
                float temp86 = temp81.x + const73;
                vec4 temp87 = temp81;
                temp87.x = temp86.x;
                color_14 = temp87;
            }
            
            color_13 = color_14;
            break;
        }
        
        vec4 color88 = assignment_tmp7576 + BaseColor87;
        color_12 = color88;
        continue;
    }
    
    color_15 = color_13;
    while (true) {
        bool temp89 = color_15.x >= const90;
        if (temp89) {
            break;
        }
        
        vec4 assignment_tmp9495 = color_15 + bigColor8;
        bool temp92 = assignment_tmp9495.z < d8;
        if (temp92) {
            bool temp93 = assignment_tmp9495.w < temp32;
            if (temp93) {
                color_15_be = assignment_tmp9495;
                color_15 = color_15_be;
                continue;
            }
            else {
            }
            
        }
        
        float temp94 = assignment_tmp9495.y + bigColor8.x;
        vec4 temp95 = assignment_tmp9495;
        temp95.y = temp94.x;
        color_15_be = temp95;
        color_15 = color_15_be;
        continue;
    }
    
    gl_FragColor = color_15;
    
}
