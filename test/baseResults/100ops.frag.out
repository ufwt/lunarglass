
Top IR:
; ModuleID = 'Glslang'

@face1 = internal global float 0.000000e+00
@low = external addrspace(2) constant i32
@high = external addrspace(2) constant i32
@gl_FragColor = global <4 x float> zeroinitializer
@face2 = internal global float 0.000000e+00

define fastcc void @main() {
entry:
  %gl_FragColor = alloca <4 x float>
  %z = alloca i32
  store float 1.100000e+01, float* @face1
  store float -2.000000e+00, float* @face2
  br label %mainBody

mainBody:                                         ; preds = %entry
  store i32 3, i32* %z
  %0 = load i32 addrspace(2)* @low, !gla.uniform !1
  %1 = mul i32 2, %0, !gla.precision !6
  %2 = add i32 %1, 1, !gla.precision !6
  %3 = load i32 addrspace(2)* @high, !gla.uniform !3
  %4 = icmp slt i32 %2, %3
  br i1 %4, label %then, label %ifmerge

then:                                             ; preds = %mainBody
  %5 = load i32* %z
  %z1 = add i32 %5, 1, !gla.precision !6
  store i32 %z1, i32* %z
  br label %ifmerge

ifmerge:                                          ; preds = %mainBody, %then
  %6 = load float* @face1
  %7 = load i32* %z
  %8 = sitofp i32 %7 to float, !gla.precision !7
  %9 = load <4 x float>* %gl_FragColor
  %10 = insertelement <4 x float> undef, float %8, i32 0, !gla.precision !7
  %11 = insertelement <4 x float> %10, float %8, i32 1, !gla.precision !7
  %12 = insertelement <4 x float> %11, float %8, i32 2, !gla.precision !7
  %13 = insertelement <4 x float> %12, float %8, i32 3, !gla.precision !7
  %14 = insertelement <4 x float> undef, float %6, i32 0, !gla.precision !7
  %15 = insertelement <4 x float> %14, float %6, i32 1, !gla.precision !7
  %16 = insertelement <4 x float> %15, float %6, i32 2, !gla.precision !7
  %17 = insertelement <4 x float> %16, float %6, i32 3, !gla.precision !7
  %18 = fmul <4 x float> %17, %13, !gla.precision !7
  %19 = call float @"foo("()
  %20 = insertelement <4 x float> undef, float %19, i32 0, !gla.precision !7
  %21 = insertelement <4 x float> %20, float %19, i32 1, !gla.precision !7
  %22 = insertelement <4 x float> %21, float %19, i32 2, !gla.precision !7
  %23 = insertelement <4 x float> %22, float %19, i32 3, !gla.precision !7
  %gl_FragColor2 = fadd <4 x float> %18, %23, !gla.precision !7
  store <4 x float> %gl_FragColor2, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: alwaysinline
define internal fastcc float @"foo("() #0 {
entry:
  %0 = load float* @face2
  ret float %0

post-return:                                      ; No predecessors!
  unreachable
}

attributes #0 = { alwaysinline }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3}
!gla.outputs = !{!4}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"low", i32 12, i32* @low_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 2, i32 1024, null}
!3 = metadata !{metadata !"high", i32 12, i32* @high_typeProxy, metadata !2}
!4 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 2, i32 1024, null, i32 0, i32 43}
!6 = metadata !{i32 2}
!7 = metadata !{i32 1}


Bottom IR:
; ModuleID = 'Glslang'

@low = external addrspace(2) constant i32
@high = external addrspace(2) constant i32
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %0 = load i32 addrspace(2)* @low, align 4, !gla.uniform !1
  %1 = shl i32 %0, 1
  %2 = or i32 %1, 1
  %3 = load i32 addrspace(2)* @high, align 4, !gla.uniform !3
  %4 = icmp slt i32 %2, %3
  %z.0 = select i1 %4, float 4.000000e+00, float 3.000000e+00
  %5 = call <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float %z.0, <4 x i32> zeroinitializer)
  %6 = fmul <4 x float> %5, <float 1.100000e+01, float 1.100000e+01, float 1.100000e+01, float 1.100000e+01>, !gla.precision !6
  %gl_FragColor2 = fadd <4 x float> %6, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>, !gla.precision !6
  store <4 x float> %gl_FragColor2, <4 x float>* @gl_FragColor, align 16
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fSwizzle.v4f32.f32.v4i32(float, <4 x i32>) #0

attributes #0 = { nounwind readnone }

!gla.entrypoint = !{!0}
!gla.uniforms = !{!1, !3}
!gla.outputs = !{!4}

!0 = metadata !{metadata !"main", i32 15}
!1 = metadata !{metadata !"low", i32 12, i32* @low_typeProxy, metadata !2}
!2 = metadata !{i32 0, i32 2, i32 1024, null}
!3 = metadata !{metadata !"high", i32 12, i32* @high_typeProxy, metadata !2}
!4 = metadata !{metadata !"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, metadata !5}
!5 = metadata !{i32 0, i32 2, i32 1024, null, i32 0, i32 43}
!6 = metadata !{i32 1}

***Unsupported functionality: bit-wise OR in version 100
#version 100
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations
uniform mediump int low;
uniform mediump int high;
const int C_1 = 1;
const float C_4d0 = 4.0;
const float C_3d0 = 3.0;
const vec4 C_vec4p11d0p = vec4(11.0);
const vec4 C_vec4pa2d0p = vec4(-2.0);

void main()
{
	int H_9o89th = low * 2;
	int H_z3nldb1 = H_9o89th + C_1;
	bool H_idtad2 = H_z3nldb1 < high;
	float z = H_idtad2 ? C_4d0 : C_3d0;
	vec4 H_cnyhf51 = vec4(z);
	lowp vec4 H_w12xj81 = H_cnyhf51 * C_vec4p11d0p;
	lowp vec4 Ll_FragColor1 = H_w12xj81 + C_vec4pa2d0p;
	gl_FragColor = Ll_FragColor1;
	
}

#version 100
// LunarGOO output
precision mediump float; // this will be almost entirely overridden by individual declarations
uniform mediump int low;
uniform mediump int high;
const int C_1 = 1;
const float C_4d0 = 4.0;
const float C_3d0 = 3.0;
const vec4 C_vec4p11d0p = vec4(11.0);
const vec4 C_vec4pa2d0p = vec4(-2.0);

void main()
{
	int H_9o89th = low * 2;
	int H_z3nldb = H_9o89th + C_1;
	bool H_idtad = H_z3nldb < high;
	float H_k3s2lo = H_idtad ? C_4d0 : C_3d0;
	vec4 H_t4wtx4 = vec4(H_k3s2lo);
	mediump vec4 H_w12xj = H_t4wtx4 * C_vec4p11d0p;
	mediump vec4 Ll_FragColor = H_w12xj + C_vec4pa2d0p;
	gl_FragColor = Ll_FragColor;
	
}

